
final_course_work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fe8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004170  08004170  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004170  08004170  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004170  08004170  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004174  08004174  00014174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08004184  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004184  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3a0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7e  00000000  00000000  0002d3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010287  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d31f  00000000  00000000  00040727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063f81  00000000  00000000  0004da46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b19c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000b1a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004090 	.word	0x08004090

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004090 	.word	0x08004090

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <delay>:
 * ---------------------------------------
 */

// This function provides delay (in 1 / Timer_freq nanoseconds)
// delay must be < 65535
void delay(int delay) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if (delay > 0xFFFF)
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	025b      	lsls	r3, r3, #9
 800023e:	429a      	cmp	r2, r3
 8000240:	db01      	blt.n	8000246 <delay+0x16>
		delay = 0xFFFF;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <delay+0x38>)
 8000244:	607b      	str	r3, [r7, #4]
	(&htim16)->Instance->CNT = 0;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <delay+0x3c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2200      	movs	r2, #0
 800024c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((&htim16)->Instance->CNT < delay)
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <delay+0x3c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	429a      	cmp	r2, r3
 800025a:	d3f9      	bcc.n	8000250 <delay+0x20>
		;
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	b002      	add	sp, #8
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	0000ffff 	.word	0x0000ffff
 800026c:	20000168 	.word	0x20000168

08000270 <output>:
 * function use to print const strings in UART2
 * make print more coder friendly)
 *
 * @brief  pointer for string
 */
void output(char *string) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) string, strlen(string), 1000);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f7ff ff44 	bl	8000108 <strlen>
 8000280:	0003      	movs	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	23fa      	movs	r3, #250	; 0xfa
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	6879      	ldr	r1, [r7, #4]
 800028a:	4803      	ldr	r0, [pc, #12]	; (8000298 <output+0x28>)
 800028c:	f003 fb40 	bl	8003910 <HAL_UART_Transmit>
}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b002      	add	sp, #8
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000009c 	.word	0x2000009c

0800029c <HAL_TIM_IC_CaptureCallback>:
 *
 * catch changing state of PWM channel
 * check period of signal to avoid interferences (should write else)
 * write rising times in bit array
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	4b25      	ldr	r3, [pc, #148]	; (800033c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d143      	bne.n	8000334 <HAL_TIM_IC_CaptureCallback+0x98>
		int falling_edge = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
		int rising_edge = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	613b      	str	r3, [r7, #16]
		condition.callback_count += 1;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b8:	1c5a      	adds	r2, r3, #1
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002bc:	625a      	str	r2, [r3, #36]	; 0x24

		falling_edge = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 80002be:	4b1f      	ldr	r3, [pc, #124]	; (800033c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80002c0:	2104      	movs	r1, #4
 80002c2:	0018      	movs	r0, r3
 80002c4:	f002 fda0 	bl	8002e08 <HAL_TIM_ReadCapturedValue>
 80002c8:	0003      	movs	r3, r0
 80002ca:	617b      	str	r3, [r7, #20]
		rising_edge = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 fd99 	bl	8002e08 <HAL_TIM_ReadCapturedValue>
 80002d6:	0003      	movs	r3, r0
 80002d8:	613b      	str	r3, [r7, #16]
		if (condition.callback_count % 2 != 0
 80002da:	4b19      	ldr	r3, [pc, #100]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002de:	001a      	movs	r2, r3
 80002e0:	2301      	movs	r3, #1
 80002e2:	4013      	ands	r3, r2
 80002e4:	d020      	beq.n	8000328 <HAL_TIM_IC_CaptureCallback+0x8c>
				&& condition.callback_count != 1) {
 80002e6:	4b16      	ldr	r3, [pc, #88]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d01c      	beq.n	8000328 <HAL_TIM_IC_CaptureCallback+0x8c>
			int period = rising_edge + falling_edge;
 80002ee:	693a      	ldr	r2, [r7, #16]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	18d3      	adds	r3, r2, r3
 80002f4:	60fb      	str	r3, [r7, #12]
			if (period < T * 1.1 && period > T * 0.9) { // 10% gap for period
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	4a12      	ldr	r2, [pc, #72]	; (8000344 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	dc0f      	bgt.n	800031e <HAL_TIM_IC_CaptureCallback+0x82>
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000302:	4293      	cmp	r3, r2
 8000304:	dd0b      	ble.n	800031e <HAL_TIM_IC_CaptureCallback+0x82>
				condition.bit[condition.bit_count] = rising_edge;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000308:	6a1a      	ldr	r2, [r3, #32]
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	6939      	ldr	r1, [r7, #16]
 8000310:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000314:	2201      	movs	r2, #1
 8000316:	2140      	movs	r1, #64	; 0x40
 8000318:	0018      	movs	r0, r3
 800031a:	f001 f8bd 	bl	8001498 <HAL_GPIO_WritePin>
			}
			condition.bit_count += 1;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000320:	6a1b      	ldr	r3, [r3, #32]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000326:	621a      	str	r2, [r3, #32]
		}
		TIM3->CNT = 0;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	; 0x24
		TIM16->CNT = 0;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000330:	2200      	movs	r2, #0
 8000332:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b006      	add	sp, #24
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000054 	.word	0x20000054
 8000340:	20000028 	.word	0x20000028
 8000344:	0000157b 	.word	0x0000157b
 8000348:	00001194 	.word	0x00001194
 800034c:	48000400 	.word	0x48000400
 8000350:	40000400 	.word	0x40000400
 8000354:	40014400 	.word	0x40014400

08000358 <HAL_TIM_PeriodElapsedCallback>:
 *
 * IDEL without catching any bit
 * Timer run function every period with or without information
 * function do nothing in this case
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) { // reading last bite of byte
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4b37      	ldr	r3, [pc, #220]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000364:	429a      	cmp	r2, r3
 8000366:	d167      	bne.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000368:	4b36      	ldr	r3, [pc, #216]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800036a:	2200      	movs	r2, #0
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	0018      	movs	r0, r3
 8000370:	f001 f892 	bl	8001498 <HAL_GPIO_WritePin>
		if (condition.bit_count == 7 && condition.callback_count > 1) {
 8000374:	4b34      	ldr	r3, [pc, #208]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	2b07      	cmp	r3, #7
 800037a:	d119      	bne.n	80003b0 <HAL_TIM_PeriodElapsedCallback+0x58>
 800037c:	4b32      	ldr	r3, [pc, #200]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800037e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000380:	2b01      	cmp	r3, #1
 8000382:	dd15      	ble.n	80003b0 <HAL_TIM_PeriodElapsedCallback+0x58>
			condition.bit[condition.bit_count] = HAL_TIM_ReadCapturedValue(
 8000384:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000386:	2100      	movs	r1, #0
 8000388:	0018      	movs	r0, r3
 800038a:	f002 fd3d 	bl	8002e08 <HAL_TIM_ReadCapturedValue>
 800038e:	0001      	movs	r1, r0
 8000390:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000392:	6a1a      	ldr	r2, [r3, #32]
 8000394:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000396:	0092      	lsls	r2, r2, #2
 8000398:	50d1      	str	r1, [r2, r3]
					&htim3, TIM_CHANNEL_1);

			display_pwm_information(condition.bit);
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800039c:	0018      	movs	r0, r3
 800039e:	f000 f85b 	bl	8000458 <display_pwm_information>

			condition.bit_count = 0;
 80003a2:	4b29      	ldr	r3, [pc, #164]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
			condition.callback_count = 0;
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24
 80003ae:	e043      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
//			condition.connect = 1;
		} else if (condition.callback_count > 1 && condition.bit_count < 7) { // when caught less then 8 bit before IDEL give message about lost byte
 80003b0:	4b25      	ldr	r3, [pc, #148]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	dd28      	ble.n	800040a <HAL_TIM_PeriodElapsedCallback+0xb2>
 80003b8:	4b23      	ldr	r3, [pc, #140]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	2b06      	cmp	r3, #6
 80003be:	dc24      	bgt.n	800040a <HAL_TIM_PeriodElapsedCallback+0xb2>
			output("#LOST BYTE#");
 80003c0:	4b22      	ldr	r3, [pc, #136]	; (800044c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ff54 	bl	8000270 <output>
			if (condition.callback_count % 2 != 0) {
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	001a      	movs	r2, r3
 80003ce:	2301      	movs	r3, #1
 80003d0:	4013      	ands	r3, r2
 80003d2:	d00d      	beq.n	80003f0 <HAL_TIM_PeriodElapsedCallback+0x98>
//				start_finish_connection();
				condition.bit_count = 0;
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
				condition.callback_count = 0;
 80003da:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	; 0x24
				condition.connect = 0;
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	; 0x28
				output(" # Disconnect\r\n");
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff41 	bl	8000270 <output>
			if (condition.callback_count % 2 != 0) {
 80003ee:	e023      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
			} else {
				condition.bit_count = 0;
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
				condition.callback_count = 0;
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80003fe:	2200      	movs	r2, #0
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	0018      	movs	r0, r3
 8000404:	f001 f848 	bl	8001498 <HAL_GPIO_WritePin>
			if (condition.callback_count % 2 != 0) {
 8000408:	e016      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
			}
		} else if (condition.callback_count == 1) { // turning on/off transiver state of channel change 0V -> 3.3V / 3.3V -> 0V
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800040e:	2b01      	cmp	r3, #1
 8000410:	d111      	bne.n	8000436 <HAL_TIM_PeriodElapsedCallback+0xde>
//			start_finish_connection();
			if (condition.connect == 1) {
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000416:	2b01      	cmp	r3, #1
 8000418:	d106      	bne.n	8000428 <HAL_TIM_PeriodElapsedCallback+0xd0>
				output(" # Disconnection\r\n");
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800041c:	0018      	movs	r0, r3
 800041e:	f7ff ff27 	bl	8000270 <output>
				condition.connect = 0;
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000424:	2200      	movs	r2, #0
 8000426:	629a      	str	r2, [r3, #40]	; 0x28
			}
			condition.bit_count = 0;
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800042a:	2200      	movs	r2, #0
 800042c:	621a      	str	r2, [r3, #32]
			condition.callback_count = 0;
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000430:	2200      	movs	r2, #0
 8000432:	625a      	str	r2, [r3, #36]	; 0x24
 8000434:	e000      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
		} else
			// TIM run function every period ending
			return;
 8000436:	46c0      	nop			; (mov r8, r8)
	}
}
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	20000054 	.word	0x20000054
 8000444:	48000400 	.word	0x48000400
 8000448:	20000028 	.word	0x20000028
 800044c:	080040a8 	.word	0x080040a8
 8000450:	080040b4 	.word	0x080040b4
 8000454:	080040c4 	.word	0x080040c4

08000458 <display_pwm_information>:
 *
 * receives int array contain 8 rising times
 * convert rising times to char and display it
 *
 */
void display_pwm_information(int *bit) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	char ch = rises_to_char(bit);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	0018      	movs	r0, r3
 8000464:	f000 f840 	bl	80004e8 <rises_to_char>
 8000468:	0003      	movs	r3, r0
 800046a:	001a      	movs	r2, r3
 800046c:	210f      	movs	r1, #15
 800046e:	187b      	adds	r3, r7, r1
 8000470:	701a      	strb	r2, [r3, #0]
	if (ch == '\r')
 8000472:	187b      	adds	r3, r7, r1
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b0d      	cmp	r3, #13
 8000478:	d103      	bne.n	8000482 <display_pwm_information+0x2a>
		output("\n");
 800047a:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <display_pwm_information+0x7c>)
 800047c:	0018      	movs	r0, r3
 800047e:	f7ff fef7 	bl	8000270 <output>
	if (ch == SYN) {
 8000482:	230f      	movs	r3, #15
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b16      	cmp	r3, #22
 800048a:	d106      	bne.n	800049a <display_pwm_information+0x42>
		output(" - Start connection...\r\n");
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <display_pwm_information+0x80>)
 800048e:	0018      	movs	r0, r3
 8000490:	f7ff feee 	bl	8000270 <output>
		connect();
 8000494:	f000 f85e 	bl	8000554 <connect>
		return;
 8000498:	e018      	b.n	80004cc <display_pwm_information+0x74>
	} else if (ch == ACK && condition.connect == -1) {
 800049a:	230f      	movs	r3, #15
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b06      	cmp	r3, #6
 80004a2:	d10b      	bne.n	80004bc <display_pwm_information+0x64>
 80004a4:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <display_pwm_information+0x84>)
 80004a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a8:	3301      	adds	r3, #1
 80004aa:	d107      	bne.n	80004bc <display_pwm_information+0x64>
		output(" - Device connected successfully\r\n");
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <display_pwm_information+0x88>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff fede 	bl	8000270 <output>
		condition.connect = 1;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <display_pwm_information+0x84>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	629a      	str	r2, [r3, #40]	; 0x28
		return;
 80004ba:	e007      	b.n	80004cc <display_pwm_information+0x74>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 1000);
 80004bc:	23fa      	movs	r3, #250	; 0xfa
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	220f      	movs	r2, #15
 80004c2:	18b9      	adds	r1, r7, r2
 80004c4:	4807      	ldr	r0, [pc, #28]	; (80004e4 <display_pwm_information+0x8c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	f003 fa22 	bl	8003910 <HAL_UART_Transmit>
}
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b004      	add	sp, #16
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	080040d8 	.word	0x080040d8
 80004d8:	080040dc 	.word	0x080040dc
 80004dc:	20000028 	.word	0x20000028
 80004e0:	080040f8 	.word	0x080040f8
 80004e4:	2000009c 	.word	0x2000009c

080004e8 <rises_to_char>:

/* function return char from 8 rising times array
 * bit - pointer to 8 rising times array contain 8 bits
 * If rising time more then 50% period then this is a 1, else 0
 */
char rises_to_char(int *bit) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	char c = 0;
 80004f0:	2317      	movs	r3, #23
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0, rank = 128; i < 8 && rank > 0; i++, rank /= 2) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e018      	b.n	8000534 <rises_to_char+0x4c>
		if (bit[i] > T * 0.5)
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	18d3      	adds	r3, r2, r3
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a10      	ldr	r2, [pc, #64]	; (8000550 <rises_to_char+0x68>)
 800050e:	4293      	cmp	r3, r2
 8000510:	dd07      	ble.n	8000522 <rises_to_char+0x3a>
			c += rank;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	b2d9      	uxtb	r1, r3
 8000516:	2217      	movs	r2, #23
 8000518:	18bb      	adds	r3, r7, r2
 800051a:	18ba      	adds	r2, r7, r2
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	188a      	adds	r2, r1, r2
 8000520:	701a      	strb	r2, [r3, #0]
	for (int i = 0, rank = 128; i < 8 && rank > 0; i++, rank /= 2) {
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	3301      	adds	r3, #1
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	da00      	bge.n	8000530 <rises_to_char+0x48>
 800052e:	3301      	adds	r3, #1
 8000530:	105b      	asrs	r3, r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	2b07      	cmp	r3, #7
 8000538:	dc02      	bgt.n	8000540 <rises_to_char+0x58>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2b00      	cmp	r3, #0
 800053e:	dce0      	bgt.n	8000502 <rises_to_char+0x1a>
	}
	return c;
 8000540:	2317      	movs	r3, #23
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	781b      	ldrb	r3, [r3, #0]
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b006      	add	sp, #24
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	000009c4 	.word	0x000009c4

08000554 <connect>:
//<------------------- TRANCIVER CODE ---------------------->
void togglepin(uint8_t value);
void delay(int delay);
void send_value_pwm(char ch);

void connect(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

//	turning off receiver timers
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <connect+0x90>)
 800055a:	2100      	movs	r1, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f002 f857 	bl	8002610 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8000562:	4b20      	ldr	r3, [pc, #128]	; (80005e4 <connect+0x90>)
 8000564:	2104      	movs	r1, #4
 8000566:	0018      	movs	r0, r3
 8000568:	f002 f852 	bl	8002610 <HAL_TIM_IC_Stop_IT>
	delay(10 * T);
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <connect+0x94>)
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fe5e 	bl	8000230 <delay>
//	turning on tranceiver timers
	TIM1->ARR = COUNTER;
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <connect+0x98>)
 8000576:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <connect+0x9c>)
 8000578:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR2 = COUNTER + 1;
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <connect+0x98>)
 800057c:	4a1d      	ldr	r2, [pc, #116]	; (80005f4 <connect+0xa0>)
 800057e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000580:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <connect+0xa4>)
 8000582:	2104      	movs	r1, #4
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fdcd 	bl	8002124 <HAL_TIM_PWM_Start>

	delay(10 * T);
 800058a:	4b17      	ldr	r3, [pc, #92]	; (80005e8 <connect+0x94>)
 800058c:	0018      	movs	r0, r3
 800058e:	f7ff fe4f 	bl	8000230 <delay>
	send_value_pwm(SYN);
 8000592:	2016      	movs	r0, #22
 8000594:	f000 f836 	bl	8000604 <send_value_pwm>
	send_value_pwm(ACK);
 8000598:	2006      	movs	r0, #6
 800059a:	f000 f833 	bl	8000604 <send_value_pwm>
	delay(10 * T);
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <connect+0x94>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff fe45 	bl	8000230 <delay>
//	turning off tranceiver timers
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <connect+0xa4>)
 80005a8:	2104      	movs	r1, #4
 80005aa:	0018      	movs	r0, r3
 80005ac:	f001 fe60 	bl	8002270 <HAL_TIM_PWM_Stop>
//	turning on receiver timers
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <connect+0x90>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 ff29 	bl	800240c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80005ba:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <connect+0x90>)
 80005bc:	2104      	movs	r1, #4
 80005be:	0018      	movs	r0, r3
 80005c0:	f001 ff24 	bl	800240c <HAL_TIM_IC_Start_IT>

	delay(10 * T);
 80005c4:	4b08      	ldr	r3, [pc, #32]	; (80005e8 <connect+0x94>)
 80005c6:	0018      	movs	r0, r3
 80005c8:	f7ff fe32 	bl	8000230 <delay>
	output(" - Wait\r\n");
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <connect+0xa8>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f7ff fe4e 	bl	8000270 <output>
	condition.connect = -1;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <connect+0xac>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	4252      	negs	r2, r2
 80005da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005dc:	46c0      	nop			; (mov r8, r8)
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	20000054 	.word	0x20000054
 80005e8:	0000c350 	.word	0x0000c350
 80005ec:	40012c00 	.word	0x40012c00
 80005f0:	00001388 	.word	0x00001388
 80005f4:	00001389 	.word	0x00001389
 80005f8:	20000120 	.word	0x20000120
 80005fc:	0800411c 	.word	0x0800411c
 8000600:	20000028 	.word	0x20000028

08000604 <send_value_pwm>:

void send_value_pwm(char ch) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	0002      	movs	r2, r0
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	701a      	strb	r2, [r3, #0]
	for (char div = 128; div > 0; div /= 2) {
 8000610:	230f      	movs	r3, #15
 8000612:	18fb      	adds	r3, r7, r3
 8000614:	2280      	movs	r2, #128	; 0x80
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e01a      	b.n	8000650 <send_value_pwm+0x4c>
		if (ch >= div) {    // 1
 800061a:	1dfa      	adds	r2, r7, #7
 800061c:	200f      	movs	r0, #15
 800061e:	183b      	adds	r3, r7, r0
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	429a      	cmp	r2, r3
 8000626:	d30a      	bcc.n	800063e <send_value_pwm+0x3a>
			ch -= div;
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	1df9      	adds	r1, r7, #7
 800062c:	183a      	adds	r2, r7, r0
 800062e:	7809      	ldrb	r1, [r1, #0]
 8000630:	7812      	ldrb	r2, [r2, #0]
 8000632:	1a8a      	subs	r2, r1, r2
 8000634:	701a      	strb	r2, [r3, #0]
			togglepin(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f81a 	bl	8000670 <togglepin>
 800063c:	e002      	b.n	8000644 <send_value_pwm+0x40>
//			output("1");
		} else {
			togglepin(0);
 800063e:	2000      	movs	r0, #0
 8000640:	f000 f816 	bl	8000670 <togglepin>
	for (char div = 128; div > 0; div /= 2) {
 8000644:	220f      	movs	r2, #15
 8000646:	18bb      	adds	r3, r7, r2
 8000648:	18ba      	adds	r2, r7, r2
 800064a:	7812      	ldrb	r2, [r2, #0]
 800064c:	0852      	lsrs	r2, r2, #1
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	230f      	movs	r3, #15
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d1df      	bne.n	800061a <send_value_pwm+0x16>
//			output("0");
		}
	}
	delay(T);
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <send_value_pwm+0x68>)
 800065c:	0018      	movs	r0, r3
 800065e:	f7ff fde7 	bl	8000230 <delay>
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b004      	add	sp, #16
 8000668:	bd80      	pop	{r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	00001388 	.word	0x00001388

08000670 <togglepin>:

void togglepin(uint8_t value) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	0002      	movs	r2, r0
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	701a      	strb	r2, [r3, #0]
//	turning off pin
	TIM1->CCR2 = 0;
 800067c:	4b19      	ldr	r3, [pc, #100]	; (80006e4 <togglepin+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CNT = COUNTER;
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <togglepin+0x74>)
 8000684:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <togglepin+0x78>)
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
	if (value == 1) {
 8000688:	1dfb      	adds	r3, r7, #7
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d110      	bne.n	80006b2 <togglepin+0x42>
		delay(T * 0.8);
 8000690:	23fa      	movs	r3, #250	; 0xfa
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	0018      	movs	r0, r3
 8000696:	f7ff fdcb 	bl	8000230 <delay>
		//	turning on pin
		TIM1->CCR2 = COUNTER + 1;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <togglepin+0x74>)
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <togglepin+0x7c>)
 800069e:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CNT = COUNTER;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <togglepin+0x74>)
 80006a2:	4a11      	ldr	r2, [pc, #68]	; (80006e8 <togglepin+0x78>)
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
		delay(T * 0.2);
 80006a6:	23fa      	movs	r3, #250	; 0xfa
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f7ff fdc0 	bl	8000230 <delay>
 80006b0:	e015      	b.n	80006de <togglepin+0x6e>
	} else if (value == 0) {
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d110      	bne.n	80006dc <togglepin+0x6c>
		delay(T * 0.2);
 80006ba:	23fa      	movs	r3, #250	; 0xfa
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff fdb6 	bl	8000230 <delay>
		//	turning on pin
		TIM1->CCR2 = COUNTER + 1;
 80006c4:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <togglepin+0x74>)
 80006c6:	4a09      	ldr	r2, [pc, #36]	; (80006ec <togglepin+0x7c>)
 80006c8:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CNT = COUNTER;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <togglepin+0x74>)
 80006cc:	4a06      	ldr	r2, [pc, #24]	; (80006e8 <togglepin+0x78>)
 80006ce:	625a      	str	r2, [r3, #36]	; 0x24
		delay(T * 0.8);
 80006d0:	23fa      	movs	r3, #250	; 0xfa
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff fdab 	bl	8000230 <delay>
 80006da:	e000      	b.n	80006de <togglepin+0x6e>
	} else
		return;
 80006dc:	46c0      	nop			; (mov r8, r8)
}
 80006de:	46bd      	mov	sp, r7
 80006e0:	b002      	add	sp, #8
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40012c00 	.word	0x40012c00
 80006e8:	00001388 	.word	0x00001388
 80006ec:	00001389 	.word	0x00001389

080006f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006f4:	f000 fc1e 	bl	8000f34 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006f8:	f000 f83c 	bl	8000774 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006fc:	f000 fa34 	bl	8000b68 <MX_GPIO_Init>
	MX_TIM16_Init();
 8000700:	f000 f9da 	bl	8000ab8 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 8000704:	f000 fa00 	bl	8000b08 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000708:	f000 f896 	bl	8000838 <MX_TIM1_Init>
	MX_TIM3_Init();
 800070c:	f000 f948 	bl	80009a0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

//	timer for read values
	TIM3->ARR = T;
 8000710:	4b12      	ldr	r3, [pc, #72]	; (800075c <main+0x6c>)
 8000712:	4a13      	ldr	r2, [pc, #76]	; (8000760 <main+0x70>)
 8000714:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000716:	4b13      	ldr	r3, [pc, #76]	; (8000764 <main+0x74>)
 8000718:	2100      	movs	r1, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fe76 	bl	800240c <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000720:	4b10      	ldr	r3, [pc, #64]	; (8000764 <main+0x74>)
 8000722:	2104      	movs	r1, #4
 8000724:	0018      	movs	r0, r3
 8000726:	f001 fe71 	bl	800240c <HAL_TIM_IC_Start_IT>

// start TIM3 again to catch IDEL after empty period
	HAL_TIM_Base_Start_IT(&htim3);
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <main+0x74>)
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fc5b 	bl	8001fe8 <HAL_TIM_Base_Start_IT>

	TIM3->ARR = T;
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <main+0x6c>)
 8000734:	4a0a      	ldr	r2, [pc, #40]	; (8000760 <main+0x70>)
 8000736:	62da      	str	r2, [r3, #44]	; 0x2c

//	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
//	TIM1->ARR = T;

// Timer for calculating delays
	HAL_TIM_Base_Start_IT(&htim16);
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <main+0x78>)
 800073a:	0018      	movs	r0, r3
 800073c:	f001 fc54 	bl	8001fe8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	output("Still work\r\n");
 8000740:	4b0a      	ldr	r3, [pc, #40]	; (800076c <main+0x7c>)
 8000742:	0018      	movs	r0, r3
 8000744:	f7ff fd94 	bl	8000270 <output>
	condition.callback_count = 0;
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <main+0x80>)
 800074a:	2200      	movs	r2, #0
 800074c:	625a      	str	r2, [r3, #36]	; 0x24
	condition.bit_count = 0;
 800074e:	4b08      	ldr	r3, [pc, #32]	; (8000770 <main+0x80>)
 8000750:	2200      	movs	r2, #0
 8000752:	621a      	str	r2, [r3, #32]
	condition.connect = 0;
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <main+0x80>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	; 0x28

	while (1) {
 800075a:	e7fe      	b.n	800075a <main+0x6a>
 800075c:	40000400 	.word	0x40000400
 8000760:	00001388 	.word	0x00001388
 8000764:	20000054 	.word	0x20000054
 8000768:	20000168 	.word	0x20000168
 800076c:	08004128 	.word	0x08004128
 8000770:	20000028 	.word	0x20000028

08000774 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000774:	b590      	push	{r4, r7, lr}
 8000776:	b095      	sub	sp, #84	; 0x54
 8000778:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800077a:	2420      	movs	r4, #32
 800077c:	193b      	adds	r3, r7, r4
 800077e:	0018      	movs	r0, r3
 8000780:	2330      	movs	r3, #48	; 0x30
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f003 fc7b 	bl	8004080 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800078a:	2310      	movs	r3, #16
 800078c:	18fb      	adds	r3, r7, r3
 800078e:	0018      	movs	r0, r3
 8000790:	2310      	movs	r3, #16
 8000792:	001a      	movs	r2, r3
 8000794:	2100      	movs	r1, #0
 8000796:	f003 fc73 	bl	8004080 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800079a:	003b      	movs	r3, r7
 800079c:	0018      	movs	r0, r3
 800079e:	2310      	movs	r3, #16
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f003 fc6c 	bl	8004080 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a8:	0021      	movs	r1, r4
 80007aa:	187b      	adds	r3, r7, r1
 80007ac:	2202      	movs	r2, #2
 80007ae:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	2201      	movs	r2, #1
 80007b4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	2210      	movs	r2, #16
 80007ba:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007bc:	187b      	adds	r3, r7, r1
 80007be:	2202      	movs	r2, #2
 80007c0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007c2:	187b      	adds	r3, r7, r1
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007c8:	187b      	adds	r3, r7, r1
 80007ca:	22a0      	movs	r2, #160	; 0xa0
 80007cc:	0392      	lsls	r2, r2, #14
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007d0:	187b      	adds	r3, r7, r1
 80007d2:	2200      	movs	r2, #0
 80007d4:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fe7b 	bl	80014d4 <HAL_RCC_OscConfig>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x72>
		Error_Handler();
 80007e2:	f000 fa09 	bl	8000bf8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007e6:	2110      	movs	r1, #16
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2207      	movs	r2, #7
 80007ec:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2202      	movs	r2, #2
 80007f2:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2101      	movs	r1, #1
 8000804:	0018      	movs	r0, r3
 8000806:	f001 f97f 	bl	8001b08 <HAL_RCC_ClockConfig>
 800080a:	1e03      	subs	r3, r0, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x9e>
		Error_Handler();
 800080e:	f000 f9f3 	bl	8000bf8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000812:	003b      	movs	r3, r7
 8000814:	2201      	movs	r2, #1
 8000816:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000818:	003b      	movs	r3, r7
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800081e:	003b      	movs	r3, r7
 8000820:	0018      	movs	r0, r3
 8000822:	f001 fac3 	bl	8001dac <HAL_RCCEx_PeriphCLKConfig>
 8000826:	1e03      	subs	r3, r0, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xba>
		Error_Handler();
 800082a:	f000 f9e5 	bl	8000bf8 <Error_Handler>
	}
}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b015      	add	sp, #84	; 0x54
 8000834:	bd90      	pop	{r4, r7, pc}
	...

08000838 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b096      	sub	sp, #88	; 0x58
 800083c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800083e:	2348      	movs	r3, #72	; 0x48
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	0018      	movs	r0, r3
 8000844:	2310      	movs	r3, #16
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 fc19 	bl	8004080 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	0018      	movs	r0, r3
 8000854:	2308      	movs	r3, #8
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f003 fc11 	bl	8004080 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800085e:	2324      	movs	r3, #36	; 0x24
 8000860:	18fb      	adds	r3, r7, r3
 8000862:	0018      	movs	r0, r3
 8000864:	231c      	movs	r3, #28
 8000866:	001a      	movs	r2, r3
 8000868:	2100      	movs	r1, #0
 800086a:	f003 fc09 	bl	8004080 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800086e:	1d3b      	adds	r3, r7, #4
 8000870:	0018      	movs	r0, r3
 8000872:	2320      	movs	r3, #32
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f003 fc02 	bl	8004080 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800087c:	4b46      	ldr	r3, [pc, #280]	; (8000998 <MX_TIM1_Init+0x160>)
 800087e:	4a47      	ldr	r2, [pc, #284]	; (800099c <MX_TIM1_Init+0x164>)
 8000880:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 12 - 1;
 8000882:	4b45      	ldr	r3, [pc, #276]	; (8000998 <MX_TIM1_Init+0x160>)
 8000884:	220b      	movs	r2, #11
 8000886:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000888:	4b43      	ldr	r3, [pc, #268]	; (8000998 <MX_TIM1_Init+0x160>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 800088e:	4b42      	ldr	r3, [pc, #264]	; (8000998 <MX_TIM1_Init+0x160>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	4b40      	ldr	r3, [pc, #256]	; (8000998 <MX_TIM1_Init+0x160>)
 8000896:	2200      	movs	r2, #0
 8000898:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800089a:	4b3f      	ldr	r3, [pc, #252]	; (8000998 <MX_TIM1_Init+0x160>)
 800089c:	2200      	movs	r2, #0
 800089e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b3d      	ldr	r3, [pc, #244]	; (8000998 <MX_TIM1_Init+0x160>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80008a6:	4b3c      	ldr	r3, [pc, #240]	; (8000998 <MX_TIM1_Init+0x160>)
 80008a8:	0018      	movs	r0, r3
 80008aa:	f001 fb4d 	bl	8001f48 <HAL_TIM_Base_Init>
 80008ae:	1e03      	subs	r3, r0, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM1_Init+0x7e>
		Error_Handler();
 80008b2:	f000 f9a1 	bl	8000bf8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008b6:	2148      	movs	r1, #72	; 0x48
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	0152      	lsls	r2, r2, #5
 80008be:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80008c0:	187a      	adds	r2, r7, r1
 80008c2:	4b35      	ldr	r3, [pc, #212]	; (8000998 <MX_TIM1_Init+0x160>)
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f002 f9ca 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0x9c>
		Error_Handler();
 80008d0:	f000 f992 	bl	8000bf8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80008d4:	4b30      	ldr	r3, [pc, #192]	; (8000998 <MX_TIM1_Init+0x160>)
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fbcc 	bl	8002074 <HAL_TIM_PWM_Init>
 80008dc:	1e03      	subs	r3, r0, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM1_Init+0xac>
		Error_Handler();
 80008e0:	f000 f98a 	bl	8000bf8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2140      	movs	r1, #64	; 0x40
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80008f2:	187a      	adds	r2, r7, r1
 80008f4:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_TIM1_Init+0x160>)
 80008f6:	0011      	movs	r1, r2
 80008f8:	0018      	movs	r0, r3
 80008fa:	f002 fef5 	bl	80036e8 <HAL_TIMEx_MasterConfigSynchronization>
 80008fe:	1e03      	subs	r3, r0, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xce>
			!= HAL_OK) {
		Error_Handler();
 8000902:	f000 f979 	bl	8000bf8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000906:	2124      	movs	r1, #36	; 0x24
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2260      	movs	r2, #96	; 0x60
 800090c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2200      	movs	r2, #0
 800091e:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000920:	187b      	adds	r3, r7, r1
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000932:	1879      	adds	r1, r7, r1
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_TIM1_Init+0x160>)
 8000936:	2204      	movs	r2, #4
 8000938:	0018      	movs	r0, r3
 800093a:	f002 f8cb 	bl	8002ad4 <HAL_TIM_PWM_ConfigChannel>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM1_Init+0x10e>
			!= HAL_OK) {
		Error_Handler();
 8000942:	f000 f959 	bl	8000bf8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	0192      	lsls	r2, r2, #6
 800096a:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000972:	1d3a      	adds	r2, r7, #4
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_TIM1_Init+0x160>)
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f002 ff07 	bl	800378c <HAL_TIMEx_ConfigBreakDeadTime>
 800097e:	1e03      	subs	r3, r0, #0
 8000980:	d001      	beq.n	8000986 <MX_TIM1_Init+0x14e>
			!= HAL_OK) {
		Error_Handler();
 8000982:	f000 f939 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <MX_TIM1_Init+0x160>)
 8000988:	0018      	movs	r0, r3
 800098a:	f000 f9e7 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	46bd      	mov	sp, r7
 8000992:	b016      	add	sp, #88	; 0x58
 8000994:	bd80      	pop	{r7, pc}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20000120 	.word	0x20000120
 800099c:	40012c00 	.word	0x40012c00

080009a0 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08a      	sub	sp, #40	; 0x28
 80009a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009a6:	2318      	movs	r3, #24
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	0018      	movs	r0, r3
 80009ac:	2310      	movs	r3, #16
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f003 fb65 	bl	8004080 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009b6:	2310      	movs	r3, #16
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	2308      	movs	r3, #8
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f003 fb5d 	bl	8004080 <memset>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80009c6:	003b      	movs	r3, r7
 80009c8:	0018      	movs	r0, r3
 80009ca:	2310      	movs	r3, #16
 80009cc:	001a      	movs	r2, r3
 80009ce:	2100      	movs	r1, #0
 80009d0:	f003 fb56 	bl	8004080 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80009d4:	4b35      	ldr	r3, [pc, #212]	; (8000aac <MX_TIM3_Init+0x10c>)
 80009d6:	4a36      	ldr	r2, [pc, #216]	; (8000ab0 <MX_TIM3_Init+0x110>)
 80009d8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 12 - 1;
 80009da:	4b34      	ldr	r3, [pc, #208]	; (8000aac <MX_TIM3_Init+0x10c>)
 80009dc:	220b      	movs	r2, #11
 80009de:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e0:	4b32      	ldr	r3, [pc, #200]	; (8000aac <MX_TIM3_Init+0x10c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80009e6:	4b31      	ldr	r3, [pc, #196]	; (8000aac <MX_TIM3_Init+0x10c>)
 80009e8:	4a32      	ldr	r2, [pc, #200]	; (8000ab4 <MX_TIM3_Init+0x114>)
 80009ea:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b2f      	ldr	r3, [pc, #188]	; (8000aac <MX_TIM3_Init+0x10c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b2e      	ldr	r3, [pc, #184]	; (8000aac <MX_TIM3_Init+0x10c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80009f8:	4b2c      	ldr	r3, [pc, #176]	; (8000aac <MX_TIM3_Init+0x10c>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 faa4 	bl	8001f48 <HAL_TIM_Base_Init>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000a04:	f000 f8f8 	bl	8000bf8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a08:	2118      	movs	r1, #24
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2280      	movs	r2, #128	; 0x80
 8000a0e:	0152      	lsls	r2, r2, #5
 8000a10:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000a12:	187a      	adds	r2, r7, r1
 8000a14:	4b25      	ldr	r3, [pc, #148]	; (8000aac <MX_TIM3_Init+0x10c>)
 8000a16:	0011      	movs	r1, r2
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f002 f921 	bl	8002c60 <HAL_TIM_ConfigClockSource>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM3_Init+0x86>
		Error_Handler();
 8000a22:	f000 f8e9 	bl	8000bf8 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <MX_TIM3_Init+0x10c>)
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 fc97 	bl	800235c <HAL_TIM_IC_Init>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM3_Init+0x96>
		Error_Handler();
 8000a32:	f000 f8e1 	bl	8000bf8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2110      	movs	r1, #16
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000a44:	187a      	adds	r2, r7, r1
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <MX_TIM3_Init+0x10c>)
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f002 fe4c 	bl	80036e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	1e03      	subs	r3, r0, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000a54:	f000 f8d0 	bl	8000bf8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a58:	003b      	movs	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a5e:	003b      	movs	r3, r7
 8000a60:	2201      	movs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a64:	003b      	movs	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000a70:	0039      	movs	r1, r7
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_TIM3_Init+0x10c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	0018      	movs	r0, r3
 8000a78:	f001 ff88 	bl	800298c <HAL_TIM_IC_ConfigChannel>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0xe4>
		Error_Handler();
 8000a80:	f000 f8ba 	bl	8000bf8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a84:	003b      	movs	r3, r7
 8000a86:	2202      	movs	r2, #2
 8000a88:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a8a:	003b      	movs	r3, r7
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8000a90:	0039      	movs	r1, r7
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_TIM3_Init+0x10c>)
 8000a94:	2204      	movs	r2, #4
 8000a96:	0018      	movs	r0, r3
 8000a98:	f001 ff78 	bl	800298c <HAL_TIM_IC_ConfigChannel>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM3_Init+0x104>
		Error_Handler();
 8000aa0:	f000 f8aa 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000aa4:	46c0      	nop			; (mov r8, r8)
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	b00a      	add	sp, #40	; 0x28
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000054 	.word	0x20000054
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	0000ffff 	.word	0x0000ffff

08000ab8 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_TIM16_Init+0x44>)
 8000abe:	4a10      	ldr	r2, [pc, #64]	; (8000b00 <MX_TIM16_Init+0x48>)
 8000ac0:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 12 - 1;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ac4:	220b      	movs	r2, #11
 8000ac6:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_TIM16_Init+0x44>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ad0:	4a0c      	ldr	r2, [pc, #48]	; (8000b04 <MX_TIM16_Init+0x4c>)
 8000ad2:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_TIM16_Init+0x44>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <MX_TIM16_Init+0x44>)
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fa2d 	bl	8001f48 <HAL_TIM_Base_Init>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM16_Init+0x3e>
		Error_Handler();
 8000af2:	f000 f881 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000168 	.word	0x20000168
 8000b00:	40014400 	.word	0x40014400
 8000b04:	0000ffff 	.word	0x0000ffff

08000b08 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b0e:	4a15      	ldr	r2, [pc, #84]	; (8000b64 <MX_USART1_UART_Init+0x5c>)
 8000b10:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b14:	22e1      	movs	r2, #225	; 0xe1
 8000b16:	0252      	lsls	r2, r2, #9
 8000b18:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b4a:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <MX_USART1_UART_Init+0x58>)
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f002 fe8b 	bl	8003868 <HAL_UART_Init>
 8000b52:	1e03      	subs	r3, r0, #0
 8000b54:	d001      	beq.n	8000b5a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000b56:	f000 f84f 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	2000009c 	.word	0x2000009c
 8000b64:	40013800 	.word	0x40013800

08000b68 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b6e:	240c      	movs	r4, #12
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	0018      	movs	r0, r3
 8000b74:	2314      	movs	r3, #20
 8000b76:	001a      	movs	r2, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f003 fa81 	bl	8004080 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <MX_GPIO_Init+0x88>)
 8000b80:	695a      	ldr	r2, [r3, #20]
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <MX_GPIO_Init+0x88>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0289      	lsls	r1, r1, #10
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <MX_GPIO_Init+0x88>)
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	029b      	lsls	r3, r3, #10
 8000b94:	4013      	ands	r3, r2
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0x88>)
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_GPIO_Init+0x88>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	02c9      	lsls	r1, r1, #11
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	615a      	str	r2, [r3, #20]
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_GPIO_Init+0x88>)
 8000baa:	695a      	ldr	r2, [r3, #20]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	02db      	lsls	r3, r3, #11
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2140      	movs	r1, #64	; 0x40
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fc6b 	bl	8001498 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000bc2:	0021      	movs	r1, r4
 8000bc4:	187b      	adds	r3, r7, r1
 8000bc6:	2240      	movs	r2, #64	; 0x40
 8000bc8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	187b      	adds	r3, r7, r1
 8000bcc:	2201      	movs	r2, #1
 8000bce:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	187b      	adds	r3, r7, r1
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	187b      	adds	r3, r7, r1
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	4a05      	ldr	r2, [pc, #20]	; (8000bf4 <MX_GPIO_Init+0x8c>)
 8000be0:	0019      	movs	r1, r3
 8000be2:	0010      	movs	r0, r2
 8000be4:	f000 fae8 	bl	80011b8 <HAL_GPIO_Init>

}
 8000be8:	46c0      	nop			; (mov r8, r8)
 8000bea:	46bd      	mov	sp, r7
 8000bec:	b009      	add	sp, #36	; 0x24
 8000bee:	bd90      	pop	{r4, r7, pc}
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	48000400 	.word	0x48000400

08000bf8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <HAL_MspInit+0x44>)
 8000c0c:	699a      	ldr	r2, [r3, #24]
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <HAL_MspInit+0x44>)
 8000c10:	2101      	movs	r1, #1
 8000c12:	430a      	orrs	r2, r1
 8000c14:	619a      	str	r2, [r3, #24]
 8000c16:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <HAL_MspInit+0x44>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <HAL_MspInit+0x44>)
 8000c24:	69da      	ldr	r2, [r3, #28]
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <HAL_MspInit+0x44>)
 8000c28:	2180      	movs	r1, #128	; 0x80
 8000c2a:	0549      	lsls	r1, r1, #21
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	61da      	str	r2, [r3, #28]
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_MspInit+0x44>)
 8000c32:	69da      	ldr	r2, [r3, #28]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	055b      	lsls	r3, r3, #21
 8000c38:	4013      	ands	r3, r2
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b002      	add	sp, #8
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	40021000 	.word	0x40021000

08000c4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	231c      	movs	r3, #28
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	0018      	movs	r0, r3
 8000c5a:	2314      	movs	r3, #20
 8000c5c:	001a      	movs	r2, r3
 8000c5e:	2100      	movs	r1, #0
 8000c60:	f003 fa0e 	bl	8004080 <memset>
  if(htim_base->Instance==TIM1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a37      	ldr	r2, [pc, #220]	; (8000d48 <HAL_TIM_Base_MspInit+0xfc>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d116      	bne.n	8000c9c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c6e:	4b37      	ldr	r3, [pc, #220]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000c70:	699a      	ldr	r2, [r3, #24]
 8000c72:	4b36      	ldr	r3, [pc, #216]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000c74:	2180      	movs	r1, #128	; 0x80
 8000c76:	0109      	lsls	r1, r1, #4
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	619a      	str	r2, [r3, #24]
 8000c7c:	4b33      	ldr	r3, [pc, #204]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000c7e:	699a      	ldr	r2, [r3, #24]
 8000c80:	2380      	movs	r3, #128	; 0x80
 8000c82:	011b      	lsls	r3, r3, #4
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	200e      	movs	r0, #14
 8000c90:	f000 fa60 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c94:	200e      	movs	r0, #14
 8000c96:	f000 fa72 	bl	800117e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c9a:	e050      	b.n	8000d3e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a2b      	ldr	r2, [pc, #172]	; (8000d50 <HAL_TIM_Base_MspInit+0x104>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d138      	bne.n	8000d18 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000ca8:	69da      	ldr	r2, [r3, #28]
 8000caa:	4b28      	ldr	r3, [pc, #160]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000cac:	2102      	movs	r1, #2
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	61da      	str	r2, [r3, #28]
 8000cb2:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	4013      	ands	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000cc0:	695a      	ldr	r2, [r3, #20]
 8000cc2:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000cc4:	2180      	movs	r1, #128	; 0x80
 8000cc6:	02c9      	lsls	r1, r1, #11
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	615a      	str	r2, [r3, #20]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000cce:	695a      	ldr	r2, [r3, #20]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	02db      	lsls	r3, r3, #11
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cda:	211c      	movs	r1, #28
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2210      	movs	r2, #16
 8000ce0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	187b      	adds	r3, r7, r1
 8000cfc:	4a15      	ldr	r2, [pc, #84]	; (8000d54 <HAL_TIM_Base_MspInit+0x108>)
 8000cfe:	0019      	movs	r1, r3
 8000d00:	0010      	movs	r0, r2
 8000d02:	f000 fa59 	bl	80011b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2010      	movs	r0, #16
 8000d0c:	f000 fa22 	bl	8001154 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d10:	2010      	movs	r0, #16
 8000d12:	f000 fa34 	bl	800117e <HAL_NVIC_EnableIRQ>
}
 8000d16:	e012      	b.n	8000d3e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM16)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0e      	ldr	r2, [pc, #56]	; (8000d58 <HAL_TIM_Base_MspInit+0x10c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10d      	bne.n	8000d3e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000d24:	699a      	ldr	r2, [r3, #24]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000d28:	2180      	movs	r1, #128	; 0x80
 8000d2a:	0289      	lsls	r1, r1, #10
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	619a      	str	r2, [r3, #24]
 8000d30:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_TIM_Base_MspInit+0x100>)
 8000d32:	699a      	ldr	r2, [r3, #24]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	029b      	lsls	r3, r3, #10
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
}
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b00c      	add	sp, #48	; 0x30
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	40012c00 	.word	0x40012c00
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40000400 	.word	0x40000400
 8000d54:	48000400 	.word	0x48000400
 8000d58:	40014400 	.word	0x40014400

08000d5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b089      	sub	sp, #36	; 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	240c      	movs	r4, #12
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	0018      	movs	r0, r3
 8000d6a:	2314      	movs	r3, #20
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f003 f986 	bl	8004080 <memset>
  if(htim->Instance==TIM1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a16      	ldr	r2, [pc, #88]	; (8000dd4 <HAL_TIM_MspPostInit+0x78>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d125      	bne.n	8000dca <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4b16      	ldr	r3, [pc, #88]	; (8000dd8 <HAL_TIM_MspPostInit+0x7c>)
 8000d80:	695a      	ldr	r2, [r3, #20]
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_TIM_MspPostInit+0x7c>)
 8000d84:	2180      	movs	r1, #128	; 0x80
 8000d86:	0289      	lsls	r1, r1, #10
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	615a      	str	r2, [r3, #20]
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <HAL_TIM_MspPostInit+0x7c>)
 8000d8e:	695a      	ldr	r2, [r3, #20]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	029b      	lsls	r3, r3, #10
 8000d94:	4013      	ands	r3, r2
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	0092      	lsls	r2, r2, #2
 8000da0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	0021      	movs	r1, r4
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2202      	movs	r2, #2
 8000da8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2200      	movs	r2, #0
 8000dae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	187b      	adds	r3, r7, r1
 8000db2:	2200      	movs	r2, #0
 8000db4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2202      	movs	r2, #2
 8000dba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbc:	187a      	adds	r2, r7, r1
 8000dbe:	2390      	movs	r3, #144	; 0x90
 8000dc0:	05db      	lsls	r3, r3, #23
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f000 f9f7 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	b009      	add	sp, #36	; 0x24
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	40012c00 	.word	0x40012c00
 8000dd8:	40021000 	.word	0x40021000

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b08b      	sub	sp, #44	; 0x2c
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	2414      	movs	r4, #20
 8000de6:	193b      	adds	r3, r7, r4
 8000de8:	0018      	movs	r0, r3
 8000dea:	2314      	movs	r3, #20
 8000dec:	001a      	movs	r2, r3
 8000dee:	2100      	movs	r1, #0
 8000df0:	f003 f946 	bl	8004080 <memset>
  if(huart->Instance==USART1)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <HAL_UART_MspInit+0x90>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d132      	bne.n	8000e64 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dfe:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <HAL_UART_MspInit+0x94>)
 8000e00:	699a      	ldr	r2, [r3, #24]
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_UART_MspInit+0x94>)
 8000e04:	2180      	movs	r1, #128	; 0x80
 8000e06:	01c9      	lsls	r1, r1, #7
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	619a      	str	r2, [r3, #24]
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_UART_MspInit+0x94>)
 8000e0e:	699a      	ldr	r2, [r3, #24]
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	01db      	lsls	r3, r3, #7
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <HAL_UART_MspInit+0x94>)
 8000e1c:	695a      	ldr	r2, [r3, #20]
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_UART_MspInit+0x94>)
 8000e20:	2180      	movs	r1, #128	; 0x80
 8000e22:	0289      	lsls	r1, r1, #10
 8000e24:	430a      	orrs	r2, r1
 8000e26:	615a      	str	r2, [r3, #20]
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <HAL_UART_MspInit+0x94>)
 8000e2a:	695a      	ldr	r2, [r3, #20]
 8000e2c:	2380      	movs	r3, #128	; 0x80
 8000e2e:	029b      	lsls	r3, r3, #10
 8000e30:	4013      	ands	r3, r2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e36:	0021      	movs	r1, r4
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	220c      	movs	r2, #12
 8000e3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2201      	movs	r2, #1
 8000e54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	187a      	adds	r2, r7, r1
 8000e58:	2390      	movs	r3, #144	; 0x90
 8000e5a:	05db      	lsls	r3, r3, #23
 8000e5c:	0011      	movs	r1, r2
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 f9aa 	bl	80011b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b00b      	add	sp, #44	; 0x2c
 8000e6a:	bd90      	pop	{r4, r7, pc}
 8000e6c:	40013800 	.word	0x40013800
 8000e70:	40021000 	.word	0x40021000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e98:	f000 f894 	bl	8000fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ea8:	4b03      	ldr	r3, [pc, #12]	; (8000eb8 <TIM1_CC_IRQHandler+0x14>)
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f001 fc58 	bl	8002760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000120 	.word	0x20000120

08000ebc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <TIM3_IRQHandler+0x14>)
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f001 fc4c 	bl	8002760 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	20000054 	.word	0x20000054

08000ed4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <Reset_Handler>:
 8000ee0:	480d      	ldr	r0, [pc, #52]	; (8000f18 <LoopForever+0x2>)
 8000ee2:	4685      	mov	sp, r0
 8000ee4:	480d      	ldr	r0, [pc, #52]	; (8000f1c <LoopForever+0x6>)
 8000ee6:	490e      	ldr	r1, [pc, #56]	; (8000f20 <LoopForever+0xa>)
 8000ee8:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <LoopForever+0xe>)
 8000eea:	2300      	movs	r3, #0
 8000eec:	e002      	b.n	8000ef4 <LoopCopyDataInit>

08000eee <CopyDataInit>:
 8000eee:	58d4      	ldr	r4, [r2, r3]
 8000ef0:	50c4      	str	r4, [r0, r3]
 8000ef2:	3304      	adds	r3, #4

08000ef4 <LoopCopyDataInit>:
 8000ef4:	18c4      	adds	r4, r0, r3
 8000ef6:	428c      	cmp	r4, r1
 8000ef8:	d3f9      	bcc.n	8000eee <CopyDataInit>
 8000efa:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <LoopForever+0x12>)
 8000efc:	4c0b      	ldr	r4, [pc, #44]	; (8000f2c <LoopForever+0x16>)
 8000efe:	2300      	movs	r3, #0
 8000f00:	e001      	b.n	8000f06 <LoopFillZerobss>

08000f02 <FillZerobss>:
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	3204      	adds	r2, #4

08000f06 <LoopFillZerobss>:
 8000f06:	42a2      	cmp	r2, r4
 8000f08:	d3fb      	bcc.n	8000f02 <FillZerobss>
 8000f0a:	f7ff ffe3 	bl	8000ed4 <SystemInit>
 8000f0e:	f003 f893 	bl	8004038 <__libc_init_array>
 8000f12:	f7ff fbed 	bl	80006f0 <main>

08000f16 <LoopForever>:
 8000f16:	e7fe      	b.n	8000f16 <LoopForever>
 8000f18:	20001000 	.word	0x20001000
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	2000000c 	.word	0x2000000c
 8000f24:	08004178 	.word	0x08004178
 8000f28:	2000000c 	.word	0x2000000c
 8000f2c:	200001b4 	.word	0x200001b4

08000f30 <ADC1_IRQHandler>:
 8000f30:	e7fe      	b.n	8000f30 <ADC1_IRQHandler>
	...

08000f34 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <HAL_Init+0x24>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_Init+0x24>)
 8000f3e:	2110      	movs	r1, #16
 8000f40:	430a      	orrs	r2, r1
 8000f42:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f809 	bl	8000f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4a:	f7ff fe5b 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	0018      	movs	r0, r3
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	40022000 	.word	0x40022000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f64:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0x5c>)
 8000f66:	681c      	ldr	r4, [r3, #0]
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x60>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	23fa      	movs	r3, #250	; 0xfa
 8000f70:	0098      	lsls	r0, r3, #2
 8000f72:	f7ff f8d1 	bl	8000118 <__udivsi3>
 8000f76:	0003      	movs	r3, r0
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0020      	movs	r0, r4
 8000f7c:	f7ff f8cc 	bl	8000118 <__udivsi3>
 8000f80:	0003      	movs	r3, r0
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 f90b 	bl	800119e <HAL_SYSTICK_Config>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e00f      	b.n	8000fb0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b03      	cmp	r3, #3
 8000f94:	d80b      	bhi.n	8000fae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	2301      	movs	r3, #1
 8000f9a:	425b      	negs	r3, r3
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f000 f8d8 	bl	8001154 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_InitTick+0x64>)
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b003      	add	sp, #12
 8000fb6:	bd90      	pop	{r4, r7, pc}
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc8:	4b05      	ldr	r3, [pc, #20]	; (8000fe0 <HAL_IncTick+0x1c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	18d2      	adds	r2, r2, r3
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_IncTick+0x20>)
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	200001b0 	.word	0x200001b0

08000fe8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b02      	ldr	r3, [pc, #8]	; (8000ff8 <HAL_GetTick+0x10>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	200001b0 	.word	0x200001b0

08000ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	0002      	movs	r2, r0
 8001004:	1dfb      	adds	r3, r7, #7
 8001006:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b7f      	cmp	r3, #127	; 0x7f
 800100e:	d809      	bhi.n	8001024 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	001a      	movs	r2, r3
 8001016:	231f      	movs	r3, #31
 8001018:	401a      	ands	r2, r3
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_EnableIRQ+0x30>)
 800101c:	2101      	movs	r1, #1
 800101e:	4091      	lsls	r1, r2
 8001020:	000a      	movs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
  }
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	0002      	movs	r2, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b7f      	cmp	r3, #127	; 0x7f
 8001044:	d828      	bhi.n	8001098 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001046:	4a2f      	ldr	r2, [pc, #188]	; (8001104 <__NVIC_SetPriority+0xd4>)
 8001048:	1dfb      	adds	r3, r7, #7
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	089b      	lsrs	r3, r3, #2
 8001050:	33c0      	adds	r3, #192	; 0xc0
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	589b      	ldr	r3, [r3, r2]
 8001056:	1dfa      	adds	r2, r7, #7
 8001058:	7812      	ldrb	r2, [r2, #0]
 800105a:	0011      	movs	r1, r2
 800105c:	2203      	movs	r2, #3
 800105e:	400a      	ands	r2, r1
 8001060:	00d2      	lsls	r2, r2, #3
 8001062:	21ff      	movs	r1, #255	; 0xff
 8001064:	4091      	lsls	r1, r2
 8001066:	000a      	movs	r2, r1
 8001068:	43d2      	mvns	r2, r2
 800106a:	401a      	ands	r2, r3
 800106c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	019b      	lsls	r3, r3, #6
 8001072:	22ff      	movs	r2, #255	; 0xff
 8001074:	401a      	ands	r2, r3
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	0018      	movs	r0, r3
 800107c:	2303      	movs	r3, #3
 800107e:	4003      	ands	r3, r0
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001084:	481f      	ldr	r0, [pc, #124]	; (8001104 <__NVIC_SetPriority+0xd4>)
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	430a      	orrs	r2, r1
 8001090:	33c0      	adds	r3, #192	; 0xc0
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001096:	e031      	b.n	80010fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4a1b      	ldr	r2, [pc, #108]	; (8001108 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	0019      	movs	r1, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	400b      	ands	r3, r1
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3306      	adds	r3, #6
 80010aa:	009b      	lsls	r3, r3, #2
 80010ac:	18d3      	adds	r3, r2, r3
 80010ae:	3304      	adds	r3, #4
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	1dfa      	adds	r2, r7, #7
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	0011      	movs	r1, r2
 80010b8:	2203      	movs	r2, #3
 80010ba:	400a      	ands	r2, r1
 80010bc:	00d2      	lsls	r2, r2, #3
 80010be:	21ff      	movs	r1, #255	; 0xff
 80010c0:	4091      	lsls	r1, r2
 80010c2:	000a      	movs	r2, r1
 80010c4:	43d2      	mvns	r2, r2
 80010c6:	401a      	ands	r2, r3
 80010c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	019b      	lsls	r3, r3, #6
 80010ce:	22ff      	movs	r2, #255	; 0xff
 80010d0:	401a      	ands	r2, r3
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	0018      	movs	r0, r3
 80010d8:	2303      	movs	r3, #3
 80010da:	4003      	ands	r3, r0
 80010dc:	00db      	lsls	r3, r3, #3
 80010de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	4809      	ldr	r0, [pc, #36]	; (8001108 <__NVIC_SetPriority+0xd8>)
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	001c      	movs	r4, r3
 80010e8:	230f      	movs	r3, #15
 80010ea:	4023      	ands	r3, r4
 80010ec:	3b08      	subs	r3, #8
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	430a      	orrs	r2, r1
 80010f2:	3306      	adds	r3, #6
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	18c3      	adds	r3, r0, r3
 80010f8:	3304      	adds	r3, #4
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b003      	add	sp, #12
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	e000e100 	.word	0xe000e100
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	1e5a      	subs	r2, r3, #1
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	045b      	lsls	r3, r3, #17
 800111c:	429a      	cmp	r2, r3
 800111e:	d301      	bcc.n	8001124 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001120:	2301      	movs	r3, #1
 8001122:	e010      	b.n	8001146 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <SysTick_Config+0x44>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	3a01      	subs	r2, #1
 800112a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112c:	2301      	movs	r3, #1
 800112e:	425b      	negs	r3, r3
 8001130:	2103      	movs	r1, #3
 8001132:	0018      	movs	r0, r3
 8001134:	f7ff ff7c 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x44>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x44>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	0018      	movs	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60b9      	str	r1, [r7, #8]
 800115c:	607a      	str	r2, [r7, #4]
 800115e:	210f      	movs	r1, #15
 8001160:	187b      	adds	r3, r7, r1
 8001162:	1c02      	adds	r2, r0, #0
 8001164:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	187b      	adds	r3, r7, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	b25b      	sxtb	r3, r3
 800116e:	0011      	movs	r1, r2
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff ff5d 	bl	8001030 <__NVIC_SetPriority>
}
 8001176:	46c0      	nop			; (mov r8, r8)
 8001178:	46bd      	mov	sp, r7
 800117a:	b004      	add	sp, #16
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	0002      	movs	r2, r0
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	b25b      	sxtb	r3, r3
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff ff33 	bl	8000ffc <__NVIC_EnableIRQ>
}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	46bd      	mov	sp, r7
 800119a:	b002      	add	sp, #8
 800119c:	bd80      	pop	{r7, pc}

0800119e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800119e:	b580      	push	{r7, lr}
 80011a0:	b082      	sub	sp, #8
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	0018      	movs	r0, r3
 80011aa:	f7ff ffaf 	bl	800110c <SysTick_Config>
 80011ae:	0003      	movs	r3, r0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	b002      	add	sp, #8
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c2:	2300      	movs	r3, #0
 80011c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011c6:	e14f      	b.n	8001468 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2101      	movs	r1, #1
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4091      	lsls	r1, r2
 80011d2:	000a      	movs	r2, r1
 80011d4:	4013      	ands	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d100      	bne.n	80011e0 <HAL_GPIO_Init+0x28>
 80011de:	e140      	b.n	8001462 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d005      	beq.n	80011f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d130      	bne.n	800125a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	409a      	lsls	r2, r3
 8001206:	0013      	movs	r3, r2
 8001208:	43da      	mvns	r2, r3
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	409a      	lsls	r2, r3
 800121a:	0013      	movs	r3, r2
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800122e:	2201      	movs	r2, #1
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	091b      	lsrs	r3, r3, #4
 8001244:	2201      	movs	r2, #1
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2203      	movs	r2, #3
 8001260:	4013      	ands	r3, r2
 8001262:	2b03      	cmp	r3, #3
 8001264:	d017      	beq.n	8001296 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	2203      	movs	r2, #3
 8001272:	409a      	lsls	r2, r3
 8001274:	0013      	movs	r3, r2
 8001276:	43da      	mvns	r2, r3
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	689a      	ldr	r2, [r3, #8]
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2203      	movs	r2, #3
 800129c:	4013      	ands	r3, r2
 800129e:	2b02      	cmp	r3, #2
 80012a0:	d123      	bne.n	80012ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	0092      	lsls	r2, r2, #2
 80012ac:	58d3      	ldr	r3, [r2, r3]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	2207      	movs	r2, #7
 80012b4:	4013      	ands	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	220f      	movs	r2, #15
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	691a      	ldr	r2, [r3, #16]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2107      	movs	r1, #7
 80012ce:	400b      	ands	r3, r1
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	409a      	lsls	r2, r3
 80012d4:	0013      	movs	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	0092      	lsls	r2, r2, #2
 80012e6:	6939      	ldr	r1, [r7, #16]
 80012e8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	005b      	lsls	r3, r3, #1
 80012f4:	2203      	movs	r2, #3
 80012f6:	409a      	lsls	r2, r3
 80012f8:	0013      	movs	r3, r2
 80012fa:	43da      	mvns	r2, r3
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2203      	movs	r2, #3
 8001308:	401a      	ands	r2, r3
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	409a      	lsls	r2, r3
 8001310:	0013      	movs	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	23c0      	movs	r3, #192	; 0xc0
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d100      	bne.n	800132c <HAL_GPIO_Init+0x174>
 800132a:	e09a      	b.n	8001462 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132c:	4b54      	ldr	r3, [pc, #336]	; (8001480 <HAL_GPIO_Init+0x2c8>)
 800132e:	699a      	ldr	r2, [r3, #24]
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_GPIO_Init+0x2c8>)
 8001332:	2101      	movs	r1, #1
 8001334:	430a      	orrs	r2, r1
 8001336:	619a      	str	r2, [r3, #24]
 8001338:	4b51      	ldr	r3, [pc, #324]	; (8001480 <HAL_GPIO_Init+0x2c8>)
 800133a:	699b      	ldr	r3, [r3, #24]
 800133c:	2201      	movs	r2, #1
 800133e:	4013      	ands	r3, r2
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001344:	4a4f      	ldr	r2, [pc, #316]	; (8001484 <HAL_GPIO_Init+0x2cc>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	589b      	ldr	r3, [r3, r2]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2203      	movs	r2, #3
 8001356:	4013      	ands	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	409a      	lsls	r2, r3
 800135e:	0013      	movs	r3, r2
 8001360:	43da      	mvns	r2, r3
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	4013      	ands	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	2390      	movs	r3, #144	; 0x90
 800136c:	05db      	lsls	r3, r3, #23
 800136e:	429a      	cmp	r2, r3
 8001370:	d013      	beq.n	800139a <HAL_GPIO_Init+0x1e2>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a44      	ldr	r2, [pc, #272]	; (8001488 <HAL_GPIO_Init+0x2d0>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d00d      	beq.n	8001396 <HAL_GPIO_Init+0x1de>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a43      	ldr	r2, [pc, #268]	; (800148c <HAL_GPIO_Init+0x2d4>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d007      	beq.n	8001392 <HAL_GPIO_Init+0x1da>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a42      	ldr	r2, [pc, #264]	; (8001490 <HAL_GPIO_Init+0x2d8>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d101      	bne.n	800138e <HAL_GPIO_Init+0x1d6>
 800138a:	2303      	movs	r3, #3
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x1e4>
 800138e:	2305      	movs	r3, #5
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x1e4>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x1e4>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x1e4>
 800139a:	2300      	movs	r3, #0
 800139c:	697a      	ldr	r2, [r7, #20]
 800139e:	2103      	movs	r1, #3
 80013a0:	400a      	ands	r2, r1
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ac:	4935      	ldr	r1, [pc, #212]	; (8001484 <HAL_GPIO_Init+0x2cc>)
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ba:	4b36      	ldr	r3, [pc, #216]	; (8001494 <HAL_GPIO_Init+0x2dc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43da      	mvns	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685a      	ldr	r2, [r3, #4]
 80013ce:	2380      	movs	r3, #128	; 0x80
 80013d0:	025b      	lsls	r3, r3, #9
 80013d2:	4013      	ands	r3, r2
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013de:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <HAL_GPIO_Init+0x2dc>)
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_GPIO_Init+0x2dc>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	43da      	mvns	r2, r3
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	029b      	lsls	r3, r3, #10
 80013fc:	4013      	ands	r3, r2
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001408:	4b22      	ldr	r3, [pc, #136]	; (8001494 <HAL_GPIO_Init+0x2dc>)
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800140e:	4b21      	ldr	r3, [pc, #132]	; (8001494 <HAL_GPIO_Init+0x2dc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	43da      	mvns	r2, r3
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	4013      	ands	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	2380      	movs	r3, #128	; 0x80
 8001424:	035b      	lsls	r3, r3, #13
 8001426:	4013      	ands	r3, r2
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_GPIO_Init+0x2dc>)
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_GPIO_Init+0x2dc>)
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	43da      	mvns	r2, r3
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	039b      	lsls	r3, r3, #14
 8001450:	4013      	ands	r3, r2
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800145c:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_GPIO_Init+0x2dc>)
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	3301      	adds	r3, #1
 8001466:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	40da      	lsrs	r2, r3
 8001470:	1e13      	subs	r3, r2, #0
 8001472:	d000      	beq.n	8001476 <HAL_GPIO_Init+0x2be>
 8001474:	e6a8      	b.n	80011c8 <HAL_GPIO_Init+0x10>
  } 
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b006      	add	sp, #24
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40010000 	.word	0x40010000
 8001488:	48000400 	.word	0x48000400
 800148c:	48000800 	.word	0x48000800
 8001490:	48000c00 	.word	0x48000c00
 8001494:	40010400 	.word	0x40010400

08001498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	0008      	movs	r0, r1
 80014a2:	0011      	movs	r1, r2
 80014a4:	1cbb      	adds	r3, r7, #2
 80014a6:	1c02      	adds	r2, r0, #0
 80014a8:	801a      	strh	r2, [r3, #0]
 80014aa:	1c7b      	adds	r3, r7, #1
 80014ac:	1c0a      	adds	r2, r1, #0
 80014ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014b0:	1c7b      	adds	r3, r7, #1
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014b8:	1cbb      	adds	r3, r7, #2
 80014ba:	881a      	ldrh	r2, [r3, #0]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014c0:	e003      	b.n	80014ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014c2:	1cbb      	adds	r3, r7, #2
 80014c4:	881a      	ldrh	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	46bd      	mov	sp, r7
 80014ce:	b002      	add	sp, #8
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e301      	b.n	8001aea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	d100      	bne.n	80014f2 <HAL_RCC_OscConfig+0x1e>
 80014f0:	e08d      	b.n	800160e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014f2:	4bc3      	ldr	r3, [pc, #780]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	220c      	movs	r2, #12
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d00e      	beq.n	800151c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014fe:	4bc0      	ldr	r3, [pc, #768]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	220c      	movs	r2, #12
 8001504:	4013      	ands	r3, r2
 8001506:	2b08      	cmp	r3, #8
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x64>
 800150a:	4bbd      	ldr	r3, [pc, #756]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	2380      	movs	r3, #128	; 0x80
 8001510:	025b      	lsls	r3, r3, #9
 8001512:	401a      	ands	r2, r3
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	025b      	lsls	r3, r3, #9
 8001518:	429a      	cmp	r2, r3
 800151a:	d10d      	bne.n	8001538 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151c:	4bb8      	ldr	r3, [pc, #736]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	2380      	movs	r3, #128	; 0x80
 8001522:	029b      	lsls	r3, r3, #10
 8001524:	4013      	ands	r3, r2
 8001526:	d100      	bne.n	800152a <HAL_RCC_OscConfig+0x56>
 8001528:	e070      	b.n	800160c <HAL_RCC_OscConfig+0x138>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d000      	beq.n	8001534 <HAL_RCC_OscConfig+0x60>
 8001532:	e06b      	b.n	800160c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e2d8      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d107      	bne.n	8001550 <HAL_RCC_OscConfig+0x7c>
 8001540:	4baf      	ldr	r3, [pc, #700]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4bae      	ldr	r3, [pc, #696]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	0249      	lsls	r1, r1, #9
 800154a:	430a      	orrs	r2, r1
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	e02f      	b.n	80015b0 <HAL_RCC_OscConfig+0xdc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d10c      	bne.n	8001572 <HAL_RCC_OscConfig+0x9e>
 8001558:	4ba9      	ldr	r3, [pc, #676]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4ba8      	ldr	r3, [pc, #672]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800155e:	49a9      	ldr	r1, [pc, #676]	; (8001804 <HAL_RCC_OscConfig+0x330>)
 8001560:	400a      	ands	r2, r1
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	4ba6      	ldr	r3, [pc, #664]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4ba5      	ldr	r3, [pc, #660]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800156a:	49a7      	ldr	r1, [pc, #668]	; (8001808 <HAL_RCC_OscConfig+0x334>)
 800156c:	400a      	ands	r2, r1
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	e01e      	b.n	80015b0 <HAL_RCC_OscConfig+0xdc>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10e      	bne.n	8001598 <HAL_RCC_OscConfig+0xc4>
 800157a:	4ba1      	ldr	r3, [pc, #644]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	4ba0      	ldr	r3, [pc, #640]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001580:	2180      	movs	r1, #128	; 0x80
 8001582:	02c9      	lsls	r1, r1, #11
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	4b9d      	ldr	r3, [pc, #628]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b9c      	ldr	r3, [pc, #624]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800158e:	2180      	movs	r1, #128	; 0x80
 8001590:	0249      	lsls	r1, r1, #9
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xdc>
 8001598:	4b99      	ldr	r3, [pc, #612]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b98      	ldr	r3, [pc, #608]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800159e:	4999      	ldr	r1, [pc, #612]	; (8001804 <HAL_RCC_OscConfig+0x330>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4b96      	ldr	r3, [pc, #600]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b95      	ldr	r3, [pc, #596]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	4997      	ldr	r1, [pc, #604]	; (8001808 <HAL_RCC_OscConfig+0x334>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d014      	beq.n	80015e2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fd16 	bl	8000fe8 <HAL_GetTick>
 80015bc:	0003      	movs	r3, r0
 80015be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c2:	f7ff fd11 	bl	8000fe8 <HAL_GetTick>
 80015c6:	0002      	movs	r2, r0
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b64      	cmp	r3, #100	; 0x64
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e28a      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d4:	4b8a      	ldr	r3, [pc, #552]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	; 0x80
 80015da:	029b      	lsls	r3, r3, #10
 80015dc:	4013      	ands	r3, r2
 80015de:	d0f0      	beq.n	80015c2 <HAL_RCC_OscConfig+0xee>
 80015e0:	e015      	b.n	800160e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fd01 	bl	8000fe8 <HAL_GetTick>
 80015e6:	0003      	movs	r3, r0
 80015e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fcfc 	bl	8000fe8 <HAL_GetTick>
 80015f0:	0002      	movs	r2, r0
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e275      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	4b80      	ldr	r3, [pc, #512]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	029b      	lsls	r3, r3, #10
 8001606:	4013      	ands	r3, r2
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x118>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2202      	movs	r2, #2
 8001614:	4013      	ands	r3, r2
 8001616:	d100      	bne.n	800161a <HAL_RCC_OscConfig+0x146>
 8001618:	e069      	b.n	80016ee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800161a:	4b79      	ldr	r3, [pc, #484]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	220c      	movs	r2, #12
 8001620:	4013      	ands	r3, r2
 8001622:	d00b      	beq.n	800163c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001624:	4b76      	ldr	r3, [pc, #472]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	220c      	movs	r2, #12
 800162a:	4013      	ands	r3, r2
 800162c:	2b08      	cmp	r3, #8
 800162e:	d11c      	bne.n	800166a <HAL_RCC_OscConfig+0x196>
 8001630:	4b73      	ldr	r3, [pc, #460]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	025b      	lsls	r3, r3, #9
 8001638:	4013      	ands	r3, r2
 800163a:	d116      	bne.n	800166a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163c:	4b70      	ldr	r3, [pc, #448]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2202      	movs	r2, #2
 8001642:	4013      	ands	r3, r2
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x17e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e24b      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	22f8      	movs	r2, #248	; 0xf8
 8001658:	4393      	bics	r3, r2
 800165a:	0019      	movs	r1, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	00da      	lsls	r2, r3, #3
 8001662:	4b67      	ldr	r3, [pc, #412]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001664:	430a      	orrs	r2, r1
 8001666:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001668:	e041      	b.n	80016ee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d024      	beq.n	80016bc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001672:	4b63      	ldr	r3, [pc, #396]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	4b62      	ldr	r3, [pc, #392]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001678:	2101      	movs	r1, #1
 800167a:	430a      	orrs	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167e:	f7ff fcb3 	bl	8000fe8 <HAL_GetTick>
 8001682:	0003      	movs	r3, r0
 8001684:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001688:	f7ff fcae 	bl	8000fe8 <HAL_GetTick>
 800168c:	0002      	movs	r2, r0
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e227      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169a:	4b59      	ldr	r3, [pc, #356]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2202      	movs	r2, #2
 80016a0:	4013      	ands	r3, r2
 80016a2:	d0f1      	beq.n	8001688 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a4:	4b56      	ldr	r3, [pc, #344]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	22f8      	movs	r2, #248	; 0xf8
 80016aa:	4393      	bics	r3, r2
 80016ac:	0019      	movs	r1, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00da      	lsls	r2, r3, #3
 80016b4:	4b52      	ldr	r3, [pc, #328]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	430a      	orrs	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e018      	b.n	80016ee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016bc:	4b50      	ldr	r3, [pc, #320]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b4f      	ldr	r3, [pc, #316]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016c2:	2101      	movs	r1, #1
 80016c4:	438a      	bics	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fc8e 	bl	8000fe8 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d2:	f7ff fc89 	bl	8000fe8 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e202      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e4:	4b46      	ldr	r3, [pc, #280]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2202      	movs	r2, #2
 80016ea:	4013      	ands	r3, r2
 80016ec:	d1f1      	bne.n	80016d2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2208      	movs	r2, #8
 80016f4:	4013      	ands	r3, r2
 80016f6:	d036      	beq.n	8001766 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69db      	ldr	r3, [r3, #28]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d019      	beq.n	8001734 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001704:	4b3e      	ldr	r3, [pc, #248]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001706:	2101      	movs	r1, #1
 8001708:	430a      	orrs	r2, r1
 800170a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800170c:	f7ff fc6c 	bl	8000fe8 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff fc67 	bl	8000fe8 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1e0      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001728:	4b35      	ldr	r3, [pc, #212]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800172a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172c:	2202      	movs	r2, #2
 800172e:	4013      	ands	r3, r2
 8001730:	d0f1      	beq.n	8001716 <HAL_RCC_OscConfig+0x242>
 8001732:	e018      	b.n	8001766 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001734:	4b32      	ldr	r3, [pc, #200]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001736:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001738:	4b31      	ldr	r3, [pc, #196]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800173a:	2101      	movs	r1, #1
 800173c:	438a      	bics	r2, r1
 800173e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001740:	f7ff fc52 	bl	8000fe8 <HAL_GetTick>
 8001744:	0003      	movs	r3, r0
 8001746:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800174a:	f7ff fc4d 	bl	8000fe8 <HAL_GetTick>
 800174e:	0002      	movs	r2, r0
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e1c6      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175c:	4b28      	ldr	r3, [pc, #160]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d1f1      	bne.n	800174a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2204      	movs	r2, #4
 800176c:	4013      	ands	r3, r2
 800176e:	d100      	bne.n	8001772 <HAL_RCC_OscConfig+0x29e>
 8001770:	e0b4      	b.n	80018dc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001772:	201f      	movs	r0, #31
 8001774:	183b      	adds	r3, r7, r0
 8001776:	2200      	movs	r2, #0
 8001778:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800177c:	69da      	ldr	r2, [r3, #28]
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	055b      	lsls	r3, r3, #21
 8001782:	4013      	ands	r3, r2
 8001784:	d110      	bne.n	80017a8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001786:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0549      	lsls	r1, r1, #21
 8001790:	430a      	orrs	r2, r1
 8001792:	61da      	str	r2, [r3, #28]
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	055b      	lsls	r3, r3, #21
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017a2:	183b      	adds	r3, r7, r0
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_RCC_OscConfig+0x338>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	d11a      	bne.n	80017ea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_RCC_OscConfig+0x338>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4b14      	ldr	r3, [pc, #80]	; (800180c <HAL_RCC_OscConfig+0x338>)
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0049      	lsls	r1, r1, #1
 80017be:	430a      	orrs	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017c2:	f7ff fc11 	bl	8000fe8 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017cc:	f7ff fc0c 	bl	8000fe8 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b64      	cmp	r3, #100	; 0x64
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e185      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_RCC_OscConfig+0x338>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10e      	bne.n	8001810 <HAL_RCC_OscConfig+0x33c>
 80017f2:	4b03      	ldr	r3, [pc, #12]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	4b02      	ldr	r3, [pc, #8]	; (8001800 <HAL_RCC_OscConfig+0x32c>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	621a      	str	r2, [r3, #32]
 80017fe:	e035      	b.n	800186c <HAL_RCC_OscConfig+0x398>
 8001800:	40021000 	.word	0x40021000
 8001804:	fffeffff 	.word	0xfffeffff
 8001808:	fffbffff 	.word	0xfffbffff
 800180c:	40007000 	.word	0x40007000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d10c      	bne.n	8001832 <HAL_RCC_OscConfig+0x35e>
 8001818:	4bb6      	ldr	r3, [pc, #728]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800181a:	6a1a      	ldr	r2, [r3, #32]
 800181c:	4bb5      	ldr	r3, [pc, #724]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800181e:	2101      	movs	r1, #1
 8001820:	438a      	bics	r2, r1
 8001822:	621a      	str	r2, [r3, #32]
 8001824:	4bb3      	ldr	r3, [pc, #716]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001826:	6a1a      	ldr	r2, [r3, #32]
 8001828:	4bb2      	ldr	r3, [pc, #712]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800182a:	2104      	movs	r1, #4
 800182c:	438a      	bics	r2, r1
 800182e:	621a      	str	r2, [r3, #32]
 8001830:	e01c      	b.n	800186c <HAL_RCC_OscConfig+0x398>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b05      	cmp	r3, #5
 8001838:	d10c      	bne.n	8001854 <HAL_RCC_OscConfig+0x380>
 800183a:	4bae      	ldr	r3, [pc, #696]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800183c:	6a1a      	ldr	r2, [r3, #32]
 800183e:	4bad      	ldr	r3, [pc, #692]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001840:	2104      	movs	r1, #4
 8001842:	430a      	orrs	r2, r1
 8001844:	621a      	str	r2, [r3, #32]
 8001846:	4bab      	ldr	r3, [pc, #684]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001848:	6a1a      	ldr	r2, [r3, #32]
 800184a:	4baa      	ldr	r3, [pc, #680]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800184c:	2101      	movs	r1, #1
 800184e:	430a      	orrs	r2, r1
 8001850:	621a      	str	r2, [r3, #32]
 8001852:	e00b      	b.n	800186c <HAL_RCC_OscConfig+0x398>
 8001854:	4ba7      	ldr	r3, [pc, #668]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001856:	6a1a      	ldr	r2, [r3, #32]
 8001858:	4ba6      	ldr	r3, [pc, #664]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800185a:	2101      	movs	r1, #1
 800185c:	438a      	bics	r2, r1
 800185e:	621a      	str	r2, [r3, #32]
 8001860:	4ba4      	ldr	r3, [pc, #656]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	4ba3      	ldr	r3, [pc, #652]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001866:	2104      	movs	r1, #4
 8001868:	438a      	bics	r2, r1
 800186a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d014      	beq.n	800189e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fbb8 	bl	8000fe8 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800187c:	e009      	b.n	8001892 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7ff fbb3 	bl	8000fe8 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a9b      	ldr	r2, [pc, #620]	; (8001af8 <HAL_RCC_OscConfig+0x624>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e12b      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001892:	4b98      	ldr	r3, [pc, #608]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001894:	6a1b      	ldr	r3, [r3, #32]
 8001896:	2202      	movs	r2, #2
 8001898:	4013      	ands	r3, r2
 800189a:	d0f0      	beq.n	800187e <HAL_RCC_OscConfig+0x3aa>
 800189c:	e013      	b.n	80018c6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff fba3 	bl	8000fe8 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a6:	e009      	b.n	80018bc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018a8:	f7ff fb9e 	bl	8000fe8 <HAL_GetTick>
 80018ac:	0002      	movs	r2, r0
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	4a91      	ldr	r2, [pc, #580]	; (8001af8 <HAL_RCC_OscConfig+0x624>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e116      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	4b8d      	ldr	r3, [pc, #564]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	2202      	movs	r2, #2
 80018c2:	4013      	ands	r3, r2
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018c6:	231f      	movs	r3, #31
 80018c8:	18fb      	adds	r3, r7, r3
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d105      	bne.n	80018dc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d0:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80018d2:	69da      	ldr	r2, [r3, #28]
 80018d4:	4b87      	ldr	r3, [pc, #540]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80018d6:	4989      	ldr	r1, [pc, #548]	; (8001afc <HAL_RCC_OscConfig+0x628>)
 80018d8:	400a      	ands	r2, r1
 80018da:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2210      	movs	r2, #16
 80018e2:	4013      	ands	r3, r2
 80018e4:	d063      	beq.n	80019ae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d12a      	bne.n	8001944 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018ee:	4b81      	ldr	r3, [pc, #516]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80018f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f2:	4b80      	ldr	r3, [pc, #512]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80018f4:	2104      	movs	r1, #4
 80018f6:	430a      	orrs	r2, r1
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018fa:	4b7e      	ldr	r3, [pc, #504]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80018fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018fe:	4b7d      	ldr	r3, [pc, #500]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001900:	2101      	movs	r1, #1
 8001902:	430a      	orrs	r2, r1
 8001904:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001906:	f7ff fb6f 	bl	8000fe8 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001910:	f7ff fb6a 	bl	8000fe8 <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e0e3      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001922:	4b74      	ldr	r3, [pc, #464]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001926:	2202      	movs	r2, #2
 8001928:	4013      	ands	r3, r2
 800192a:	d0f1      	beq.n	8001910 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800192c:	4b71      	ldr	r3, [pc, #452]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800192e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001930:	22f8      	movs	r2, #248	; 0xf8
 8001932:	4393      	bics	r3, r2
 8001934:	0019      	movs	r1, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	00da      	lsls	r2, r3, #3
 800193c:	4b6d      	ldr	r3, [pc, #436]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800193e:	430a      	orrs	r2, r1
 8001940:	635a      	str	r2, [r3, #52]	; 0x34
 8001942:	e034      	b.n	80019ae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	3305      	adds	r3, #5
 800194a:	d111      	bne.n	8001970 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800194c:	4b69      	ldr	r3, [pc, #420]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800194e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001950:	4b68      	ldr	r3, [pc, #416]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001952:	2104      	movs	r1, #4
 8001954:	438a      	bics	r2, r1
 8001956:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001958:	4b66      	ldr	r3, [pc, #408]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800195a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195c:	22f8      	movs	r2, #248	; 0xf8
 800195e:	4393      	bics	r3, r2
 8001960:	0019      	movs	r1, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	699b      	ldr	r3, [r3, #24]
 8001966:	00da      	lsls	r2, r3, #3
 8001968:	4b62      	ldr	r3, [pc, #392]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800196a:	430a      	orrs	r2, r1
 800196c:	635a      	str	r2, [r3, #52]	; 0x34
 800196e:	e01e      	b.n	80019ae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001970:	4b60      	ldr	r3, [pc, #384]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001972:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001974:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001976:	2104      	movs	r1, #4
 8001978:	430a      	orrs	r2, r1
 800197a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800197c:	4b5d      	ldr	r3, [pc, #372]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 800197e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001980:	4b5c      	ldr	r3, [pc, #368]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001982:	2101      	movs	r1, #1
 8001984:	438a      	bics	r2, r1
 8001986:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001988:	f7ff fb2e 	bl	8000fe8 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001992:	f7ff fb29 	bl	8000fe8 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e0a2      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80019a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a8:	2202      	movs	r2, #2
 80019aa:	4013      	ands	r3, r2
 80019ac:	d1f1      	bne.n	8001992 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d100      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4e4>
 80019b6:	e097      	b.n	8001ae8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019b8:	4b4e      	ldr	r3, [pc, #312]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	220c      	movs	r2, #12
 80019be:	4013      	ands	r3, r2
 80019c0:	2b08      	cmp	r3, #8
 80019c2:	d100      	bne.n	80019c6 <HAL_RCC_OscConfig+0x4f2>
 80019c4:	e06b      	b.n	8001a9e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a1b      	ldr	r3, [r3, #32]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d14c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	4b48      	ldr	r3, [pc, #288]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80019d4:	494a      	ldr	r1, [pc, #296]	; (8001b00 <HAL_RCC_OscConfig+0x62c>)
 80019d6:	400a      	ands	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fb05 	bl	8000fe8 <HAL_GetTick>
 80019de:	0003      	movs	r3, r0
 80019e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019e4:	f7ff fb00 	bl	8000fe8 <HAL_GetTick>
 80019e8:	0002      	movs	r2, r0
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e079      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f6:	4b3f      	ldr	r3, [pc, #252]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	; 0x80
 80019fc:	049b      	lsls	r3, r3, #18
 80019fe:	4013      	ands	r3, r2
 8001a00:	d1f0      	bne.n	80019e4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a02:	4b3c      	ldr	r3, [pc, #240]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a06:	220f      	movs	r2, #15
 8001a08:	4393      	bics	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a12:	430a      	orrs	r2, r1
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a16:	4b37      	ldr	r3, [pc, #220]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4a3a      	ldr	r2, [pc, #232]	; (8001b04 <HAL_RCC_OscConfig+0x630>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a36:	2180      	movs	r1, #128	; 0x80
 8001a38:	0449      	lsls	r1, r1, #17
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fad3 	bl	8000fe8 <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff face 	bl	8000fe8 <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e047      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a5a:	4b26      	ldr	r3, [pc, #152]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	049b      	lsls	r3, r3, #18
 8001a62:	4013      	ands	r3, r2
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x574>
 8001a66:	e03f      	b.n	8001ae8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a68:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a6e:	4924      	ldr	r1, [pc, #144]	; (8001b00 <HAL_RCC_OscConfig+0x62c>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fab8 	bl	8000fe8 <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7ff fab3 	bl	8000fe8 <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e02c      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	049b      	lsls	r3, r3, #18
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x5aa>
 8001a9c:	e024      	b.n	8001ae8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e01f      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_RCC_OscConfig+0x620>)
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab6:	697a      	ldr	r2, [r7, #20]
 8001ab8:	2380      	movs	r3, #128	; 0x80
 8001aba:	025b      	lsls	r3, r3, #9
 8001abc:	401a      	ands	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	220f      	movs	r2, #15
 8001aca:	401a      	ands	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d107      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ad4:	697a      	ldr	r2, [r7, #20]
 8001ad6:	23f0      	movs	r3, #240	; 0xf0
 8001ad8:	039b      	lsls	r3, r3, #14
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d001      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b008      	add	sp, #32
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	40021000 	.word	0x40021000
 8001af8:	00001388 	.word	0x00001388
 8001afc:	efffffff 	.word	0xefffffff
 8001b00:	feffffff 	.word	0xfeffffff
 8001b04:	ffc2ffff 	.word	0xffc2ffff

08001b08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b3      	b.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b5b      	ldr	r3, [pc, #364]	; (8001c8c <HAL_RCC_ClockConfig+0x184>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2201      	movs	r2, #1
 8001b22:	4013      	ands	r3, r2
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d911      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <HAL_RCC_ClockConfig+0x184>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4393      	bics	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <HAL_RCC_ClockConfig+0x184>)
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3c:	4b53      	ldr	r3, [pc, #332]	; (8001c8c <HAL_RCC_ClockConfig+0x184>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4013      	ands	r3, r2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e09a      	b.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2202      	movs	r2, #2
 8001b54:	4013      	ands	r3, r2
 8001b56:	d015      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2204      	movs	r2, #4
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d006      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b62:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001b68:	21e0      	movs	r1, #224	; 0xe0
 8001b6a:	00c9      	lsls	r1, r1, #3
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b70:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	22f0      	movs	r2, #240	; 0xf0
 8001b76:	4393      	bics	r3, r2
 8001b78:	0019      	movs	r1, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689a      	ldr	r2, [r3, #8]
 8001b7e:	4b44      	ldr	r3, [pc, #272]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d040      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	029b      	lsls	r3, r3, #10
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d114      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06e      	b.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bae:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	049b      	lsls	r3, r3, #18
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e062      	b.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bbe:	4b34      	ldr	r3, [pc, #208]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2202      	movs	r2, #2
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e05b      	b.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bcc:	4b30      	ldr	r3, [pc, #192]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	4393      	bics	r3, r2
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685a      	ldr	r2, [r3, #4]
 8001bda:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001be0:	f7ff fa02 	bl	8000fe8 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be8:	e009      	b.n	8001bfe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bea:	f7ff f9fd 	bl	8000fe8 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_RCC_ClockConfig+0x18c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e042      	b.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfe:	4b24      	ldr	r3, [pc, #144]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	220c      	movs	r2, #12
 8001c04:	401a      	ands	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d1ec      	bne.n	8001bea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c10:	4b1e      	ldr	r3, [pc, #120]	; (8001c8c <HAL_RCC_ClockConfig+0x184>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4013      	ands	r3, r2
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d211      	bcs.n	8001c42 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <HAL_RCC_ClockConfig+0x184>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	4393      	bics	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <HAL_RCC_ClockConfig+0x184>)
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c30:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <HAL_RCC_ClockConfig+0x184>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e020      	b.n	8001c84 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2204      	movs	r2, #4
 8001c48:	4013      	ands	r3, r2
 8001c4a:	d009      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4c:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4a11      	ldr	r2, [pc, #68]	; (8001c98 <HAL_RCC_ClockConfig+0x190>)
 8001c52:	4013      	ands	r3, r2
 8001c54:	0019      	movs	r1, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c60:	f000 f820 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8001c64:	0001      	movs	r1, r0
 8001c66:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <HAL_RCC_ClockConfig+0x188>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	091b      	lsrs	r3, r3, #4
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	4013      	ands	r3, r2
 8001c70:	4a0a      	ldr	r2, [pc, #40]	; (8001c9c <HAL_RCC_ClockConfig+0x194>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	000a      	movs	r2, r1
 8001c76:	40da      	lsrs	r2, r3
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <HAL_RCC_ClockConfig+0x198>)
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f7ff f96d 	bl	8000f5c <HAL_InitTick>
  
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	0018      	movs	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	b004      	add	sp, #16
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40022000 	.word	0x40022000
 8001c90:	40021000 	.word	0x40021000
 8001c94:	00001388 	.word	0x00001388
 8001c98:	fffff8ff 	.word	0xfffff8ff
 8001c9c:	08004158 	.word	0x08004158
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca4:	b590      	push	{r4, r7, lr}
 8001ca6:	b08f      	sub	sp, #60	; 0x3c
 8001ca8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001caa:	2314      	movs	r3, #20
 8001cac:	18fb      	adds	r3, r7, r3
 8001cae:	4a2b      	ldr	r2, [pc, #172]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001cb0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cb2:	c313      	stmia	r3!, {r0, r1, r4}
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	4a29      	ldr	r2, [pc, #164]	; (8001d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cbc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cbe:	c313      	stmia	r3!, {r0, r1, r4}
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cc8:	2300      	movs	r3, #0
 8001cca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ccc:	2300      	movs	r3, #0
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001cd8:	4b22      	ldr	r3, [pc, #136]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d002      	beq.n	8001cee <HAL_RCC_GetSysClockFreq+0x4a>
 8001ce8:	2b08      	cmp	r3, #8
 8001cea:	d003      	beq.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x50>
 8001cec:	e02d      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001cf0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001cf2:	e02d      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf6:	0c9b      	lsrs	r3, r3, #18
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	2214      	movs	r2, #20
 8001cfe:	18ba      	adds	r2, r7, r2
 8001d00:	5cd3      	ldrb	r3, [r2, r3]
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	220f      	movs	r2, #15
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	1d3a      	adds	r2, r7, #4
 8001d0e:	5cd3      	ldrb	r3, [r2, r3]
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	025b      	lsls	r3, r3, #9
 8001d18:	4013      	ands	r3, r2
 8001d1a:	d009      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d1e:	4812      	ldr	r0, [pc, #72]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d20:	f7fe f9fa 	bl	8000118 <__udivsi3>
 8001d24:	0003      	movs	r3, r0
 8001d26:	001a      	movs	r2, r3
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	4353      	muls	r3, r2
 8001d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d2e:	e009      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d30:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d32:	000a      	movs	r2, r1
 8001d34:	0152      	lsls	r2, r2, #5
 8001d36:	1a52      	subs	r2, r2, r1
 8001d38:	0193      	lsls	r3, r2, #6
 8001d3a:	1a9b      	subs	r3, r3, r2
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	185b      	adds	r3, r3, r1
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d48:	e002      	b.n	8001d50 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d4e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b00f      	add	sp, #60	; 0x3c
 8001d58:	bd90      	pop	{r4, r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	08004138 	.word	0x08004138
 8001d60:	08004148 	.word	0x08004148
 8001d64:	40021000 	.word	0x40021000
 8001d68:	007a1200 	.word	0x007a1200

08001d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b02      	ldr	r3, [pc, #8]	; (8001d7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	0018      	movs	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	46c0      	nop			; (mov r8, r8)
 8001d7c:	20000000 	.word	0x20000000

08001d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d84:	f7ff fff2 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d88:	0001      	movs	r1, r0
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	2207      	movs	r2, #7
 8001d92:	4013      	ands	r3, r2
 8001d94:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d96:	5cd3      	ldrb	r3, [r2, r3]
 8001d98:	40d9      	lsrs	r1, r3
 8001d9a:	000b      	movs	r3, r1
}    
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	40021000 	.word	0x40021000
 8001da8:	08004168 	.word	0x08004168

08001dac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	025b      	lsls	r3, r3, #9
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d100      	bne.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001dc8:	e08e      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001dca:	2017      	movs	r0, #23
 8001dcc:	183b      	adds	r3, r7, r0
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dd2:	4b57      	ldr	r3, [pc, #348]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd4:	69da      	ldr	r2, [r3, #28]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	055b      	lsls	r3, r3, #21
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d110      	bne.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dde:	4b54      	ldr	r3, [pc, #336]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001de0:	69da      	ldr	r2, [r3, #28]
 8001de2:	4b53      	ldr	r3, [pc, #332]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001de4:	2180      	movs	r1, #128	; 0x80
 8001de6:	0549      	lsls	r1, r1, #21
 8001de8:	430a      	orrs	r2, r1
 8001dea:	61da      	str	r2, [r3, #28]
 8001dec:	4b50      	ldr	r3, [pc, #320]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dee:	69da      	ldr	r2, [r3, #28]
 8001df0:	2380      	movs	r3, #128	; 0x80
 8001df2:	055b      	lsls	r3, r3, #21
 8001df4:	4013      	ands	r3, r2
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dfa:	183b      	adds	r3, r7, r0
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e00:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d11a      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e0c:	4b49      	ldr	r3, [pc, #292]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	0049      	lsls	r1, r1, #1
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f8e5 	bl	8000fe8 <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e22:	e008      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e24:	f7ff f8e0 	bl	8000fe8 <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e077      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e36:	4b3f      	ldr	r3, [pc, #252]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e44:	6a1a      	ldr	r2, [r3, #32]
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d034      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	23c0      	movs	r3, #192	; 0xc0
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d02c      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e66:	6a1b      	ldr	r3, [r3, #32]
 8001e68:	4a33      	ldr	r2, [pc, #204]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e70:	6a1a      	ldr	r2, [r3, #32]
 8001e72:	4b2f      	ldr	r3, [pc, #188]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	0249      	lsls	r1, r1, #9
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e7c:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7e:	6a1a      	ldr	r2, [r3, #32]
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e82:	492e      	ldr	r1, [pc, #184]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e84:	400a      	ands	r2, r1
 8001e86:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e88:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	d013      	beq.n	8001ebe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e96:	f7ff f8a7 	bl	8000fe8 <HAL_GetTick>
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	e009      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea0:	f7ff f8a2 	bl	8000fe8 <HAL_GetTick>
 8001ea4:	0002      	movs	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e038      	b.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ec0:	6a1b      	ldr	r3, [r3, #32]
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	0019      	movs	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685a      	ldr	r2, [r3, #4]
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ed2:	2317      	movs	r3, #23
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d105      	bne.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001edc:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ede:	69da      	ldr	r2, [r3, #28]
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee2:	4918      	ldr	r1, [pc, #96]	; (8001f44 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2201      	movs	r2, #1
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d009      	beq.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	2203      	movs	r2, #3
 8001ef8:	4393      	bics	r3, r2
 8001efa:	0019      	movs	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d009      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f10:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	2210      	movs	r2, #16
 8001f16:	4393      	bics	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f20:	430a      	orrs	r2, r1
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b006      	add	sp, #24
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	40021000 	.word	0x40021000
 8001f34:	40007000 	.word	0x40007000
 8001f38:	fffffcff 	.word	0xfffffcff
 8001f3c:	fffeffff 	.word	0xfffeffff
 8001f40:	00001388 	.word	0x00001388
 8001f44:	efffffff 	.word	0xefffffff

08001f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e042      	b.n	8001fe0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	223d      	movs	r2, #61	; 0x3d
 8001f5e:	5c9b      	ldrb	r3, [r3, r2]
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d107      	bne.n	8001f76 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223c      	movs	r2, #60	; 0x3c
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7fe fe6b 	bl	8000c4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	223d      	movs	r2, #61	; 0x3d
 8001f7a:	2102      	movs	r1, #2
 8001f7c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	3304      	adds	r3, #4
 8001f86:	0019      	movs	r1, r3
 8001f88:	0010      	movs	r0, r2
 8001f8a:	f000 ff89 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2246      	movs	r2, #70	; 0x46
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	223e      	movs	r2, #62	; 0x3e
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	223f      	movs	r2, #63	; 0x3f
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2240      	movs	r2, #64	; 0x40
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2241      	movs	r2, #65	; 0x41
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2242      	movs	r2, #66	; 0x42
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2243      	movs	r2, #67	; 0x43
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2244      	movs	r2, #68	; 0x44
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2245      	movs	r2, #69	; 0x45
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	223d      	movs	r2, #61	; 0x3d
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b002      	add	sp, #8
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	223d      	movs	r2, #61	; 0x3d
 8001ff4:	5c9b      	ldrb	r3, [r3, r2]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d001      	beq.n	8002000 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e030      	b.n	8002062 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	223d      	movs	r2, #61	; 0x3d
 8002004:	2102      	movs	r1, #2
 8002006:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	430a      	orrs	r2, r1
 8002016:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a13      	ldr	r2, [pc, #76]	; (800206c <HAL_TIM_Base_Start_IT+0x84>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d004      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x44>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a12      	ldr	r2, [pc, #72]	; (8002070 <HAL_TIM_Base_Start_IT+0x88>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d111      	bne.n	8002050 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2207      	movs	r2, #7
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b06      	cmp	r3, #6
 800203c:	d010      	beq.n	8002060 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2101      	movs	r1, #1
 800204a:	430a      	orrs	r2, r1
 800204c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204e:	e007      	b.n	8002060 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2101      	movs	r1, #1
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	40012c00 	.word	0x40012c00
 8002070:	40000400 	.word	0x40000400

08002074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e042      	b.n	800210c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	223d      	movs	r2, #61	; 0x3d
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d107      	bne.n	80020a2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	223c      	movs	r2, #60	; 0x3c
 8002096:	2100      	movs	r1, #0
 8002098:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	0018      	movs	r0, r3
 800209e:	f000 f839 	bl	8002114 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	223d      	movs	r2, #61	; 0x3d
 80020a6:	2102      	movs	r1, #2
 80020a8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3304      	adds	r3, #4
 80020b2:	0019      	movs	r1, r3
 80020b4:	0010      	movs	r0, r2
 80020b6:	f000 fef3 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2246      	movs	r2, #70	; 0x46
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223e      	movs	r2, #62	; 0x3e
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	223f      	movs	r2, #63	; 0x3f
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2240      	movs	r2, #64	; 0x40
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2241      	movs	r2, #65	; 0x41
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2242      	movs	r2, #66	; 0x42
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2243      	movs	r2, #67	; 0x43
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2244      	movs	r2, #68	; 0x44
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2245      	movs	r2, #69	; 0x45
 80020fe:	2101      	movs	r1, #1
 8002100:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	223d      	movs	r2, #61	; 0x3d
 8002106:	2101      	movs	r1, #1
 8002108:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800210a:	2300      	movs	r3, #0
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800211c:	46c0      	nop			; (mov r8, r8)
 800211e:	46bd      	mov	sp, r7
 8002120:	b002      	add	sp, #8
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d108      	bne.n	8002146 <HAL_TIM_PWM_Start+0x22>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	223e      	movs	r2, #62	; 0x3e
 8002138:	5c9b      	ldrb	r3, [r3, r2]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	3b01      	subs	r3, #1
 800213e:	1e5a      	subs	r2, r3, #1
 8002140:	4193      	sbcs	r3, r2
 8002142:	b2db      	uxtb	r3, r3
 8002144:	e01f      	b.n	8002186 <HAL_TIM_PWM_Start+0x62>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d108      	bne.n	800215e <HAL_TIM_PWM_Start+0x3a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	223f      	movs	r2, #63	; 0x3f
 8002150:	5c9b      	ldrb	r3, [r3, r2]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	3b01      	subs	r3, #1
 8002156:	1e5a      	subs	r2, r3, #1
 8002158:	4193      	sbcs	r3, r2
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e013      	b.n	8002186 <HAL_TIM_PWM_Start+0x62>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b08      	cmp	r3, #8
 8002162:	d108      	bne.n	8002176 <HAL_TIM_PWM_Start+0x52>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2240      	movs	r2, #64	; 0x40
 8002168:	5c9b      	ldrb	r3, [r3, r2]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	1e5a      	subs	r2, r3, #1
 8002170:	4193      	sbcs	r3, r2
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e007      	b.n	8002186 <HAL_TIM_PWM_Start+0x62>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2241      	movs	r2, #65	; 0x41
 800217a:	5c9b      	ldrb	r3, [r3, r2]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	4193      	sbcs	r3, r2
 8002184:	b2db      	uxtb	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e064      	b.n	8002258 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d104      	bne.n	800219e <HAL_TIM_PWM_Start+0x7a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	223e      	movs	r2, #62	; 0x3e
 8002198:	2102      	movs	r1, #2
 800219a:	5499      	strb	r1, [r3, r2]
 800219c:	e013      	b.n	80021c6 <HAL_TIM_PWM_Start+0xa2>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d104      	bne.n	80021ae <HAL_TIM_PWM_Start+0x8a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	223f      	movs	r2, #63	; 0x3f
 80021a8:	2102      	movs	r1, #2
 80021aa:	5499      	strb	r1, [r3, r2]
 80021ac:	e00b      	b.n	80021c6 <HAL_TIM_PWM_Start+0xa2>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d104      	bne.n	80021be <HAL_TIM_PWM_Start+0x9a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2240      	movs	r2, #64	; 0x40
 80021b8:	2102      	movs	r1, #2
 80021ba:	5499      	strb	r1, [r3, r2]
 80021bc:	e003      	b.n	80021c6 <HAL_TIM_PWM_Start+0xa2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2241      	movs	r2, #65	; 0x41
 80021c2:	2102      	movs	r1, #2
 80021c4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6839      	ldr	r1, [r7, #0]
 80021cc:	2201      	movs	r2, #1
 80021ce:	0018      	movs	r0, r3
 80021d0:	f001 fa66 	bl	80036a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a21      	ldr	r2, [pc, #132]	; (8002260 <HAL_TIM_PWM_Start+0x13c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_TIM_PWM_Start+0xce>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_TIM_PWM_Start+0x140>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_TIM_PWM_Start+0xce>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_TIM_PWM_Start+0x144>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d101      	bne.n	80021f6 <HAL_TIM_PWM_Start+0xd2>
 80021f2:	2301      	movs	r3, #1
 80021f4:	e000      	b.n	80021f8 <HAL_TIM_PWM_Start+0xd4>
 80021f6:	2300      	movs	r3, #0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2180      	movs	r1, #128	; 0x80
 8002208:	0209      	lsls	r1, r1, #8
 800220a:	430a      	orrs	r2, r1
 800220c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a13      	ldr	r2, [pc, #76]	; (8002260 <HAL_TIM_PWM_Start+0x13c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_TIM_PWM_Start+0xfe>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a13      	ldr	r2, [pc, #76]	; (800226c <HAL_TIM_PWM_Start+0x148>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2207      	movs	r2, #7
 800222a:	4013      	ands	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b06      	cmp	r3, #6
 8002232:	d010      	beq.n	8002256 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002244:	e007      	b.n	8002256 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2101      	movs	r1, #1
 8002252:	430a      	orrs	r2, r1
 8002254:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b004      	add	sp, #16
 800225e:	bd80      	pop	{r7, pc}
 8002260:	40012c00 	.word	0x40012c00
 8002264:	40014400 	.word	0x40014400
 8002268:	40014800 	.word	0x40014800
 800226c:	40000400 	.word	0x40000400

08002270 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6839      	ldr	r1, [r7, #0]
 8002280:	2200      	movs	r2, #0
 8002282:	0018      	movs	r0, r3
 8002284:	f001 fa0c 	bl	80036a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a2d      	ldr	r2, [pc, #180]	; (8002344 <HAL_TIM_PWM_Stop+0xd4>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_TIM_PWM_Stop+0x36>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a2c      	ldr	r2, [pc, #176]	; (8002348 <HAL_TIM_PWM_Stop+0xd8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d004      	beq.n	80022a6 <HAL_TIM_PWM_Stop+0x36>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a2a      	ldr	r2, [pc, #168]	; (800234c <HAL_TIM_PWM_Stop+0xdc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_TIM_PWM_Stop+0x3a>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <HAL_TIM_PWM_Stop+0x3c>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d013      	beq.n	80022d8 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_TIM_PWM_Stop+0xe0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	d10d      	bne.n	80022d8 <HAL_TIM_PWM_Stop+0x68>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a24      	ldr	r2, [pc, #144]	; (8002354 <HAL_TIM_PWM_Stop+0xe4>)
 80022c4:	4013      	ands	r3, r2
 80022c6:	d107      	bne.n	80022d8 <HAL_TIM_PWM_Stop+0x68>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4921      	ldr	r1, [pc, #132]	; (8002358 <HAL_TIM_PWM_Stop+0xe8>)
 80022d4:	400a      	ands	r2, r1
 80022d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_TIM_PWM_Stop+0xe0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	d10d      	bne.n	8002300 <HAL_TIM_PWM_Stop+0x90>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_TIM_PWM_Stop+0xe4>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	d107      	bne.n	8002300 <HAL_TIM_PWM_Stop+0x90>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2101      	movs	r1, #1
 80022fc:	438a      	bics	r2, r1
 80022fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d104      	bne.n	8002310 <HAL_TIM_PWM_Stop+0xa0>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223e      	movs	r2, #62	; 0x3e
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	e013      	b.n	8002338 <HAL_TIM_PWM_Stop+0xc8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b04      	cmp	r3, #4
 8002314:	d104      	bne.n	8002320 <HAL_TIM_PWM_Stop+0xb0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	223f      	movs	r2, #63	; 0x3f
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]
 800231e:	e00b      	b.n	8002338 <HAL_TIM_PWM_Stop+0xc8>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b08      	cmp	r3, #8
 8002324:	d104      	bne.n	8002330 <HAL_TIM_PWM_Stop+0xc0>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2240      	movs	r2, #64	; 0x40
 800232a:	2101      	movs	r1, #1
 800232c:	5499      	strb	r1, [r3, r2]
 800232e:	e003      	b.n	8002338 <HAL_TIM_PWM_Stop+0xc8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2241      	movs	r2, #65	; 0x41
 8002334:	2101      	movs	r1, #1
 8002336:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	0018      	movs	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	b002      	add	sp, #8
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40014400 	.word	0x40014400
 800234c:	40014800 	.word	0x40014800
 8002350:	00001111 	.word	0x00001111
 8002354:	00000444 	.word	0x00000444
 8002358:	ffff7fff 	.word	0xffff7fff

0800235c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e042      	b.n	80023f4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	223d      	movs	r2, #61	; 0x3d
 8002372:	5c9b      	ldrb	r3, [r3, r2]
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	d107      	bne.n	800238a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223c      	movs	r2, #60	; 0x3c
 800237e:	2100      	movs	r1, #0
 8002380:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 f839 	bl	80023fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	223d      	movs	r2, #61	; 0x3d
 800238e:	2102      	movs	r1, #2
 8002390:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	0019      	movs	r1, r3
 800239c:	0010      	movs	r0, r2
 800239e:	f000 fd7f 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2246      	movs	r2, #70	; 0x46
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	223e      	movs	r2, #62	; 0x3e
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	223f      	movs	r2, #63	; 0x3f
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2241      	movs	r2, #65	; 0x41
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2242      	movs	r2, #66	; 0x42
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2243      	movs	r2, #67	; 0x43
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2244      	movs	r2, #68	; 0x44
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2245      	movs	r2, #69	; 0x45
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	223d      	movs	r2, #61	; 0x3d
 80023ee:	2101      	movs	r1, #1
 80023f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	0018      	movs	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002404:	46c0      	nop			; (mov r8, r8)
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002416:	230f      	movs	r3, #15
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d104      	bne.n	800242e <HAL_TIM_IC_Start_IT+0x22>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	223e      	movs	r2, #62	; 0x3e
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	e013      	b.n	8002456 <HAL_TIM_IC_Start_IT+0x4a>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b04      	cmp	r3, #4
 8002432:	d104      	bne.n	800243e <HAL_TIM_IC_Start_IT+0x32>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	223f      	movs	r2, #63	; 0x3f
 8002438:	5c9b      	ldrb	r3, [r3, r2]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e00b      	b.n	8002456 <HAL_TIM_IC_Start_IT+0x4a>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b08      	cmp	r3, #8
 8002442:	d104      	bne.n	800244e <HAL_TIM_IC_Start_IT+0x42>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2240      	movs	r2, #64	; 0x40
 8002448:	5c9b      	ldrb	r3, [r3, r2]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	e003      	b.n	8002456 <HAL_TIM_IC_Start_IT+0x4a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2241      	movs	r2, #65	; 0x41
 8002452:	5c9b      	ldrb	r3, [r3, r2]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	220e      	movs	r2, #14
 8002458:	18ba      	adds	r2, r7, r2
 800245a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d104      	bne.n	800246c <HAL_TIM_IC_Start_IT+0x60>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2242      	movs	r2, #66	; 0x42
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e013      	b.n	8002494 <HAL_TIM_IC_Start_IT+0x88>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b04      	cmp	r3, #4
 8002470:	d104      	bne.n	800247c <HAL_TIM_IC_Start_IT+0x70>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2243      	movs	r2, #67	; 0x43
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	e00b      	b.n	8002494 <HAL_TIM_IC_Start_IT+0x88>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d104      	bne.n	800248c <HAL_TIM_IC_Start_IT+0x80>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2244      	movs	r2, #68	; 0x44
 8002486:	5c9b      	ldrb	r3, [r3, r2]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	e003      	b.n	8002494 <HAL_TIM_IC_Start_IT+0x88>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2245      	movs	r2, #69	; 0x45
 8002490:	5c9b      	ldrb	r3, [r3, r2]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	210d      	movs	r1, #13
 8002496:	187a      	adds	r2, r7, r1
 8002498:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800249a:	230e      	movs	r3, #14
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d103      	bne.n	80024ac <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d001      	beq.n	80024b0 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0a6      	b.n	80025fe <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <HAL_TIM_IC_Start_IT+0xb4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223e      	movs	r2, #62	; 0x3e
 80024ba:	2102      	movs	r1, #2
 80024bc:	5499      	strb	r1, [r3, r2]
 80024be:	e013      	b.n	80024e8 <HAL_TIM_IC_Start_IT+0xdc>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	d104      	bne.n	80024d0 <HAL_TIM_IC_Start_IT+0xc4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	223f      	movs	r2, #63	; 0x3f
 80024ca:	2102      	movs	r1, #2
 80024cc:	5499      	strb	r1, [r3, r2]
 80024ce:	e00b      	b.n	80024e8 <HAL_TIM_IC_Start_IT+0xdc>
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d104      	bne.n	80024e0 <HAL_TIM_IC_Start_IT+0xd4>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2240      	movs	r2, #64	; 0x40
 80024da:	2102      	movs	r1, #2
 80024dc:	5499      	strb	r1, [r3, r2]
 80024de:	e003      	b.n	80024e8 <HAL_TIM_IC_Start_IT+0xdc>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2241      	movs	r2, #65	; 0x41
 80024e4:	2102      	movs	r1, #2
 80024e6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d104      	bne.n	80024f8 <HAL_TIM_IC_Start_IT+0xec>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2242      	movs	r2, #66	; 0x42
 80024f2:	2102      	movs	r1, #2
 80024f4:	5499      	strb	r1, [r3, r2]
 80024f6:	e013      	b.n	8002520 <HAL_TIM_IC_Start_IT+0x114>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d104      	bne.n	8002508 <HAL_TIM_IC_Start_IT+0xfc>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2243      	movs	r2, #67	; 0x43
 8002502:	2102      	movs	r1, #2
 8002504:	5499      	strb	r1, [r3, r2]
 8002506:	e00b      	b.n	8002520 <HAL_TIM_IC_Start_IT+0x114>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b08      	cmp	r3, #8
 800250c:	d104      	bne.n	8002518 <HAL_TIM_IC_Start_IT+0x10c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2244      	movs	r2, #68	; 0x44
 8002512:	2102      	movs	r1, #2
 8002514:	5499      	strb	r1, [r3, r2]
 8002516:	e003      	b.n	8002520 <HAL_TIM_IC_Start_IT+0x114>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2245      	movs	r2, #69	; 0x45
 800251c:	2102      	movs	r1, #2
 800251e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d02a      	beq.n	800257c <HAL_TIM_IC_Start_IT+0x170>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d830      	bhi.n	800258e <HAL_TIM_IC_Start_IT+0x182>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b08      	cmp	r3, #8
 8002530:	d01b      	beq.n	800256a <HAL_TIM_IC_Start_IT+0x15e>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d82a      	bhi.n	800258e <HAL_TIM_IC_Start_IT+0x182>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d003      	beq.n	8002546 <HAL_TIM_IC_Start_IT+0x13a>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b04      	cmp	r3, #4
 8002542:	d009      	beq.n	8002558 <HAL_TIM_IC_Start_IT+0x14c>
 8002544:	e023      	b.n	800258e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68da      	ldr	r2, [r3, #12]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2102      	movs	r1, #2
 8002552:	430a      	orrs	r2, r1
 8002554:	60da      	str	r2, [r3, #12]
      break;
 8002556:	e01f      	b.n	8002598 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2104      	movs	r1, #4
 8002564:	430a      	orrs	r2, r1
 8002566:	60da      	str	r2, [r3, #12]
      break;
 8002568:	e016      	b.n	8002598 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68da      	ldr	r2, [r3, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2108      	movs	r1, #8
 8002576:	430a      	orrs	r2, r1
 8002578:	60da      	str	r2, [r3, #12]
      break;
 800257a:	e00d      	b.n	8002598 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2110      	movs	r1, #16
 8002588:	430a      	orrs	r2, r1
 800258a:	60da      	str	r2, [r3, #12]
      break;
 800258c:	e004      	b.n	8002598 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800258e:	230f      	movs	r3, #15
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
      break;
 8002596:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002598:	230f      	movs	r3, #15
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d12a      	bne.n	80025f8 <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	6839      	ldr	r1, [r7, #0]
 80025a8:	2201      	movs	r2, #1
 80025aa:	0018      	movs	r0, r3
 80025ac:	f001 f878 	bl	80036a0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <HAL_TIM_IC_Start_IT+0x1fc>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d004      	beq.n	80025c4 <HAL_TIM_IC_Start_IT+0x1b8>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a13      	ldr	r2, [pc, #76]	; (800260c <HAL_TIM_IC_Start_IT+0x200>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d111      	bne.n	80025e8 <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2207      	movs	r2, #7
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	2b06      	cmp	r3, #6
 80025d4:	d010      	beq.n	80025f8 <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2101      	movs	r1, #1
 80025e2:	430a      	orrs	r2, r1
 80025e4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e6:	e007      	b.n	80025f8 <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2101      	movs	r1, #1
 80025f4:	430a      	orrs	r2, r1
 80025f6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80025f8:	230f      	movs	r3, #15
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	781b      	ldrb	r3, [r3, #0]
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b004      	add	sp, #16
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	40012c00 	.word	0x40012c00
 800260c:	40000400 	.word	0x40000400

08002610 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800261a:	230f      	movs	r3, #15
 800261c:	18fb      	adds	r3, r7, r3
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d02a      	beq.n	800267e <HAL_TIM_IC_Stop_IT+0x6e>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b0c      	cmp	r3, #12
 800262c:	d830      	bhi.n	8002690 <HAL_TIM_IC_Stop_IT+0x80>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b08      	cmp	r3, #8
 8002632:	d01b      	beq.n	800266c <HAL_TIM_IC_Stop_IT+0x5c>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	2b08      	cmp	r3, #8
 8002638:	d82a      	bhi.n	8002690 <HAL_TIM_IC_Stop_IT+0x80>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_TIM_IC_Stop_IT+0x38>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d009      	beq.n	800265a <HAL_TIM_IC_Stop_IT+0x4a>
 8002646:	e023      	b.n	8002690 <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	2102      	movs	r1, #2
 8002654:	438a      	bics	r2, r1
 8002656:	60da      	str	r2, [r3, #12]
      break;
 8002658:	e01f      	b.n	800269a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2104      	movs	r1, #4
 8002666:	438a      	bics	r2, r1
 8002668:	60da      	str	r2, [r3, #12]
      break;
 800266a:	e016      	b.n	800269a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2108      	movs	r1, #8
 8002678:	438a      	bics	r2, r1
 800267a:	60da      	str	r2, [r3, #12]
      break;
 800267c:	e00d      	b.n	800269a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2110      	movs	r1, #16
 800268a:	438a      	bics	r2, r1
 800268c:	60da      	str	r2, [r3, #12]
      break;
 800268e:	e004      	b.n	800269a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002690:	230f      	movs	r3, #15
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
      break;
 8002698:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800269a:	230f      	movs	r3, #15
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d152      	bne.n	800274a <HAL_TIM_IC_Stop_IT+0x13a>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6839      	ldr	r1, [r7, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 fff7 	bl	80036a0 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	4a27      	ldr	r2, [pc, #156]	; (8002758 <HAL_TIM_IC_Stop_IT+0x148>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	d10d      	bne.n	80026da <HAL_TIM_IC_Stop_IT+0xca>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <HAL_TIM_IC_Stop_IT+0x14c>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	d107      	bne.n	80026da <HAL_TIM_IC_Stop_IT+0xca>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2101      	movs	r1, #1
 80026d6:	438a      	bics	r2, r1
 80026d8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <HAL_TIM_IC_Stop_IT+0xda>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	223e      	movs	r2, #62	; 0x3e
 80026e4:	2101      	movs	r1, #1
 80026e6:	5499      	strb	r1, [r3, r2]
 80026e8:	e013      	b.n	8002712 <HAL_TIM_IC_Stop_IT+0x102>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_IC_Stop_IT+0xea>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	223f      	movs	r2, #63	; 0x3f
 80026f4:	2101      	movs	r1, #1
 80026f6:	5499      	strb	r1, [r3, r2]
 80026f8:	e00b      	b.n	8002712 <HAL_TIM_IC_Stop_IT+0x102>
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d104      	bne.n	800270a <HAL_TIM_IC_Stop_IT+0xfa>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2240      	movs	r2, #64	; 0x40
 8002704:	2101      	movs	r1, #1
 8002706:	5499      	strb	r1, [r3, r2]
 8002708:	e003      	b.n	8002712 <HAL_TIM_IC_Stop_IT+0x102>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2241      	movs	r2, #65	; 0x41
 800270e:	2101      	movs	r1, #1
 8002710:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d104      	bne.n	8002722 <HAL_TIM_IC_Stop_IT+0x112>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2242      	movs	r2, #66	; 0x42
 800271c:	2101      	movs	r1, #1
 800271e:	5499      	strb	r1, [r3, r2]
 8002720:	e013      	b.n	800274a <HAL_TIM_IC_Stop_IT+0x13a>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d104      	bne.n	8002732 <HAL_TIM_IC_Stop_IT+0x122>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2243      	movs	r2, #67	; 0x43
 800272c:	2101      	movs	r1, #1
 800272e:	5499      	strb	r1, [r3, r2]
 8002730:	e00b      	b.n	800274a <HAL_TIM_IC_Stop_IT+0x13a>
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b08      	cmp	r3, #8
 8002736:	d104      	bne.n	8002742 <HAL_TIM_IC_Stop_IT+0x132>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2244      	movs	r2, #68	; 0x44
 800273c:	2101      	movs	r1, #1
 800273e:	5499      	strb	r1, [r3, r2]
 8002740:	e003      	b.n	800274a <HAL_TIM_IC_Stop_IT+0x13a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2245      	movs	r2, #69	; 0x45
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800274a:	230f      	movs	r3, #15
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}
 8002758:	00001111 	.word	0x00001111
 800275c:	00000444 	.word	0x00000444

08002760 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	2202      	movs	r2, #2
 8002770:	4013      	ands	r3, r2
 8002772:	2b02      	cmp	r3, #2
 8002774:	d124      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	2202      	movs	r2, #2
 800277e:	4013      	ands	r3, r2
 8002780:	2b02      	cmp	r3, #2
 8002782:	d11d      	bne.n	80027c0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2203      	movs	r2, #3
 800278a:	4252      	negs	r2, r2
 800278c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	2203      	movs	r2, #3
 800279c:	4013      	ands	r3, r2
 800279e:	d004      	beq.n	80027aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fd fd7a 	bl	800029c <HAL_TIM_IC_CaptureCallback>
 80027a8:	e007      	b.n	80027ba <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	0018      	movs	r0, r3
 80027ae:	f000 fb5f 	bl	8002e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	0018      	movs	r0, r3
 80027b6:	f000 fb63 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	2204      	movs	r2, #4
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d125      	bne.n	800281a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2204      	movs	r2, #4
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d11e      	bne.n	800281a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2205      	movs	r2, #5
 80027e2:	4252      	negs	r2, r2
 80027e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2202      	movs	r2, #2
 80027ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d004      	beq.n	8002804 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	0018      	movs	r0, r3
 80027fe:	f7fd fd4d 	bl	800029c <HAL_TIM_IC_CaptureCallback>
 8002802:	e007      	b.n	8002814 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	0018      	movs	r0, r3
 8002808:	f000 fb32 	bl	8002e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 fb36 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	2208      	movs	r2, #8
 8002822:	4013      	ands	r3, r2
 8002824:	2b08      	cmp	r3, #8
 8002826:	d124      	bne.n	8002872 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	2208      	movs	r2, #8
 8002830:	4013      	ands	r3, r2
 8002832:	2b08      	cmp	r3, #8
 8002834:	d11d      	bne.n	8002872 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2209      	movs	r2, #9
 800283c:	4252      	negs	r2, r2
 800283e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2204      	movs	r2, #4
 8002844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	2203      	movs	r2, #3
 800284e:	4013      	ands	r3, r2
 8002850:	d004      	beq.n	800285c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0018      	movs	r0, r3
 8002856:	f7fd fd21 	bl	800029c <HAL_TIM_IC_CaptureCallback>
 800285a:	e007      	b.n	800286c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 fb06 	bl	8002e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 fb0a 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	2210      	movs	r2, #16
 800287a:	4013      	ands	r3, r2
 800287c:	2b10      	cmp	r3, #16
 800287e:	d125      	bne.n	80028cc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	2210      	movs	r2, #16
 8002888:	4013      	ands	r3, r2
 800288a:	2b10      	cmp	r3, #16
 800288c:	d11e      	bne.n	80028cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2211      	movs	r2, #17
 8002894:	4252      	negs	r2, r2
 8002896:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2208      	movs	r2, #8
 800289c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	69da      	ldr	r2, [r3, #28]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	d004      	beq.n	80028b6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	0018      	movs	r0, r3
 80028b0:	f7fd fcf4 	bl	800029c <HAL_TIM_IC_CaptureCallback>
 80028b4:	e007      	b.n	80028c6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fad9 	bl	8002e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f000 fadd 	bl	8002e80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	2201      	movs	r2, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d10f      	bne.n	80028fa <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2201      	movs	r2, #1
 80028e2:	4013      	ands	r3, r2
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d108      	bne.n	80028fa <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	4252      	negs	r2, r2
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7fd fd2f 	bl	8000358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	4013      	ands	r3, r2
 8002904:	2b80      	cmp	r3, #128	; 0x80
 8002906:	d10f      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	4013      	ands	r3, r2
 8002912:	2b80      	cmp	r3, #128	; 0x80
 8002914:	d108      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2281      	movs	r2, #129	; 0x81
 800291c:	4252      	negs	r2, r2
 800291e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f000 ff98 	bl	8003858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	2240      	movs	r2, #64	; 0x40
 8002930:	4013      	ands	r3, r2
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d10f      	bne.n	8002956 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2240      	movs	r2, #64	; 0x40
 800293e:	4013      	ands	r3, r2
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d108      	bne.n	8002956 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2241      	movs	r2, #65	; 0x41
 800294a:	4252      	negs	r2, r2
 800294c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	0018      	movs	r0, r3
 8002952:	f000 fa9d 	bl	8002e90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2220      	movs	r2, #32
 800295e:	4013      	ands	r3, r2
 8002960:	2b20      	cmp	r3, #32
 8002962:	d10f      	bne.n	8002984 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	4013      	ands	r3, r2
 800296e:	2b20      	cmp	r3, #32
 8002970:	d108      	bne.n	8002984 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2221      	movs	r2, #33	; 0x21
 8002978:	4252      	negs	r2, r2
 800297a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	0018      	movs	r0, r3
 8002980:	f000 ff62 	bl	8003848 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	b002      	add	sp, #8
 800298a:	bd80      	pop	{r7, pc}

0800298c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002998:	2317      	movs	r3, #23
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	223c      	movs	r2, #60	; 0x3c
 80029a4:	5c9b      	ldrb	r3, [r3, r2]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <HAL_TIM_IC_ConfigChannel+0x22>
 80029aa:	2302      	movs	r3, #2
 80029ac:	e08c      	b.n	8002ac8 <HAL_TIM_IC_ConfigChannel+0x13c>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	223c      	movs	r2, #60	; 0x3c
 80029b2:	2101      	movs	r1, #1
 80029b4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11b      	bne.n	80029f4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	6819      	ldr	r1, [r3, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f000 fcb4 	bl	8003338 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699a      	ldr	r2, [r3, #24]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	210c      	movs	r1, #12
 80029dc:	438a      	bics	r2, r1
 80029de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6999      	ldr	r1, [r3, #24]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	619a      	str	r2, [r3, #24]
 80029f2:	e062      	b.n	8002aba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d11c      	bne.n	8002a34 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6819      	ldr	r1, [r3, #0]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f000 fd15 	bl	8003438 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699a      	ldr	r2, [r3, #24]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	492d      	ldr	r1, [pc, #180]	; (8002ad0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6999      	ldr	r1, [r3, #24]
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	021a      	lsls	r2, r3, #8
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	619a      	str	r2, [r3, #24]
 8002a32:	e042      	b.n	8002aba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d11b      	bne.n	8002a72 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	6819      	ldr	r1, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	f000 fd69 	bl	8003520 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69da      	ldr	r2, [r3, #28]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	210c      	movs	r1, #12
 8002a5a:	438a      	bics	r2, r1
 8002a5c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69d9      	ldr	r1, [r3, #28]
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	61da      	str	r2, [r3, #28]
 8002a70:	e023      	b.n	8002aba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b0c      	cmp	r3, #12
 8002a76:	d11c      	bne.n	8002ab2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6818      	ldr	r0, [r3, #0]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	6819      	ldr	r1, [r3, #0]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f000 fd8a 	bl	80035a0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69da      	ldr	r2, [r3, #28]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	490e      	ldr	r1, [pc, #56]	; (8002ad0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002a98:	400a      	ands	r2, r1
 8002a9a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69d9      	ldr	r1, [r3, #28]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	021a      	lsls	r2, r3, #8
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	430a      	orrs	r2, r1
 8002aae:	61da      	str	r2, [r3, #28]
 8002ab0:	e003      	b.n	8002aba <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002ab2:	2317      	movs	r3, #23
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	223c      	movs	r2, #60	; 0x3c
 8002abe:	2100      	movs	r1, #0
 8002ac0:	5499      	strb	r1, [r3, r2]

  return status;
 8002ac2:	2317      	movs	r3, #23
 8002ac4:	18fb      	adds	r3, r7, r3
 8002ac6:	781b      	ldrb	r3, [r3, #0]
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b006      	add	sp, #24
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	fffff3ff 	.word	0xfffff3ff

08002ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae0:	2317      	movs	r3, #23
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	223c      	movs	r2, #60	; 0x3c
 8002aec:	5c9b      	ldrb	r3, [r3, r2]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002af2:	2302      	movs	r3, #2
 8002af4:	e0ad      	b.n	8002c52 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	223c      	movs	r2, #60	; 0x3c
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b0c      	cmp	r3, #12
 8002b02:	d100      	bne.n	8002b06 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002b04:	e076      	b.n	8002bf4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0c      	cmp	r3, #12
 8002b0a:	d900      	bls.n	8002b0e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002b0c:	e095      	b.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d04e      	beq.n	8002bb2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d900      	bls.n	8002b1c <HAL_TIM_PWM_ConfigChannel+0x48>
 8002b1a:	e08e      	b.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d021      	beq.n	8002b6c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002b28:	e087      	b.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	0011      	movs	r1, r2
 8002b32:	0018      	movs	r0, r3
 8002b34:	f000 fa20 	bl	8002f78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2108      	movs	r1, #8
 8002b44:	430a      	orrs	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699a      	ldr	r2, [r3, #24]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2104      	movs	r1, #4
 8002b54:	438a      	bics	r2, r1
 8002b56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6999      	ldr	r1, [r3, #24]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	691a      	ldr	r2, [r3, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	619a      	str	r2, [r3, #24]
      break;
 8002b6a:	e06b      	b.n	8002c44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68ba      	ldr	r2, [r7, #8]
 8002b72:	0011      	movs	r1, r2
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 fa7d 	bl	8003074 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0109      	lsls	r1, r1, #4
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4931      	ldr	r1, [pc, #196]	; (8002c5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b98:	400a      	ands	r2, r1
 8002b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6999      	ldr	r1, [r3, #24]
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	021a      	lsls	r2, r3, #8
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	619a      	str	r2, [r3, #24]
      break;
 8002bb0:	e048      	b.n	8002c44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	0011      	movs	r1, r2
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f000 fad8 	bl	8003170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2108      	movs	r1, #8
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2104      	movs	r1, #4
 8002bdc:	438a      	bics	r2, r1
 8002bde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69d9      	ldr	r1, [r3, #28]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	691a      	ldr	r2, [r3, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	61da      	str	r2, [r3, #28]
      break;
 8002bf2:	e027      	b.n	8002c44 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	0011      	movs	r1, r2
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 fb37 	bl	8003270 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69da      	ldr	r2, [r3, #28]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2180      	movs	r1, #128	; 0x80
 8002c0e:	0109      	lsls	r1, r1, #4
 8002c10:	430a      	orrs	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69da      	ldr	r2, [r3, #28]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	490f      	ldr	r1, [pc, #60]	; (8002c5c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c20:	400a      	ands	r2, r1
 8002c22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69d9      	ldr	r1, [r3, #28]
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	021a      	lsls	r2, r3, #8
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	61da      	str	r2, [r3, #28]
      break;
 8002c38:	e004      	b.n	8002c44 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002c3a:	2317      	movs	r3, #23
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
      break;
 8002c42:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	223c      	movs	r2, #60	; 0x3c
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]

  return status;
 8002c4c:	2317      	movs	r3, #23
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	781b      	ldrb	r3, [r3, #0]
}
 8002c52:	0018      	movs	r0, r3
 8002c54:	46bd      	mov	sp, r7
 8002c56:	b006      	add	sp, #24
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	46c0      	nop			; (mov r8, r8)
 8002c5c:	fffffbff 	.word	0xfffffbff

08002c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c6a:	230f      	movs	r3, #15
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	223c      	movs	r2, #60	; 0x3c
 8002c76:	5c9b      	ldrb	r3, [r3, r2]
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d101      	bne.n	8002c80 <HAL_TIM_ConfigClockSource+0x20>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	e0bc      	b.n	8002dfa <HAL_TIM_ConfigClockSource+0x19a>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	223c      	movs	r2, #60	; 0x3c
 8002c84:	2101      	movs	r1, #1
 8002c86:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	223d      	movs	r2, #61	; 0x3d
 8002c8c:	2102      	movs	r1, #2
 8002c8e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2277      	movs	r2, #119	; 0x77
 8002c9c:	4393      	bics	r3, r2
 8002c9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a58      	ldr	r2, [pc, #352]	; (8002e04 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2280      	movs	r2, #128	; 0x80
 8002cb6:	0192      	lsls	r2, r2, #6
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d040      	beq.n	8002d3e <HAL_TIM_ConfigClockSource+0xde>
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	0192      	lsls	r2, r2, #6
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d900      	bls.n	8002cc6 <HAL_TIM_ConfigClockSource+0x66>
 8002cc4:	e088      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
 8002cc6:	2280      	movs	r2, #128	; 0x80
 8002cc8:	0152      	lsls	r2, r2, #5
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d100      	bne.n	8002cd0 <HAL_TIM_ConfigClockSource+0x70>
 8002cce:	e088      	b.n	8002de2 <HAL_TIM_ConfigClockSource+0x182>
 8002cd0:	2280      	movs	r2, #128	; 0x80
 8002cd2:	0152      	lsls	r2, r2, #5
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d900      	bls.n	8002cda <HAL_TIM_ConfigClockSource+0x7a>
 8002cd8:	e07e      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
 8002cda:	2b70      	cmp	r3, #112	; 0x70
 8002cdc:	d018      	beq.n	8002d10 <HAL_TIM_ConfigClockSource+0xb0>
 8002cde:	d900      	bls.n	8002ce2 <HAL_TIM_ConfigClockSource+0x82>
 8002ce0:	e07a      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
 8002ce2:	2b60      	cmp	r3, #96	; 0x60
 8002ce4:	d04f      	beq.n	8002d86 <HAL_TIM_ConfigClockSource+0x126>
 8002ce6:	d900      	bls.n	8002cea <HAL_TIM_ConfigClockSource+0x8a>
 8002ce8:	e076      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
 8002cea:	2b50      	cmp	r3, #80	; 0x50
 8002cec:	d03b      	beq.n	8002d66 <HAL_TIM_ConfigClockSource+0x106>
 8002cee:	d900      	bls.n	8002cf2 <HAL_TIM_ConfigClockSource+0x92>
 8002cf0:	e072      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
 8002cf2:	2b40      	cmp	r3, #64	; 0x40
 8002cf4:	d057      	beq.n	8002da6 <HAL_TIM_ConfigClockSource+0x146>
 8002cf6:	d900      	bls.n	8002cfa <HAL_TIM_ConfigClockSource+0x9a>
 8002cf8:	e06e      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
 8002cfa:	2b30      	cmp	r3, #48	; 0x30
 8002cfc:	d063      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x166>
 8002cfe:	d86b      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
 8002d00:	2b20      	cmp	r3, #32
 8002d02:	d060      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x166>
 8002d04:	d868      	bhi.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d05d      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x166>
 8002d0a:	2b10      	cmp	r3, #16
 8002d0c:	d05b      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0x166>
 8002d0e:	e063      	b.n	8002dd8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6818      	ldr	r0, [r3, #0]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	6899      	ldr	r1, [r3, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	f000 fc9e 	bl	8003660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2277      	movs	r2, #119	; 0x77
 8002d30:	4313      	orrs	r3, r2
 8002d32:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68ba      	ldr	r2, [r7, #8]
 8002d3a:	609a      	str	r2, [r3, #8]
      break;
 8002d3c:	e052      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	f000 fc87 	bl	8003660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2180      	movs	r1, #128	; 0x80
 8002d5e:	01c9      	lsls	r1, r1, #7
 8002d60:	430a      	orrs	r2, r1
 8002d62:	609a      	str	r2, [r3, #8]
      break;
 8002d64:	e03e      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	6859      	ldr	r1, [r3, #4]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	001a      	movs	r2, r3
 8002d74:	f000 fb32 	bl	80033dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2150      	movs	r1, #80	; 0x50
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fc54 	bl	800362c <TIM_ITRx_SetConfig>
      break;
 8002d84:	e02e      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	001a      	movs	r2, r3
 8002d94:	f000 fb92 	bl	80034bc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2160      	movs	r1, #96	; 0x60
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 fc44 	bl	800362c <TIM_ITRx_SetConfig>
      break;
 8002da4:	e01e      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	001a      	movs	r2, r3
 8002db4:	f000 fb12 	bl	80033dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2140      	movs	r1, #64	; 0x40
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f000 fc34 	bl	800362c <TIM_ITRx_SetConfig>
      break;
 8002dc4:	e00e      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	0019      	movs	r1, r3
 8002dd0:	0010      	movs	r0, r2
 8002dd2:	f000 fc2b 	bl	800362c <TIM_ITRx_SetConfig>
      break;
 8002dd6:	e005      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002dd8:	230f      	movs	r3, #15
 8002dda:	18fb      	adds	r3, r7, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	701a      	strb	r2, [r3, #0]
      break;
 8002de0:	e000      	b.n	8002de4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002de2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	223d      	movs	r2, #61	; 0x3d
 8002de8:	2101      	movs	r1, #1
 8002dea:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	223c      	movs	r2, #60	; 0x3c
 8002df0:	2100      	movs	r1, #0
 8002df2:	5499      	strb	r1, [r3, r2]

  return status;
 8002df4:	230f      	movs	r3, #15
 8002df6:	18fb      	adds	r3, r7, r3
 8002df8:	781b      	ldrb	r3, [r3, #0]
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b004      	add	sp, #16
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	46c0      	nop			; (mov r8, r8)
 8002e04:	ffff00ff 	.word	0xffff00ff

08002e08 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
 8002e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	2b0c      	cmp	r3, #12
 8002e1a:	d01e      	beq.n	8002e5a <HAL_TIM_ReadCapturedValue+0x52>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	2b0c      	cmp	r3, #12
 8002e20:	d820      	bhi.n	8002e64 <HAL_TIM_ReadCapturedValue+0x5c>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d013      	beq.n	8002e50 <HAL_TIM_ReadCapturedValue+0x48>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d81a      	bhi.n	8002e64 <HAL_TIM_ReadCapturedValue+0x5c>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d003      	beq.n	8002e3c <HAL_TIM_ReadCapturedValue+0x34>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d005      	beq.n	8002e46 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002e3a:	e013      	b.n	8002e64 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	60fb      	str	r3, [r7, #12]
      break;
 8002e44:	e00f      	b.n	8002e66 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4c:	60fb      	str	r3, [r7, #12]
      break;
 8002e4e:	e00a      	b.n	8002e66 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	60fb      	str	r3, [r7, #12]
      break;
 8002e58:	e005      	b.n	8002e66 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	60fb      	str	r3, [r7, #12]
      break;
 8002e62:	e000      	b.n	8002e66 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002e64:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8002e66:	68fb      	ldr	r3, [r7, #12]
}
 8002e68:	0018      	movs	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b004      	add	sp, #16
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b082      	sub	sp, #8
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b002      	add	sp, #8
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <TIM_Base_SetConfig+0xc0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x20>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2a      	ldr	r2, [pc, #168]	; (8002f64 <TIM_Base_SetConfig+0xc4>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2270      	movs	r2, #112	; 0x70
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	; (8002f60 <TIM_Base_SetConfig+0xc0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00f      	beq.n	8002efa <TIM_Base_SetConfig+0x5a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a21      	ldr	r2, [pc, #132]	; (8002f64 <TIM_Base_SetConfig+0xc4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00b      	beq.n	8002efa <TIM_Base_SetConfig+0x5a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <TIM_Base_SetConfig+0xc8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <TIM_Base_SetConfig+0x5a>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <TIM_Base_SetConfig+0xcc>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d003      	beq.n	8002efa <TIM_Base_SetConfig+0x5a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4a1e      	ldr	r2, [pc, #120]	; (8002f70 <TIM_Base_SetConfig+0xd0>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d108      	bne.n	8002f0c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <TIM_Base_SetConfig+0xd4>)
 8002efe:	4013      	ands	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2280      	movs	r2, #128	; 0x80
 8002f10:	4393      	bics	r3, r2
 8002f12:	001a      	movs	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	695b      	ldr	r3, [r3, #20]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689a      	ldr	r2, [r3, #8]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <TIM_Base_SetConfig+0xc0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <TIM_Base_SetConfig+0xcc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0xaa>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <TIM_Base_SetConfig+0xd0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d103      	bne.n	8002f52 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	691a      	ldr	r2, [r3, #16]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2201      	movs	r2, #1
 8002f56:	615a      	str	r2, [r3, #20]
}
 8002f58:	46c0      	nop			; (mov r8, r8)
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b004      	add	sp, #16
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40002000 	.word	0x40002000
 8002f6c:	40014400 	.word	0x40014400
 8002f70:	40014800 	.word	0x40014800
 8002f74:	fffffcff 	.word	0xfffffcff

08002f78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	2201      	movs	r2, #1
 8002f88:	4393      	bics	r3, r2
 8002f8a:	001a      	movs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2270      	movs	r2, #112	; 0x70
 8002fa6:	4393      	bics	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2203      	movs	r2, #3
 8002fae:	4393      	bics	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a23      	ldr	r2, [pc, #140]	; (8003060 <TIM_OC1_SetConfig+0xe8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d007      	beq.n	8002fe6 <TIM_OC1_SetConfig+0x6e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	; (8003064 <TIM_OC1_SetConfig+0xec>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d003      	beq.n	8002fe6 <TIM_OC1_SetConfig+0x6e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a21      	ldr	r2, [pc, #132]	; (8003068 <TIM_OC1_SetConfig+0xf0>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10c      	bne.n	8003000 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	4393      	bics	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	2204      	movs	r2, #4
 8002ffc:	4393      	bics	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <TIM_OC1_SetConfig+0xe8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d007      	beq.n	8003018 <TIM_OC1_SetConfig+0xa0>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a16      	ldr	r2, [pc, #88]	; (8003064 <TIM_OC1_SetConfig+0xec>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d003      	beq.n	8003018 <TIM_OC1_SetConfig+0xa0>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a15      	ldr	r2, [pc, #84]	; (8003068 <TIM_OC1_SetConfig+0xf0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d111      	bne.n	800303c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <TIM_OC1_SetConfig+0xf4>)
 800301c:	4013      	ands	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <TIM_OC1_SetConfig+0xf8>)
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	46c0      	nop			; (mov r8, r8)
 8003058:	46bd      	mov	sp, r7
 800305a:	b006      	add	sp, #24
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	40012c00 	.word	0x40012c00
 8003064:	40014400 	.word	0x40014400
 8003068:	40014800 	.word	0x40014800
 800306c:	fffffeff 	.word	0xfffffeff
 8003070:	fffffdff 	.word	0xfffffdff

08003074 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b086      	sub	sp, #24
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	2210      	movs	r2, #16
 8003084:	4393      	bics	r3, r2
 8003086:	001a      	movs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a1b      	ldr	r3, [r3, #32]
 8003090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4a2c      	ldr	r2, [pc, #176]	; (8003154 <TIM_OC2_SetConfig+0xe0>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4a2b      	ldr	r2, [pc, #172]	; (8003158 <TIM_OC2_SetConfig+0xe4>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	2220      	movs	r2, #32
 80030be:	4393      	bics	r3, r2
 80030c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <TIM_OC2_SetConfig+0xe8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10d      	bne.n	80030f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	4393      	bics	r3, r2
 80030dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2240      	movs	r2, #64	; 0x40
 80030ee:	4393      	bics	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a19      	ldr	r2, [pc, #100]	; (800315c <TIM_OC2_SetConfig+0xe8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d007      	beq.n	800310a <TIM_OC2_SetConfig+0x96>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <TIM_OC2_SetConfig+0xec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <TIM_OC2_SetConfig+0x96>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a17      	ldr	r2, [pc, #92]	; (8003164 <TIM_OC2_SetConfig+0xf0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d113      	bne.n	8003132 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4a16      	ldr	r2, [pc, #88]	; (8003168 <TIM_OC2_SetConfig+0xf4>)
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <TIM_OC2_SetConfig+0xf8>)
 8003116:	4013      	ands	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4313      	orrs	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	693a      	ldr	r2, [r7, #16]
 8003136:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	621a      	str	r2, [r3, #32]
}
 800314c:	46c0      	nop			; (mov r8, r8)
 800314e:	46bd      	mov	sp, r7
 8003150:	b006      	add	sp, #24
 8003152:	bd80      	pop	{r7, pc}
 8003154:	ffff8fff 	.word	0xffff8fff
 8003158:	fffffcff 	.word	0xfffffcff
 800315c:	40012c00 	.word	0x40012c00
 8003160:	40014400 	.word	0x40014400
 8003164:	40014800 	.word	0x40014800
 8003168:	fffffbff 	.word	0xfffffbff
 800316c:	fffff7ff 	.word	0xfffff7ff

08003170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a1b      	ldr	r3, [r3, #32]
 800317e:	4a33      	ldr	r2, [pc, #204]	; (800324c <TIM_OC3_SetConfig+0xdc>)
 8003180:	401a      	ands	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2270      	movs	r2, #112	; 0x70
 800319c:	4393      	bics	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2203      	movs	r2, #3
 80031a4:	4393      	bics	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	4a26      	ldr	r2, [pc, #152]	; (8003250 <TIM_OC3_SetConfig+0xe0>)
 80031b6:	4013      	ands	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a22      	ldr	r2, [pc, #136]	; (8003254 <TIM_OC3_SetConfig+0xe4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10d      	bne.n	80031ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	4a21      	ldr	r2, [pc, #132]	; (8003258 <TIM_OC3_SetConfig+0xe8>)
 80031d2:	4013      	ands	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4313      	orrs	r3, r2
 80031e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <TIM_OC3_SetConfig+0xec>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a19      	ldr	r2, [pc, #100]	; (8003254 <TIM_OC3_SetConfig+0xe4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <TIM_OC3_SetConfig+0x92>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a1a      	ldr	r2, [pc, #104]	; (8003260 <TIM_OC3_SetConfig+0xf0>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d003      	beq.n	8003202 <TIM_OC3_SetConfig+0x92>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <TIM_OC3_SetConfig+0xf4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d113      	bne.n	800322a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4a18      	ldr	r2, [pc, #96]	; (8003268 <TIM_OC3_SetConfig+0xf8>)
 8003206:	4013      	ands	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4a17      	ldr	r2, [pc, #92]	; (800326c <TIM_OC3_SetConfig+0xfc>)
 800320e:	4013      	ands	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	4313      	orrs	r3, r2
 8003228:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	621a      	str	r2, [r3, #32]
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b006      	add	sp, #24
 800324a:	bd80      	pop	{r7, pc}
 800324c:	fffffeff 	.word	0xfffffeff
 8003250:	fffffdff 	.word	0xfffffdff
 8003254:	40012c00 	.word	0x40012c00
 8003258:	fffff7ff 	.word	0xfffff7ff
 800325c:	fffffbff 	.word	0xfffffbff
 8003260:	40014400 	.word	0x40014400
 8003264:	40014800 	.word	0x40014800
 8003268:	ffffefff 	.word	0xffffefff
 800326c:	ffffdfff 	.word	0xffffdfff

08003270 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
 800327e:	4a26      	ldr	r2, [pc, #152]	; (8003318 <TIM_OC4_SetConfig+0xa8>)
 8003280:	401a      	ands	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <TIM_OC4_SetConfig+0xac>)
 800329c:	4013      	ands	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4a1f      	ldr	r2, [pc, #124]	; (8003320 <TIM_OC4_SetConfig+0xb0>)
 80032a4:	4013      	ands	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	021b      	lsls	r3, r3, #8
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4a1b      	ldr	r2, [pc, #108]	; (8003324 <TIM_OC4_SetConfig+0xb4>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	031b      	lsls	r3, r3, #12
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a17      	ldr	r2, [pc, #92]	; (8003328 <TIM_OC4_SetConfig+0xb8>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d007      	beq.n	80032e0 <TIM_OC4_SetConfig+0x70>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a16      	ldr	r2, [pc, #88]	; (800332c <TIM_OC4_SetConfig+0xbc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d003      	beq.n	80032e0 <TIM_OC4_SetConfig+0x70>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a15      	ldr	r2, [pc, #84]	; (8003330 <TIM_OC4_SetConfig+0xc0>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d109      	bne.n	80032f4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4a14      	ldr	r2, [pc, #80]	; (8003334 <TIM_OC4_SetConfig+0xc4>)
 80032e4:	4013      	ands	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	019b      	lsls	r3, r3, #6
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	621a      	str	r2, [r3, #32]
}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b006      	add	sp, #24
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	ffffefff 	.word	0xffffefff
 800331c:	ffff8fff 	.word	0xffff8fff
 8003320:	fffffcff 	.word	0xfffffcff
 8003324:	ffffdfff 	.word	0xffffdfff
 8003328:	40012c00 	.word	0x40012c00
 800332c:	40014400 	.word	0x40014400
 8003330:	40014800 	.word	0x40014800
 8003334:	ffffbfff 	.word	0xffffbfff

08003338 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b086      	sub	sp, #24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
 8003344:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	2201      	movs	r2, #1
 800334c:	4393      	bics	r3, r2
 800334e:	001a      	movs	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a1c      	ldr	r2, [pc, #112]	; (80033d4 <TIM_TI1_SetConfig+0x9c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_TI1_SetConfig+0x38>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <TIM_TI1_SetConfig+0xa0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d101      	bne.n	8003374 <TIM_TI1_SetConfig+0x3c>
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <TIM_TI1_SetConfig+0x3e>
 8003374:	2300      	movs	r3, #0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d008      	beq.n	800338c <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2203      	movs	r2, #3
 800337e:	4393      	bics	r3, r2
 8003380:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e003      	b.n	8003394 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2201      	movs	r2, #1
 8003390:	4313      	orrs	r3, r2
 8003392:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	22f0      	movs	r2, #240	; 0xf0
 8003398:	4393      	bics	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	22ff      	movs	r2, #255	; 0xff
 80033a2:	4013      	ands	r3, r2
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	220a      	movs	r2, #10
 80033ae:	4393      	bics	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	220a      	movs	r2, #10
 80033b6:	4013      	ands	r3, r2
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	697a      	ldr	r2, [r7, #20]
 80033c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	621a      	str	r2, [r3, #32]
}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b006      	add	sp, #24
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	40012c00 	.word	0x40012c00
 80033d8:	40000400 	.word	0x40000400

080033dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6a1b      	ldr	r3, [r3, #32]
 80033ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	2201      	movs	r2, #1
 80033f4:	4393      	bics	r3, r2
 80033f6:	001a      	movs	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	22f0      	movs	r2, #240	; 0xf0
 8003406:	4393      	bics	r3, r2
 8003408:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	011b      	lsls	r3, r3, #4
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	4313      	orrs	r3, r2
 8003412:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	220a      	movs	r2, #10
 8003418:	4393      	bics	r3, r2
 800341a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	621a      	str	r2, [r3, #32]
}
 8003430:	46c0      	nop			; (mov r8, r8)
 8003432:	46bd      	mov	sp, r7
 8003434:	b006      	add	sp, #24
 8003436:	bd80      	pop	{r7, pc}

08003438 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
 8003444:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	2210      	movs	r2, #16
 800344c:	4393      	bics	r3, r2
 800344e:	001a      	movs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4a14      	ldr	r2, [pc, #80]	; (80034b4 <TIM_TI2_SetConfig+0x7c>)
 8003464:	4013      	ands	r3, r2
 8003466:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	4313      	orrs	r3, r2
 8003470:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	4a10      	ldr	r2, [pc, #64]	; (80034b8 <TIM_TI2_SetConfig+0x80>)
 8003476:	4013      	ands	r3, r2
 8003478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	031b      	lsls	r3, r3, #12
 800347e:	041b      	lsls	r3, r3, #16
 8003480:	0c1b      	lsrs	r3, r3, #16
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	22a0      	movs	r2, #160	; 0xa0
 800348c:	4393      	bics	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	22a0      	movs	r2, #160	; 0xa0
 8003496:	4013      	ands	r3, r2
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	693a      	ldr	r2, [r7, #16]
 80034a8:	621a      	str	r2, [r3, #32]
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b006      	add	sp, #24
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			; (mov r8, r8)
 80034b4:	fffffcff 	.word	0xfffffcff
 80034b8:	ffff0fff 	.word	0xffff0fff

080034bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	2210      	movs	r2, #16
 80034ce:	4393      	bics	r3, r2
 80034d0:	001a      	movs	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	4a0d      	ldr	r2, [pc, #52]	; (800351c <TIM_TI2_ConfigInputStage+0x60>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	031b      	lsls	r3, r3, #12
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	22a0      	movs	r2, #160	; 0xa0
 80034f8:	4393      	bics	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	621a      	str	r2, [r3, #32]
}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	46bd      	mov	sp, r7
 8003516:	b006      	add	sp, #24
 8003518:	bd80      	pop	{r7, pc}
 800351a:	46c0      	nop			; (mov r8, r8)
 800351c:	ffff0fff 	.word	0xffff0fff

08003520 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4a19      	ldr	r2, [pc, #100]	; (8003598 <TIM_TI3_SetConfig+0x78>)
 8003534:	401a      	ands	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	69db      	ldr	r3, [r3, #28]
 800353e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2203      	movs	r2, #3
 800354a:	4393      	bics	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	22f0      	movs	r2, #240	; 0xf0
 800355a:	4393      	bics	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	22ff      	movs	r2, #255	; 0xff
 8003564:	4013      	ands	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4a0b      	ldr	r2, [pc, #44]	; (800359c <TIM_TI3_SetConfig+0x7c>)
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	021a      	lsls	r2, r3, #8
 8003578:	23a0      	movs	r3, #160	; 0xa0
 800357a:	011b      	lsls	r3, r3, #4
 800357c:	4013      	ands	r3, r2
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4313      	orrs	r3, r2
 8003582:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	621a      	str	r2, [r3, #32]
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b006      	add	sp, #24
 8003596:	bd80      	pop	{r7, pc}
 8003598:	fffffeff 	.word	0xfffffeff
 800359c:	fffff5ff 	.word	0xfffff5ff

080035a0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]
 80035ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	; (800361c <TIM_TI4_SetConfig+0x7c>)
 80035b4:	401a      	ands	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	4a15      	ldr	r2, [pc, #84]	; (8003620 <TIM_TI4_SetConfig+0x80>)
 80035ca:	4013      	ands	r3, r2
 80035cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4a12      	ldr	r2, [pc, #72]	; (8003624 <TIM_TI4_SetConfig+0x84>)
 80035dc:	4013      	ands	r3, r2
 80035de:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	031b      	lsls	r3, r3, #12
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	697a      	ldr	r2, [r7, #20]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4a0d      	ldr	r2, [pc, #52]	; (8003628 <TIM_TI4_SetConfig+0x88>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	031a      	lsls	r2, r3, #12
 80035fa:	23a0      	movs	r3, #160	; 0xa0
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	4013      	ands	r3, r2
 8003600:	693a      	ldr	r2, [r7, #16]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	621a      	str	r2, [r3, #32]
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	b006      	add	sp, #24
 8003618:	bd80      	pop	{r7, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	ffffefff 	.word	0xffffefff
 8003620:	fffffcff 	.word	0xfffffcff
 8003624:	ffff0fff 	.word	0xffff0fff
 8003628:	ffff5fff 	.word	0xffff5fff

0800362c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2270      	movs	r2, #112	; 0x70
 8003640:	4393      	bics	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	2207      	movs	r2, #7
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	609a      	str	r2, [r3, #8]
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b004      	add	sp, #16
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4a09      	ldr	r2, [pc, #36]	; (800369c <TIM_ETR_SetConfig+0x3c>)
 8003678:	4013      	ands	r3, r2
 800367a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	021a      	lsls	r2, r3, #8
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	431a      	orrs	r2, r3
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4313      	orrs	r3, r2
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	4313      	orrs	r3, r2
 800368c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	697a      	ldr	r2, [r7, #20]
 8003692:	609a      	str	r2, [r3, #8]
}
 8003694:	46c0      	nop			; (mov r8, r8)
 8003696:	46bd      	mov	sp, r7
 8003698:	b006      	add	sp, #24
 800369a:	bd80      	pop	{r7, pc}
 800369c:	ffff00ff 	.word	0xffff00ff

080036a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	221f      	movs	r2, #31
 80036b0:	4013      	ands	r3, r2
 80036b2:	2201      	movs	r2, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	0013      	movs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a1b      	ldr	r3, [r3, #32]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	43d2      	mvns	r2, r2
 80036c2:	401a      	ands	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a1a      	ldr	r2, [r3, #32]
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	211f      	movs	r1, #31
 80036d0:	400b      	ands	r3, r1
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4099      	lsls	r1, r3
 80036d6:	000b      	movs	r3, r1
 80036d8:	431a      	orrs	r2, r3
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	46c0      	nop			; (mov r8, r8)
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b006      	add	sp, #24
 80036e4:	bd80      	pop	{r7, pc}
	...

080036e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	223c      	movs	r2, #60	; 0x3c
 80036f6:	5c9b      	ldrb	r3, [r3, r2]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e03c      	b.n	800377a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	223c      	movs	r2, #60	; 0x3c
 8003704:	2101      	movs	r1, #1
 8003706:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	223d      	movs	r2, #61	; 0x3d
 800370c:	2102      	movs	r1, #2
 800370e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2270      	movs	r2, #112	; 0x70
 8003724:	4393      	bics	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	4313      	orrs	r3, r2
 8003730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a11      	ldr	r2, [pc, #68]	; (8003784 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d004      	beq.n	800374e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a0f      	ldr	r2, [pc, #60]	; (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d10c      	bne.n	8003768 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	4393      	bics	r3, r2
 8003754:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	4313      	orrs	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	223d      	movs	r2, #61	; 0x3d
 800376c:	2101      	movs	r1, #1
 800376e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	223c      	movs	r2, #60	; 0x3c
 8003774:	2100      	movs	r1, #0
 8003776:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	0018      	movs	r0, r3
 800377c:	46bd      	mov	sp, r7
 800377e:	b004      	add	sp, #16
 8003780:	bd80      	pop	{r7, pc}
 8003782:	46c0      	nop			; (mov r8, r8)
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40000400 	.word	0x40000400

0800378c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	223c      	movs	r2, #60	; 0x3c
 800379e:	5c9b      	ldrb	r3, [r3, r2]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d101      	bne.n	80037a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80037a4:	2302      	movs	r3, #2
 80037a6:	e03e      	b.n	8003826 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	223c      	movs	r2, #60	; 0x3c
 80037ac:	2101      	movs	r1, #1
 80037ae:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	22ff      	movs	r2, #255	; 0xff
 80037b4:	4393      	bics	r3, r2
 80037b6:	001a      	movs	r2, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	4313      	orrs	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80037c4:	401a      	ands	r2, r3
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4a18      	ldr	r2, [pc, #96]	; (8003834 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80037d2:	401a      	ands	r2, r3
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a16      	ldr	r2, [pc, #88]	; (8003838 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80037e0:	401a      	ands	r2, r3
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a13      	ldr	r2, [pc, #76]	; (800383c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80037ee:	401a      	ands	r2, r3
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80037fc:	401a      	ands	r2, r3
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a0e      	ldr	r2, [pc, #56]	; (8003844 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800380a:	401a      	ands	r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	4313      	orrs	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68fa      	ldr	r2, [r7, #12]
 800381a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	223c      	movs	r2, #60	; 0x3c
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	0018      	movs	r0, r3
 8003828:	46bd      	mov	sp, r7
 800382a:	b004      	add	sp, #16
 800382c:	bd80      	pop	{r7, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	fffffcff 	.word	0xfffffcff
 8003834:	fffffbff 	.word	0xfffffbff
 8003838:	fffff7ff 	.word	0xfffff7ff
 800383c:	ffffefff 	.word	0xffffefff
 8003840:	ffffdfff 	.word	0xffffdfff
 8003844:	ffffbfff 	.word	0xffffbfff

08003848 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003860:	46c0      	nop			; (mov r8, r8)
 8003862:	46bd      	mov	sp, r7
 8003864:	b002      	add	sp, #8
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e044      	b.n	8003904 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2274      	movs	r2, #116	; 0x74
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	0018      	movs	r0, r3
 800388e:	f7fd faa5 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2224      	movs	r2, #36	; 0x24
 8003896:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2101      	movs	r1, #1
 80038a4:	438a      	bics	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0018      	movs	r0, r3
 80038ac:	f000 f8da 	bl	8003a64 <UART_SetConfig>
 80038b0:	0003      	movs	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e024      	b.n	8003904 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	0018      	movs	r0, r3
 80038c6:	f000 f9f7 	bl	8003cb8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	490d      	ldr	r1, [pc, #52]	; (800390c <HAL_UART_Init+0xa4>)
 80038d6:	400a      	ands	r2, r1
 80038d8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2108      	movs	r1, #8
 80038e6:	438a      	bics	r2, r1
 80038e8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	430a      	orrs	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	0018      	movs	r0, r3
 80038fe:	f000 fa8f 	bl	8003e20 <UART_CheckIdleState>
 8003902:	0003      	movs	r3, r0
}
 8003904:	0018      	movs	r0, r3
 8003906:	46bd      	mov	sp, r7
 8003908:	b002      	add	sp, #8
 800390a:	bd80      	pop	{r7, pc}
 800390c:	fffff7ff 	.word	0xfffff7ff

08003910 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08a      	sub	sp, #40	; 0x28
 8003914:	af02      	add	r7, sp, #8
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	603b      	str	r3, [r7, #0]
 800391c:	1dbb      	adds	r3, r7, #6
 800391e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003924:	2b20      	cmp	r3, #32
 8003926:	d000      	beq.n	800392a <HAL_UART_Transmit+0x1a>
 8003928:	e096      	b.n	8003a58 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_UART_Transmit+0x28>
 8003930:	1dbb      	adds	r3, r7, #6
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e08e      	b.n	8003a5a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	2380      	movs	r3, #128	; 0x80
 8003942:	015b      	lsls	r3, r3, #5
 8003944:	429a      	cmp	r2, r3
 8003946:	d109      	bne.n	800395c <HAL_UART_Transmit+0x4c>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2201      	movs	r2, #1
 8003954:	4013      	ands	r3, r2
 8003956:	d001      	beq.n	800395c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e07e      	b.n	8003a5a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2274      	movs	r2, #116	; 0x74
 8003960:	5c9b      	ldrb	r3, [r3, r2]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d101      	bne.n	800396a <HAL_UART_Transmit+0x5a>
 8003966:	2302      	movs	r3, #2
 8003968:	e077      	b.n	8003a5a <HAL_UART_Transmit+0x14a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2274      	movs	r2, #116	; 0x74
 800396e:	2101      	movs	r1, #1
 8003970:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2280      	movs	r2, #128	; 0x80
 8003976:	2100      	movs	r1, #0
 8003978:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2221      	movs	r2, #33	; 0x21
 800397e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003980:	f7fd fb32 	bl	8000fe8 <HAL_GetTick>
 8003984:	0003      	movs	r3, r0
 8003986:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1dba      	adds	r2, r7, #6
 800398c:	2150      	movs	r1, #80	; 0x50
 800398e:	8812      	ldrh	r2, [r2, #0]
 8003990:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	1dba      	adds	r2, r7, #6
 8003996:	2152      	movs	r1, #82	; 0x52
 8003998:	8812      	ldrh	r2, [r2, #0]
 800399a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	015b      	lsls	r3, r3, #5
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d108      	bne.n	80039ba <HAL_UART_Transmit+0xaa>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	691b      	ldr	r3, [r3, #16]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d104      	bne.n	80039ba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	e003      	b.n	80039c2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2274      	movs	r2, #116	; 0x74
 80039c6:	2100      	movs	r1, #0
 80039c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80039ca:	e02d      	b.n	8003a28 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	0013      	movs	r3, r2
 80039d6:	2200      	movs	r2, #0
 80039d8:	2180      	movs	r1, #128	; 0x80
 80039da:	f000 fa69 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 80039de:	1e03      	subs	r3, r0, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e039      	b.n	8003a5a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10b      	bne.n	8003a04 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	881a      	ldrh	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	05d2      	lsls	r2, r2, #23
 80039f6:	0dd2      	lsrs	r2, r2, #23
 80039f8:	b292      	uxth	r2, r2
 80039fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	3302      	adds	r3, #2
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	e008      	b.n	8003a16 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	781a      	ldrb	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	b292      	uxth	r2, r2
 8003a0e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	3301      	adds	r3, #1
 8003a14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2252      	movs	r2, #82	; 0x52
 8003a1a:	5a9b      	ldrh	r3, [r3, r2]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	b299      	uxth	r1, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2252      	movs	r2, #82	; 0x52
 8003a26:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2252      	movs	r2, #82	; 0x52
 8003a2c:	5a9b      	ldrh	r3, [r3, r2]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1cb      	bne.n	80039cc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	0013      	movs	r3, r2
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2140      	movs	r1, #64	; 0x40
 8003a42:	f000 fa35 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 8003a46:	1e03      	subs	r3, r0, #0
 8003a48:	d001      	beq.n	8003a4e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e005      	b.n	8003a5a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b008      	add	sp, #32
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a6c:	231e      	movs	r3, #30
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	69db      	ldr	r3, [r3, #28]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a84      	ldr	r2, [pc, #528]	; (8003ca4 <UART_SetConfig+0x240>)
 8003a94:	4013      	ands	r3, r2
 8003a96:	0019      	movs	r1, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a7f      	ldr	r2, [pc, #508]	; (8003ca8 <UART_SetConfig+0x244>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	697a      	ldr	r2, [r7, #20]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	4a76      	ldr	r2, [pc, #472]	; (8003cac <UART_SetConfig+0x248>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae0:	4b73      	ldr	r3, [pc, #460]	; (8003cb0 <UART_SetConfig+0x24c>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b03      	cmp	r3, #3
 8003aea:	d00d      	beq.n	8003b08 <UART_SetConfig+0xa4>
 8003aec:	d81b      	bhi.n	8003b26 <UART_SetConfig+0xc2>
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d014      	beq.n	8003b1c <UART_SetConfig+0xb8>
 8003af2:	d818      	bhi.n	8003b26 <UART_SetConfig+0xc2>
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <UART_SetConfig+0x9a>
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d00a      	beq.n	8003b12 <UART_SetConfig+0xae>
 8003afc:	e013      	b.n	8003b26 <UART_SetConfig+0xc2>
 8003afe:	231f      	movs	r3, #31
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
 8003b06:	e012      	b.n	8003b2e <UART_SetConfig+0xca>
 8003b08:	231f      	movs	r3, #31
 8003b0a:	18fb      	adds	r3, r7, r3
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	701a      	strb	r2, [r3, #0]
 8003b10:	e00d      	b.n	8003b2e <UART_SetConfig+0xca>
 8003b12:	231f      	movs	r3, #31
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2204      	movs	r2, #4
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e008      	b.n	8003b2e <UART_SetConfig+0xca>
 8003b1c:	231f      	movs	r3, #31
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2208      	movs	r2, #8
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e003      	b.n	8003b2e <UART_SetConfig+0xca>
 8003b26:	231f      	movs	r3, #31
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	2210      	movs	r2, #16
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69da      	ldr	r2, [r3, #28]
 8003b34:	2380      	movs	r3, #128	; 0x80
 8003b36:	021b      	lsls	r3, r3, #8
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d15d      	bne.n	8003bf8 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003b3c:	231f      	movs	r3, #31
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d015      	beq.n	8003b72 <UART_SetConfig+0x10e>
 8003b46:	dc18      	bgt.n	8003b7a <UART_SetConfig+0x116>
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d00d      	beq.n	8003b68 <UART_SetConfig+0x104>
 8003b4c:	dc15      	bgt.n	8003b7a <UART_SetConfig+0x116>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <UART_SetConfig+0xf4>
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d005      	beq.n	8003b62 <UART_SetConfig+0xfe>
 8003b56:	e010      	b.n	8003b7a <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7fe f912 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	61bb      	str	r3, [r7, #24]
        break;
 8003b60:	e012      	b.n	8003b88 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b62:	4b54      	ldr	r3, [pc, #336]	; (8003cb4 <UART_SetConfig+0x250>)
 8003b64:	61bb      	str	r3, [r7, #24]
        break;
 8003b66:	e00f      	b.n	8003b88 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b68:	f7fe f89c 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	61bb      	str	r3, [r7, #24]
        break;
 8003b70:	e00a      	b.n	8003b88 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b72:	2380      	movs	r3, #128	; 0x80
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	61bb      	str	r3, [r7, #24]
        break;
 8003b78:	e006      	b.n	8003b88 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b7e:	231e      	movs	r3, #30
 8003b80:	18fb      	adds	r3, r7, r3
 8003b82:	2201      	movs	r2, #1
 8003b84:	701a      	strb	r2, [r3, #0]
        break;
 8003b86:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d100      	bne.n	8003b90 <UART_SetConfig+0x12c>
 8003b8e:	e07b      	b.n	8003c88 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	005a      	lsls	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	085b      	lsrs	r3, r3, #1
 8003b9a:	18d2      	adds	r2, r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	0010      	movs	r0, r2
 8003ba4:	f7fc fab8 	bl	8000118 <__udivsi3>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b0f      	cmp	r3, #15
 8003bb2:	d91c      	bls.n	8003bee <UART_SetConfig+0x18a>
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	2380      	movs	r3, #128	; 0x80
 8003bb8:	025b      	lsls	r3, r3, #9
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d217      	bcs.n	8003bee <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	200e      	movs	r0, #14
 8003bc4:	183b      	adds	r3, r7, r0
 8003bc6:	210f      	movs	r1, #15
 8003bc8:	438a      	bics	r2, r1
 8003bca:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2207      	movs	r2, #7
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	b299      	uxth	r1, r3
 8003bd8:	183b      	adds	r3, r7, r0
 8003bda:	183a      	adds	r2, r7, r0
 8003bdc:	8812      	ldrh	r2, [r2, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	183a      	adds	r2, r7, r0
 8003be8:	8812      	ldrh	r2, [r2, #0]
 8003bea:	60da      	str	r2, [r3, #12]
 8003bec:	e04c      	b.n	8003c88 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003bee:	231e      	movs	r3, #30
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e047      	b.n	8003c88 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bf8:	231f      	movs	r3, #31
 8003bfa:	18fb      	adds	r3, r7, r3
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b08      	cmp	r3, #8
 8003c00:	d015      	beq.n	8003c2e <UART_SetConfig+0x1ca>
 8003c02:	dc18      	bgt.n	8003c36 <UART_SetConfig+0x1d2>
 8003c04:	2b04      	cmp	r3, #4
 8003c06:	d00d      	beq.n	8003c24 <UART_SetConfig+0x1c0>
 8003c08:	dc15      	bgt.n	8003c36 <UART_SetConfig+0x1d2>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <UART_SetConfig+0x1b0>
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d005      	beq.n	8003c1e <UART_SetConfig+0x1ba>
 8003c12:	e010      	b.n	8003c36 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c14:	f7fe f8b4 	bl	8001d80 <HAL_RCC_GetPCLK1Freq>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e012      	b.n	8003c44 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c1e:	4b25      	ldr	r3, [pc, #148]	; (8003cb4 <UART_SetConfig+0x250>)
 8003c20:	61bb      	str	r3, [r7, #24]
        break;
 8003c22:	e00f      	b.n	8003c44 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c24:	f7fe f83e 	bl	8001ca4 <HAL_RCC_GetSysClockFreq>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	61bb      	str	r3, [r7, #24]
        break;
 8003c2c:	e00a      	b.n	8003c44 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	2380      	movs	r3, #128	; 0x80
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	61bb      	str	r3, [r7, #24]
        break;
 8003c34:	e006      	b.n	8003c44 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c3a:	231e      	movs	r3, #30
 8003c3c:	18fb      	adds	r3, r7, r3
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
        break;
 8003c42:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d01e      	beq.n	8003c88 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	085a      	lsrs	r2, r3, #1
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	18d2      	adds	r2, r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	0019      	movs	r1, r3
 8003c5a:	0010      	movs	r0, r2
 8003c5c:	f7fc fa5c 	bl	8000118 <__udivsi3>
 8003c60:	0003      	movs	r3, r0
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	2b0f      	cmp	r3, #15
 8003c6a:	d909      	bls.n	8003c80 <UART_SetConfig+0x21c>
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	2380      	movs	r3, #128	; 0x80
 8003c70:	025b      	lsls	r3, r3, #9
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d204      	bcs.n	8003c80 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	60da      	str	r2, [r3, #12]
 8003c7e:	e003      	b.n	8003c88 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003c80:	231e      	movs	r3, #30
 8003c82:	18fb      	adds	r3, r7, r3
 8003c84:	2201      	movs	r2, #1
 8003c86:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c94:	231e      	movs	r3, #30
 8003c96:	18fb      	adds	r3, r7, r3
 8003c98:	781b      	ldrb	r3, [r3, #0]
}
 8003c9a:	0018      	movs	r0, r3
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b008      	add	sp, #32
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	ffff69f3 	.word	0xffff69f3
 8003ca8:	ffffcfff 	.word	0xffffcfff
 8003cac:	fffff4ff 	.word	0xfffff4ff
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	007a1200 	.word	0x007a1200

08003cb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	d00b      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <UART_AdvFeatureConfig+0x144>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4a43      	ldr	r2, [pc, #268]	; (8003e00 <UART_AdvFeatureConfig+0x148>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	2204      	movs	r2, #4
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	4a3b      	ldr	r2, [pc, #236]	; (8003e04 <UART_AdvFeatureConfig+0x14c>)
 8003d16:	4013      	ands	r3, r2
 8003d18:	0019      	movs	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	2208      	movs	r2, #8
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	4a34      	ldr	r2, [pc, #208]	; (8003e08 <UART_AdvFeatureConfig+0x150>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	430a      	orrs	r2, r1
 8003d46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d00b      	beq.n	8003d6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a2c      	ldr	r2, [pc, #176]	; (8003e0c <UART_AdvFeatureConfig+0x154>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	2220      	movs	r2, #32
 8003d70:	4013      	ands	r3, r2
 8003d72:	d00b      	beq.n	8003d8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	4a25      	ldr	r2, [pc, #148]	; (8003e10 <UART_AdvFeatureConfig+0x158>)
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	0019      	movs	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2240      	movs	r2, #64	; 0x40
 8003d92:	4013      	ands	r3, r2
 8003d94:	d01d      	beq.n	8003dd2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	; (8003e14 <UART_AdvFeatureConfig+0x15c>)
 8003d9e:	4013      	ands	r3, r2
 8003da0:	0019      	movs	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	430a      	orrs	r2, r1
 8003dac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	035b      	lsls	r3, r3, #13
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d10b      	bne.n	8003dd2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	4a15      	ldr	r2, [pc, #84]	; (8003e18 <UART_AdvFeatureConfig+0x160>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	430a      	orrs	r2, r1
 8003dd0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	2280      	movs	r2, #128	; 0x80
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d00b      	beq.n	8003df4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	4a0e      	ldr	r2, [pc, #56]	; (8003e1c <UART_AdvFeatureConfig+0x164>)
 8003de4:	4013      	ands	r3, r2
 8003de6:	0019      	movs	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	605a      	str	r2, [r3, #4]
  }
}
 8003df4:	46c0      	nop			; (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	fffdffff 	.word	0xfffdffff
 8003e00:	fffeffff 	.word	0xfffeffff
 8003e04:	fffbffff 	.word	0xfffbffff
 8003e08:	ffff7fff 	.word	0xffff7fff
 8003e0c:	ffffefff 	.word	0xffffefff
 8003e10:	ffffdfff 	.word	0xffffdfff
 8003e14:	ffefffff 	.word	0xffefffff
 8003e18:	ff9fffff 	.word	0xff9fffff
 8003e1c:	fff7ffff 	.word	0xfff7ffff

08003e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2280      	movs	r2, #128	; 0x80
 8003e2c:	2100      	movs	r1, #0
 8003e2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e30:	f7fd f8da 	bl	8000fe8 <HAL_GetTick>
 8003e34:	0003      	movs	r3, r0
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2208      	movs	r2, #8
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b08      	cmp	r3, #8
 8003e44:	d10c      	bne.n	8003e60 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2280      	movs	r2, #128	; 0x80
 8003e4a:	0391      	lsls	r1, r2, #14
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4a17      	ldr	r2, [pc, #92]	; (8003eac <UART_CheckIdleState+0x8c>)
 8003e50:	9200      	str	r2, [sp, #0]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f000 f82c 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 8003e58:	1e03      	subs	r3, r0, #0
 8003e5a:	d001      	beq.n	8003e60 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e021      	b.n	8003ea4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	2204      	movs	r2, #4
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d10c      	bne.n	8003e88 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	03d1      	lsls	r1, r2, #15
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <UART_CheckIdleState+0x8c>)
 8003e78:	9200      	str	r2, [sp, #0]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f000 f818 	bl	8003eb0 <UART_WaitOnFlagUntilTimeout>
 8003e80:	1e03      	subs	r3, r0, #0
 8003e82:	d001      	beq.n	8003e88 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e00d      	b.n	8003ea4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2274      	movs	r2, #116	; 0x74
 8003e9e:	2100      	movs	r1, #0
 8003ea0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b004      	add	sp, #16
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	01ffffff 	.word	0x01ffffff

08003eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b094      	sub	sp, #80	; 0x50
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	1dfb      	adds	r3, r7, #7
 8003ebe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ec0:	e0a3      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ec2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	d100      	bne.n	8003eca <UART_WaitOnFlagUntilTimeout+0x1a>
 8003ec8:	e09f      	b.n	800400a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eca:	f7fd f88d 	bl	8000fe8 <HAL_GetTick>
 8003ece:	0002      	movs	r2, r0
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d13d      	bne.n	8003f5c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eea:	2301      	movs	r3, #1
 8003eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	494c      	ldr	r1, [pc, #304]	; (8004034 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003f02:	400a      	ands	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f08:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f12:	f3ef 8310 	mrs	r3, PRIMASK
 8003f16:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	438a      	bics	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2220      	movs	r2, #32
 8003f48:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2220      	movs	r2, #32
 8003f4e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2274      	movs	r2, #116	; 0x74
 8003f54:	2100      	movs	r1, #0
 8003f56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e067      	b.n	800402c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2204      	movs	r2, #4
 8003f64:	4013      	ands	r3, r2
 8003f66:	d050      	beq.n	800400a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	2380      	movs	r3, #128	; 0x80
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	401a      	ands	r2, r3
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	011b      	lsls	r3, r3, #4
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d146      	bne.n	800400a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	0112      	lsls	r2, r2, #4
 8003f84:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f86:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8a:	613b      	str	r3, [r7, #16]
  return(result);
 8003f8c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f90:	2301      	movs	r3, #1
 8003f92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4923      	ldr	r1, [pc, #140]	; (8004034 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003fa8:	400a      	ands	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	f383 8810 	msr	PRIMASK, r3
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fbe:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2101      	movs	r1, #1
 8003fda:	438a      	bics	r2, r1
 8003fdc:	609a      	str	r2, [r3, #8]
 8003fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe4:	f383 8810 	msr	PRIMASK, r3
}
 8003fe8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2280      	movs	r2, #128	; 0x80
 8003ffa:	2120      	movs	r1, #32
 8003ffc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2274      	movs	r2, #116	; 0x74
 8004002:	2100      	movs	r1, #0
 8004004:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e010      	b.n	800402c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	4013      	ands	r3, r2
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	425a      	negs	r2, r3
 800401a:	4153      	adcs	r3, r2
 800401c:	b2db      	uxtb	r3, r3
 800401e:	001a      	movs	r2, r3
 8004020:	1dfb      	adds	r3, r7, #7
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	429a      	cmp	r2, r3
 8004026:	d100      	bne.n	800402a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004028:	e74b      	b.n	8003ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b014      	add	sp, #80	; 0x50
 8004032:	bd80      	pop	{r7, pc}
 8004034:	fffffe5f 	.word	0xfffffe5f

08004038 <__libc_init_array>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	2600      	movs	r6, #0
 800403c:	4d0c      	ldr	r5, [pc, #48]	; (8004070 <__libc_init_array+0x38>)
 800403e:	4c0d      	ldr	r4, [pc, #52]	; (8004074 <__libc_init_array+0x3c>)
 8004040:	1b64      	subs	r4, r4, r5
 8004042:	10a4      	asrs	r4, r4, #2
 8004044:	42a6      	cmp	r6, r4
 8004046:	d109      	bne.n	800405c <__libc_init_array+0x24>
 8004048:	2600      	movs	r6, #0
 800404a:	f000 f821 	bl	8004090 <_init>
 800404e:	4d0a      	ldr	r5, [pc, #40]	; (8004078 <__libc_init_array+0x40>)
 8004050:	4c0a      	ldr	r4, [pc, #40]	; (800407c <__libc_init_array+0x44>)
 8004052:	1b64      	subs	r4, r4, r5
 8004054:	10a4      	asrs	r4, r4, #2
 8004056:	42a6      	cmp	r6, r4
 8004058:	d105      	bne.n	8004066 <__libc_init_array+0x2e>
 800405a:	bd70      	pop	{r4, r5, r6, pc}
 800405c:	00b3      	lsls	r3, r6, #2
 800405e:	58eb      	ldr	r3, [r5, r3]
 8004060:	4798      	blx	r3
 8004062:	3601      	adds	r6, #1
 8004064:	e7ee      	b.n	8004044 <__libc_init_array+0xc>
 8004066:	00b3      	lsls	r3, r6, #2
 8004068:	58eb      	ldr	r3, [r5, r3]
 800406a:	4798      	blx	r3
 800406c:	3601      	adds	r6, #1
 800406e:	e7f2      	b.n	8004056 <__libc_init_array+0x1e>
 8004070:	08004170 	.word	0x08004170
 8004074:	08004170 	.word	0x08004170
 8004078:	08004170 	.word	0x08004170
 800407c:	08004174 	.word	0x08004174

08004080 <memset>:
 8004080:	0003      	movs	r3, r0
 8004082:	1882      	adds	r2, r0, r2
 8004084:	4293      	cmp	r3, r2
 8004086:	d100      	bne.n	800408a <memset+0xa>
 8004088:	4770      	bx	lr
 800408a:	7019      	strb	r1, [r3, #0]
 800408c:	3301      	adds	r3, #1
 800408e:	e7f9      	b.n	8004084 <memset+0x4>

08004090 <_init>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr

0800409c <_fini>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr
