
final_course_work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fd8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004098  08004098  00014098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004160  08004160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004160  08004160  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004160  08004160  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004160  08004160  00014160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004164  08004164  00014164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08004174  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08004174  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3a0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7e  00000000  00000000  0002d3d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0002ee58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002f9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010287  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d31d  00000000  00000000  00040727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063f82  00000000  00000000  0004da44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b19c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002944  00000000  00000000  000b1a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004080 	.word	0x08004080

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004080 	.word	0x08004080

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <delay>:
 * ---------------------------------------
 */

// This function provides delay (in 1 / Timer_freq nanoseconds)
// delay must be < 65535
void delay(int delay) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if (delay > 0xFFFF)
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	025b      	lsls	r3, r3, #9
 800023e:	429a      	cmp	r2, r3
 8000240:	db01      	blt.n	8000246 <delay+0x16>
		delay = 0xFFFF;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <delay+0x38>)
 8000244:	607b      	str	r3, [r7, #4]
	(&htim16)->Instance->CNT = 0;
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <delay+0x3c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	2200      	movs	r2, #0
 800024c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((&htim16)->Instance->CNT < delay)
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	4b06      	ldr	r3, [pc, #24]	; (800026c <delay+0x3c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	429a      	cmp	r2, r3
 800025a:	d3f9      	bcc.n	8000250 <delay+0x20>
		;
}
 800025c:	46c0      	nop			; (mov r8, r8)
 800025e:	46c0      	nop			; (mov r8, r8)
 8000260:	46bd      	mov	sp, r7
 8000262:	b002      	add	sp, #8
 8000264:	bd80      	pop	{r7, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	0000ffff 	.word	0x0000ffff
 800026c:	20000168 	.word	0x20000168

08000270 <output>:
 * function use to print const strings in UART2
 * make print more coder friendly)
 *
 * @brief  pointer for string
 */
void output(char *string) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) string, strlen(string), 1000);
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	f7ff ff44 	bl	8000108 <strlen>
 8000280:	0003      	movs	r3, r0
 8000282:	b29a      	uxth	r2, r3
 8000284:	23fa      	movs	r3, #250	; 0xfa
 8000286:	009b      	lsls	r3, r3, #2
 8000288:	6879      	ldr	r1, [r7, #4]
 800028a:	4803      	ldr	r0, [pc, #12]	; (8000298 <output+0x28>)
 800028c:	f003 fb38 	bl	8003900 <HAL_UART_Transmit>
}
 8000290:	46c0      	nop			; (mov r8, r8)
 8000292:	46bd      	mov	sp, r7
 8000294:	b002      	add	sp, #8
 8000296:	bd80      	pop	{r7, pc}
 8000298:	2000009c 	.word	0x2000009c

0800029c <HAL_TIM_IC_CaptureCallback>:
 *
 * catch changing state of PWM channel
 * check period of signal to avoid interferences (should write else)
 * write rising times in bit array
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b086      	sub	sp, #24
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	4b25      	ldr	r3, [pc, #148]	; (800033c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80002a8:	429a      	cmp	r2, r3
 80002aa:	d143      	bne.n	8000334 <HAL_TIM_IC_CaptureCallback+0x98>
		int falling_edge = 0;
 80002ac:	2300      	movs	r3, #0
 80002ae:	617b      	str	r3, [r7, #20]
		int rising_edge = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	613b      	str	r3, [r7, #16]
		condition.callback_count += 1;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002b8:	1c5a      	adds	r2, r3, #1
 80002ba:	4b21      	ldr	r3, [pc, #132]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002bc:	625a      	str	r2, [r3, #36]	; 0x24

		falling_edge = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 80002be:	4b1f      	ldr	r3, [pc, #124]	; (800033c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80002c0:	2104      	movs	r1, #4
 80002c2:	0018      	movs	r0, r3
 80002c4:	f002 fd98 	bl	8002df8 <HAL_TIM_ReadCapturedValue>
 80002c8:	0003      	movs	r3, r0
 80002ca:	617b      	str	r3, [r7, #20]
		rising_edge = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 80002cc:	4b1b      	ldr	r3, [pc, #108]	; (800033c <HAL_TIM_IC_CaptureCallback+0xa0>)
 80002ce:	2100      	movs	r1, #0
 80002d0:	0018      	movs	r0, r3
 80002d2:	f002 fd91 	bl	8002df8 <HAL_TIM_ReadCapturedValue>
 80002d6:	0003      	movs	r3, r0
 80002d8:	613b      	str	r3, [r7, #16]
		if (condition.callback_count % 2 != 0
 80002da:	4b19      	ldr	r3, [pc, #100]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002de:	001a      	movs	r2, r3
 80002e0:	2301      	movs	r3, #1
 80002e2:	4013      	ands	r3, r2
 80002e4:	d020      	beq.n	8000328 <HAL_TIM_IC_CaptureCallback+0x8c>
				&& condition.callback_count != 1) {
 80002e6:	4b16      	ldr	r3, [pc, #88]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002ea:	2b01      	cmp	r3, #1
 80002ec:	d01c      	beq.n	8000328 <HAL_TIM_IC_CaptureCallback+0x8c>
			int period = rising_edge + falling_edge;
 80002ee:	693a      	ldr	r2, [r7, #16]
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	18d3      	adds	r3, r2, r3
 80002f4:	60fb      	str	r3, [r7, #12]
			if (period < T * 1.1 && period > T * 0.9) { // 10% gap for period
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	4a12      	ldr	r2, [pc, #72]	; (8000344 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	dc0f      	bgt.n	800031e <HAL_TIM_IC_CaptureCallback+0x82>
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	4a11      	ldr	r2, [pc, #68]	; (8000348 <HAL_TIM_IC_CaptureCallback+0xac>)
 8000302:	4293      	cmp	r3, r2
 8000304:	dd0b      	ble.n	800031e <HAL_TIM_IC_CaptureCallback+0x82>
				condition.bit[condition.bit_count] = rising_edge;
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000308:	6a1a      	ldr	r2, [r3, #32]
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800030c:	0092      	lsls	r2, r2, #2
 800030e:	6939      	ldr	r1, [r7, #16]
 8000310:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <HAL_TIM_IC_CaptureCallback+0xb0>)
 8000314:	2201      	movs	r2, #1
 8000316:	2140      	movs	r1, #64	; 0x40
 8000318:	0018      	movs	r0, r3
 800031a:	f001 f8b5 	bl	8001488 <HAL_GPIO_WritePin>
			}
			condition.bit_count += 1;
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000320:	6a1b      	ldr	r3, [r3, #32]
 8000322:	1c5a      	adds	r2, r3, #1
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000326:	621a      	str	r2, [r3, #32]
		}
		TIM3->CNT = 0;
 8000328:	4b09      	ldr	r3, [pc, #36]	; (8000350 <HAL_TIM_IC_CaptureCallback+0xb4>)
 800032a:	2200      	movs	r2, #0
 800032c:	625a      	str	r2, [r3, #36]	; 0x24
		TIM16->CNT = 0;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8000330:	2200      	movs	r2, #0
 8000332:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8000334:	46c0      	nop			; (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b006      	add	sp, #24
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000054 	.word	0x20000054
 8000340:	20000028 	.word	0x20000028
 8000344:	00004073 	.word	0x00004073
 8000348:	000034bc 	.word	0x000034bc
 800034c:	48000400 	.word	0x48000400
 8000350:	40000400 	.word	0x40000400
 8000354:	40014400 	.word	0x40014400

08000358 <HAL_TIM_PeriodElapsedCallback>:
 *
 * IDEL without catching any bit
 * Timer run function every period with or without information
 * function do nothing in this case
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) { // reading last bite of byte
 8000360:	687a      	ldr	r2, [r7, #4]
 8000362:	4b37      	ldr	r3, [pc, #220]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000364:	429a      	cmp	r2, r3
 8000366:	d167      	bne.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000368:	4b36      	ldr	r3, [pc, #216]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800036a:	2200      	movs	r2, #0
 800036c:	2140      	movs	r1, #64	; 0x40
 800036e:	0018      	movs	r0, r3
 8000370:	f001 f88a 	bl	8001488 <HAL_GPIO_WritePin>
		if (condition.bit_count == 7 && condition.callback_count > 1) {
 8000374:	4b34      	ldr	r3, [pc, #208]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	2b07      	cmp	r3, #7
 800037a:	d119      	bne.n	80003b0 <HAL_TIM_PeriodElapsedCallback+0x58>
 800037c:	4b32      	ldr	r3, [pc, #200]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800037e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000380:	2b01      	cmp	r3, #1
 8000382:	dd15      	ble.n	80003b0 <HAL_TIM_PeriodElapsedCallback+0x58>
			condition.bit[condition.bit_count] = HAL_TIM_ReadCapturedValue(
 8000384:	4b2e      	ldr	r3, [pc, #184]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000386:	2100      	movs	r1, #0
 8000388:	0018      	movs	r0, r3
 800038a:	f002 fd35 	bl	8002df8 <HAL_TIM_ReadCapturedValue>
 800038e:	0001      	movs	r1, r0
 8000390:	4b2d      	ldr	r3, [pc, #180]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000392:	6a1a      	ldr	r2, [r3, #32]
 8000394:	4b2c      	ldr	r3, [pc, #176]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000396:	0092      	lsls	r2, r2, #2
 8000398:	50d1      	str	r1, [r2, r3]
					&htim3, TIM_CHANNEL_1);

			display_pwm_information(condition.bit);
 800039a:	4b2b      	ldr	r3, [pc, #172]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800039c:	0018      	movs	r0, r3
 800039e:	f000 f85b 	bl	8000458 <display_pwm_information>

			condition.bit_count = 0;
 80003a2:	4b29      	ldr	r3, [pc, #164]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
			condition.callback_count = 0;
 80003a8:	4b27      	ldr	r3, [pc, #156]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	625a      	str	r2, [r3, #36]	; 0x24
 80003ae:	e043      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
//			condition.connect = 1;
		} else if (condition.callback_count > 1 && condition.bit_count < 7) { // when caught less then 8 bit before IDEL give message about lost byte
 80003b0:	4b25      	ldr	r3, [pc, #148]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	dd28      	ble.n	800040a <HAL_TIM_PeriodElapsedCallback+0xb2>
 80003b8:	4b23      	ldr	r3, [pc, #140]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	2b06      	cmp	r3, #6
 80003be:	dc24      	bgt.n	800040a <HAL_TIM_PeriodElapsedCallback+0xb2>
			output("#LOST BYTE#");
 80003c0:	4b22      	ldr	r3, [pc, #136]	; (800044c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ff54 	bl	8000270 <output>
			if (condition.callback_count % 2 != 0) {
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	001a      	movs	r2, r3
 80003ce:	2301      	movs	r3, #1
 80003d0:	4013      	ands	r3, r2
 80003d2:	d00d      	beq.n	80003f0 <HAL_TIM_PeriodElapsedCallback+0x98>
//				start_finish_connection();
				condition.bit_count = 0;
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	621a      	str	r2, [r3, #32]
				condition.callback_count = 0;
 80003da:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003dc:	2200      	movs	r2, #0
 80003de:	625a      	str	r2, [r3, #36]	; 0x24
				condition.connect = 0;
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	629a      	str	r2, [r3, #40]	; 0x28
				output(" # Disconnect\r\n");
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80003e8:	0018      	movs	r0, r3
 80003ea:	f7ff ff41 	bl	8000270 <output>
			if (condition.callback_count % 2 != 0) {
 80003ee:	e023      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
			} else {
				condition.bit_count = 0;
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	621a      	str	r2, [r3, #32]
				condition.callback_count = 0;
 80003f6:	4b14      	ldr	r3, [pc, #80]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80003fe:	2200      	movs	r2, #0
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	0018      	movs	r0, r3
 8000404:	f001 f840 	bl	8001488 <HAL_GPIO_WritePin>
			if (condition.callback_count % 2 != 0) {
 8000408:	e016      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
			}
		} else if (condition.callback_count == 1) { // turning on/off transiver state of channel change 0V -> 3.3V / 3.3V -> 0V
 800040a:	4b0f      	ldr	r3, [pc, #60]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800040c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800040e:	2b01      	cmp	r3, #1
 8000410:	d111      	bne.n	8000436 <HAL_TIM_PeriodElapsedCallback+0xde>
//			start_finish_connection();
			if (condition.connect == 1) {
 8000412:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000416:	2b01      	cmp	r3, #1
 8000418:	d106      	bne.n	8000428 <HAL_TIM_PeriodElapsedCallback+0xd0>
				output(" # Disconnection\r\n");
 800041a:	4b0e      	ldr	r3, [pc, #56]	; (8000454 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800041c:	0018      	movs	r0, r3
 800041e:	f7ff ff27 	bl	8000270 <output>
				condition.connect = 0;
 8000422:	4b09      	ldr	r3, [pc, #36]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000424:	2200      	movs	r2, #0
 8000426:	629a      	str	r2, [r3, #40]	; 0x28
			}
			condition.bit_count = 0;
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800042a:	2200      	movs	r2, #0
 800042c:	621a      	str	r2, [r3, #32]
			condition.callback_count = 0;
 800042e:	4b06      	ldr	r3, [pc, #24]	; (8000448 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000430:	2200      	movs	r2, #0
 8000432:	625a      	str	r2, [r3, #36]	; 0x24
 8000434:	e000      	b.n	8000438 <HAL_TIM_PeriodElapsedCallback+0xe0>
		} else
			// TIM run function every period ending
			return;
 8000436:	46c0      	nop			; (mov r8, r8)
	}
}
 8000438:	46bd      	mov	sp, r7
 800043a:	b002      	add	sp, #8
 800043c:	bd80      	pop	{r7, pc}
 800043e:	46c0      	nop			; (mov r8, r8)
 8000440:	20000054 	.word	0x20000054
 8000444:	48000400 	.word	0x48000400
 8000448:	20000028 	.word	0x20000028
 800044c:	08004098 	.word	0x08004098
 8000450:	080040a4 	.word	0x080040a4
 8000454:	080040b4 	.word	0x080040b4

08000458 <display_pwm_information>:
 *
 * receives int array contain 8 rising times
 * convert rising times to char and display it
 *
 */
void display_pwm_information(int *bit) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	char ch = rises_to_char(bit);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	0018      	movs	r0, r3
 8000464:	f000 f840 	bl	80004e8 <rises_to_char>
 8000468:	0003      	movs	r3, r0
 800046a:	001a      	movs	r2, r3
 800046c:	210f      	movs	r1, #15
 800046e:	187b      	adds	r3, r7, r1
 8000470:	701a      	strb	r2, [r3, #0]
	if (ch == '\r')
 8000472:	187b      	adds	r3, r7, r1
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b0d      	cmp	r3, #13
 8000478:	d103      	bne.n	8000482 <display_pwm_information+0x2a>
		output("\n");
 800047a:	4b16      	ldr	r3, [pc, #88]	; (80004d4 <display_pwm_information+0x7c>)
 800047c:	0018      	movs	r0, r3
 800047e:	f7ff fef7 	bl	8000270 <output>
	if (ch == SYN) {
 8000482:	230f      	movs	r3, #15
 8000484:	18fb      	adds	r3, r7, r3
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b16      	cmp	r3, #22
 800048a:	d106      	bne.n	800049a <display_pwm_information+0x42>
		output(" - Start connection...\r\n");
 800048c:	4b12      	ldr	r3, [pc, #72]	; (80004d8 <display_pwm_information+0x80>)
 800048e:	0018      	movs	r0, r3
 8000490:	f7ff feee 	bl	8000270 <output>
		connect();
 8000494:	f000 f85e 	bl	8000554 <connect>
		return;
 8000498:	e018      	b.n	80004cc <display_pwm_information+0x74>
	} else if (ch == ACK && condition.connect == -1) {
 800049a:	230f      	movs	r3, #15
 800049c:	18fb      	adds	r3, r7, r3
 800049e:	781b      	ldrb	r3, [r3, #0]
 80004a0:	2b06      	cmp	r3, #6
 80004a2:	d10b      	bne.n	80004bc <display_pwm_information+0x64>
 80004a4:	4b0d      	ldr	r3, [pc, #52]	; (80004dc <display_pwm_information+0x84>)
 80004a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004a8:	3301      	adds	r3, #1
 80004aa:	d107      	bne.n	80004bc <display_pwm_information+0x64>
		output(" - Device connected successfully\r\n");
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <display_pwm_information+0x88>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f7ff fede 	bl	8000270 <output>
		condition.connect = 1;
 80004b4:	4b09      	ldr	r3, [pc, #36]	; (80004dc <display_pwm_information+0x84>)
 80004b6:	2201      	movs	r2, #1
 80004b8:	629a      	str	r2, [r3, #40]	; 0x28
		return;
 80004ba:	e007      	b.n	80004cc <display_pwm_information+0x74>
	}
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 1000);
 80004bc:	23fa      	movs	r3, #250	; 0xfa
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	220f      	movs	r2, #15
 80004c2:	18b9      	adds	r1, r7, r2
 80004c4:	4807      	ldr	r0, [pc, #28]	; (80004e4 <display_pwm_information+0x8c>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	f003 fa1a 	bl	8003900 <HAL_UART_Transmit>
}
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b004      	add	sp, #16
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	080040c8 	.word	0x080040c8
 80004d8:	080040cc 	.word	0x080040cc
 80004dc:	20000028 	.word	0x20000028
 80004e0:	080040e8 	.word	0x080040e8
 80004e4:	2000009c 	.word	0x2000009c

080004e8 <rises_to_char>:

/* function return char from 8 rising times array
 * bit - pointer to 8 rising times array contain 8 bits
 * If rising time more then 50% period then this is a 1, else 0
 */
char rises_to_char(int *bit) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	char c = 0;
 80004f0:	2317      	movs	r3, #23
 80004f2:	18fb      	adds	r3, r7, r3
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
	for (int i = 0, rank = 128; i < 8 && rank > 0; i++, rank /= 2) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	613b      	str	r3, [r7, #16]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e018      	b.n	8000534 <rises_to_char+0x4c>
		if (bit[i] > T * 0.5)
 8000502:	693b      	ldr	r3, [r7, #16]
 8000504:	009b      	lsls	r3, r3, #2
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	18d3      	adds	r3, r2, r3
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a10      	ldr	r2, [pc, #64]	; (8000550 <rises_to_char+0x68>)
 800050e:	4293      	cmp	r3, r2
 8000510:	dd07      	ble.n	8000522 <rises_to_char+0x3a>
			c += rank;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	b2d9      	uxtb	r1, r3
 8000516:	2217      	movs	r2, #23
 8000518:	18bb      	adds	r3, r7, r2
 800051a:	18ba      	adds	r2, r7, r2
 800051c:	7812      	ldrb	r2, [r2, #0]
 800051e:	188a      	adds	r2, r1, r2
 8000520:	701a      	strb	r2, [r3, #0]
	for (int i = 0, rank = 128; i < 8 && rank > 0; i++, rank /= 2) {
 8000522:	693b      	ldr	r3, [r7, #16]
 8000524:	3301      	adds	r3, #1
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	da00      	bge.n	8000530 <rises_to_char+0x48>
 800052e:	3301      	adds	r3, #1
 8000530:	105b      	asrs	r3, r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	2b07      	cmp	r3, #7
 8000538:	dc02      	bgt.n	8000540 <rises_to_char+0x58>
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2b00      	cmp	r3, #0
 800053e:	dce0      	bgt.n	8000502 <rises_to_char+0x1a>
	}
	return c;
 8000540:	2317      	movs	r3, #23
 8000542:	18fb      	adds	r3, r7, r3
 8000544:	781b      	ldrb	r3, [r3, #0]
}
 8000546:	0018      	movs	r0, r3
 8000548:	46bd      	mov	sp, r7
 800054a:	b006      	add	sp, #24
 800054c:	bd80      	pop	{r7, pc}
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	00001d4c 	.word	0x00001d4c

08000554 <connect>:
//<------------------- TRANCIVER CODE ---------------------->
void togglepin(uint8_t value);
void delay(int delay);
void send_value_pwm(char ch);

void connect(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

//	turning off receiver timers
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000558:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <connect+0x80>)
 800055a:	2100      	movs	r1, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f002 f84f 	bl	8002600 <HAL_TIM_IC_Stop_IT>
	HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <connect+0x80>)
 8000564:	2104      	movs	r1, #4
 8000566:	0018      	movs	r0, r3
 8000568:	f002 f84a 	bl	8002600 <HAL_TIM_IC_Stop_IT>
	delay(10 * T);
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <connect+0x84>)
 800056e:	0018      	movs	r0, r3
 8000570:	f7ff fe5e 	bl	8000230 <delay>
//	turning on tranceiver timers
	TIM1->ARR = COUNTER;
 8000574:	4b19      	ldr	r3, [pc, #100]	; (80005dc <connect+0x88>)
 8000576:	4a1a      	ldr	r2, [pc, #104]	; (80005e0 <connect+0x8c>)
 8000578:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR2 = COUNTER + 1;
 800057a:	4b18      	ldr	r3, [pc, #96]	; (80005dc <connect+0x88>)
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <connect+0x90>)
 800057e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <connect+0x94>)
 8000582:	2104      	movs	r1, #4
 8000584:	0018      	movs	r0, r3
 8000586:	f001 fdc5 	bl	8002114 <HAL_TIM_PWM_Start>

	delay(10 * T);
 800058a:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <connect+0x84>)
 800058c:	0018      	movs	r0, r3
 800058e:	f7ff fe4f 	bl	8000230 <delay>
	send_value_pwm(SYN);
 8000592:	2016      	movs	r0, #22
 8000594:	f000 f82e 	bl	80005f4 <send_value_pwm>
	send_value_pwm(ACK);
 8000598:	2006      	movs	r0, #6
 800059a:	f000 f82b 	bl	80005f4 <send_value_pwm>
//	delay(10 * T);
//	turning off tranceiver timers
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 800059e:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <connect+0x94>)
 80005a0:	2104      	movs	r1, #4
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fe5c 	bl	8002260 <HAL_TIM_PWM_Stop>
//	turning on receiver timers
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <connect+0x80>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	0018      	movs	r0, r3
 80005ae:	f001 ff25 	bl	80023fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <connect+0x80>)
 80005b4:	2104      	movs	r1, #4
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 ff20 	bl	80023fc <HAL_TIM_IC_Start_IT>

//	delay(10 * T);
	output(" - Wait\r\n");
 80005bc:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <connect+0x98>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff fe56 	bl	8000270 <output>
	condition.connect = -1;
 80005c4:	4b0a      	ldr	r3, [pc, #40]	; (80005f0 <connect+0x9c>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	4252      	negs	r2, r2
 80005ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005cc:	46c0      	nop			; (mov r8, r8)
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	20000054 	.word	0x20000054
 80005d8:	000249f0 	.word	0x000249f0
 80005dc:	40012c00 	.word	0x40012c00
 80005e0:	00001388 	.word	0x00001388
 80005e4:	00001389 	.word	0x00001389
 80005e8:	20000120 	.word	0x20000120
 80005ec:	0800410c 	.word	0x0800410c
 80005f0:	20000028 	.word	0x20000028

080005f4 <send_value_pwm>:

void send_value_pwm(char ch) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	0002      	movs	r2, r0
 80005fc:	1dfb      	adds	r3, r7, #7
 80005fe:	701a      	strb	r2, [r3, #0]
	for (char div = 128; div > 0; div /= 2) {
 8000600:	230f      	movs	r3, #15
 8000602:	18fb      	adds	r3, r7, r3
 8000604:	2280      	movs	r2, #128	; 0x80
 8000606:	701a      	strb	r2, [r3, #0]
 8000608:	e01a      	b.n	8000640 <send_value_pwm+0x4c>
		if (ch >= div) {    // 1
 800060a:	1dfa      	adds	r2, r7, #7
 800060c:	200f      	movs	r0, #15
 800060e:	183b      	adds	r3, r7, r0
 8000610:	7812      	ldrb	r2, [r2, #0]
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	429a      	cmp	r2, r3
 8000616:	d30a      	bcc.n	800062e <send_value_pwm+0x3a>
			ch -= div;
 8000618:	1dfb      	adds	r3, r7, #7
 800061a:	1df9      	adds	r1, r7, #7
 800061c:	183a      	adds	r2, r7, r0
 800061e:	7809      	ldrb	r1, [r1, #0]
 8000620:	7812      	ldrb	r2, [r2, #0]
 8000622:	1a8a      	subs	r2, r1, r2
 8000624:	701a      	strb	r2, [r3, #0]
			togglepin(1);
 8000626:	2001      	movs	r0, #1
 8000628:	f000 f81a 	bl	8000660 <togglepin>
 800062c:	e002      	b.n	8000634 <send_value_pwm+0x40>
//			output("1");
		} else {
			togglepin(0);
 800062e:	2000      	movs	r0, #0
 8000630:	f000 f816 	bl	8000660 <togglepin>
	for (char div = 128; div > 0; div /= 2) {
 8000634:	220f      	movs	r2, #15
 8000636:	18bb      	adds	r3, r7, r2
 8000638:	18ba      	adds	r2, r7, r2
 800063a:	7812      	ldrb	r2, [r2, #0]
 800063c:	0852      	lsrs	r2, r2, #1
 800063e:	701a      	strb	r2, [r3, #0]
 8000640:	230f      	movs	r3, #15
 8000642:	18fb      	adds	r3, r7, r3
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d1df      	bne.n	800060a <send_value_pwm+0x16>
//			output("0");
		}
	}
	delay(T);
 800064a:	4b04      	ldr	r3, [pc, #16]	; (800065c <send_value_pwm+0x68>)
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff fdef 	bl	8000230 <delay>
}
 8000652:	46c0      	nop			; (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b004      	add	sp, #16
 8000658:	bd80      	pop	{r7, pc}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	00003a98 	.word	0x00003a98

08000660 <togglepin>:

void togglepin(uint8_t value) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	0002      	movs	r2, r0
 8000668:	1dfb      	adds	r3, r7, #7
 800066a:	701a      	strb	r2, [r3, #0]
//	turning off pin
	TIM1->CCR2 = 0;
 800066c:	4b17      	ldr	r3, [pc, #92]	; (80006cc <togglepin+0x6c>)
 800066e:	2200      	movs	r2, #0
 8000670:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CNT = COUNTER;
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <togglepin+0x6c>)
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <togglepin+0x70>)
 8000676:	625a      	str	r2, [r3, #36]	; 0x24
	if (value == 1) {
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b01      	cmp	r3, #1
 800067e:	d10e      	bne.n	800069e <togglepin+0x3e>
		delay(T * 0.8);
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <togglepin+0x74>)
 8000682:	0018      	movs	r0, r3
 8000684:	f7ff fdd4 	bl	8000230 <delay>
		//	turning on pin
		TIM1->CCR2 = COUNTER + 1;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <togglepin+0x6c>)
 800068a:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <togglepin+0x78>)
 800068c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CNT = COUNTER;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <togglepin+0x6c>)
 8000690:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <togglepin+0x70>)
 8000692:	625a      	str	r2, [r3, #36]	; 0x24
		delay(T * 0.2);
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <togglepin+0x7c>)
 8000696:	0018      	movs	r0, r3
 8000698:	f7ff fdca 	bl	8000230 <delay>
 800069c:	e013      	b.n	80006c6 <togglepin+0x66>
	} else if (value == 0) {
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d10e      	bne.n	80006c4 <togglepin+0x64>
		delay(T * 0.2);
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <togglepin+0x7c>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff fdc1 	bl	8000230 <delay>
		//	turning on pin
		TIM1->CCR2 = COUNTER + 1;
 80006ae:	4b07      	ldr	r3, [pc, #28]	; (80006cc <togglepin+0x6c>)
 80006b0:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <togglepin+0x78>)
 80006b2:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CNT = COUNTER;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <togglepin+0x6c>)
 80006b6:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <togglepin+0x70>)
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24
		delay(T * 0.8);
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <togglepin+0x74>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f7ff fdb7 	bl	8000230 <delay>
 80006c2:	e000      	b.n	80006c6 <togglepin+0x66>
	} else
		return;
 80006c4:	46c0      	nop			; (mov r8, r8)
}
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40012c00 	.word	0x40012c00
 80006d0:	00001388 	.word	0x00001388
 80006d4:	00002ee0 	.word	0x00002ee0
 80006d8:	00001389 	.word	0x00001389
 80006dc:	00000bb8 	.word	0x00000bb8

080006e0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006e4:	f000 fc1e 	bl	8000f24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006e8:	f000 f83c 	bl	8000764 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006ec:	f000 fa34 	bl	8000b58 <MX_GPIO_Init>
	MX_TIM16_Init();
 80006f0:	f000 f9da 	bl	8000aa8 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 80006f4:	f000 fa00 	bl	8000af8 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 80006f8:	f000 f896 	bl	8000828 <MX_TIM1_Init>
	MX_TIM3_Init();
 80006fc:	f000 f948 	bl	8000990 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

//	timer for read values
	TIM3->ARR = T;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <main+0x6c>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <main+0x70>)
 8000704:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <main+0x74>)
 8000708:	2100      	movs	r1, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f001 fe76 	bl	80023fc <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000710:	4b10      	ldr	r3, [pc, #64]	; (8000754 <main+0x74>)
 8000712:	2104      	movs	r1, #4
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fe71 	bl	80023fc <HAL_TIM_IC_Start_IT>

// start TIM3 again to catch IDEL after empty period
	HAL_TIM_Base_Start_IT(&htim3);
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <main+0x74>)
 800071c:	0018      	movs	r0, r3
 800071e:	f001 fc5b 	bl	8001fd8 <HAL_TIM_Base_Start_IT>

	TIM3->ARR = T;
 8000722:	4b0a      	ldr	r3, [pc, #40]	; (800074c <main+0x6c>)
 8000724:	4a0a      	ldr	r2, [pc, #40]	; (8000750 <main+0x70>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c

//	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
//	TIM1->ARR = T;

// Timer for calculating delays
	HAL_TIM_Base_Start_IT(&htim16);
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <main+0x78>)
 800072a:	0018      	movs	r0, r3
 800072c:	f001 fc54 	bl	8001fd8 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	output("Still work\r\n");
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <main+0x7c>)
 8000732:	0018      	movs	r0, r3
 8000734:	f7ff fd9c 	bl	8000270 <output>
	condition.callback_count = 0;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <main+0x80>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
	condition.bit_count = 0;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <main+0x80>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
	condition.connect = 0;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <main+0x80>)
 8000746:	2200      	movs	r2, #0
 8000748:	629a      	str	r2, [r3, #40]	; 0x28

	while (1) {
 800074a:	e7fe      	b.n	800074a <main+0x6a>
 800074c:	40000400 	.word	0x40000400
 8000750:	00003a98 	.word	0x00003a98
 8000754:	20000054 	.word	0x20000054
 8000758:	20000168 	.word	0x20000168
 800075c:	08004118 	.word	0x08004118
 8000760:	20000028 	.word	0x20000028

08000764 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b095      	sub	sp, #84	; 0x54
 8000768:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800076a:	2420      	movs	r4, #32
 800076c:	193b      	adds	r3, r7, r4
 800076e:	0018      	movs	r0, r3
 8000770:	2330      	movs	r3, #48	; 0x30
 8000772:	001a      	movs	r2, r3
 8000774:	2100      	movs	r1, #0
 8000776:	f003 fc7b 	bl	8004070 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800077a:	2310      	movs	r3, #16
 800077c:	18fb      	adds	r3, r7, r3
 800077e:	0018      	movs	r0, r3
 8000780:	2310      	movs	r3, #16
 8000782:	001a      	movs	r2, r3
 8000784:	2100      	movs	r1, #0
 8000786:	f003 fc73 	bl	8004070 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800078a:	003b      	movs	r3, r7
 800078c:	0018      	movs	r0, r3
 800078e:	2310      	movs	r3, #16
 8000790:	001a      	movs	r2, r3
 8000792:	2100      	movs	r1, #0
 8000794:	f003 fc6c 	bl	8004070 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	0021      	movs	r1, r4
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2202      	movs	r2, #2
 800079e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007a0:	187b      	adds	r3, r7, r1
 80007a2:	2201      	movs	r2, #1
 80007a4:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2210      	movs	r2, #16
 80007aa:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2202      	movs	r2, #2
 80007b0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	22a0      	movs	r2, #160	; 0xa0
 80007bc:	0392      	lsls	r2, r2, #14
 80007be:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2200      	movs	r2, #0
 80007c4:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	0018      	movs	r0, r3
 80007ca:	f000 fe7b 	bl	80014c4 <HAL_RCC_OscConfig>
 80007ce:	1e03      	subs	r3, r0, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x72>
		Error_Handler();
 80007d2:	f000 fa09 	bl	8000be8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007d6:	2110      	movs	r1, #16
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2207      	movs	r2, #7
 80007dc:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2202      	movs	r2, #2
 80007e2:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80007f0:	187b      	adds	r3, r7, r1
 80007f2:	2101      	movs	r1, #1
 80007f4:	0018      	movs	r0, r3
 80007f6:	f001 f97f 	bl	8001af8 <HAL_RCC_ClockConfig>
 80007fa:	1e03      	subs	r3, r0, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x9e>
		Error_Handler();
 80007fe:	f000 f9f3 	bl	8000be8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000802:	003b      	movs	r3, r7
 8000804:	2201      	movs	r2, #1
 8000806:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000808:	003b      	movs	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	f001 fac3 	bl	8001d9c <HAL_RCCEx_PeriphCLKConfig>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d001      	beq.n	800081e <SystemClock_Config+0xba>
		Error_Handler();
 800081a:	f000 f9e5 	bl	8000be8 <Error_Handler>
	}
}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b015      	add	sp, #84	; 0x54
 8000824:	bd90      	pop	{r4, r7, pc}
	...

08000828 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000828:	b580      	push	{r7, lr}
 800082a:	b096      	sub	sp, #88	; 0x58
 800082c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800082e:	2348      	movs	r3, #72	; 0x48
 8000830:	18fb      	adds	r3, r7, r3
 8000832:	0018      	movs	r0, r3
 8000834:	2310      	movs	r3, #16
 8000836:	001a      	movs	r2, r3
 8000838:	2100      	movs	r1, #0
 800083a:	f003 fc19 	bl	8004070 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800083e:	2340      	movs	r3, #64	; 0x40
 8000840:	18fb      	adds	r3, r7, r3
 8000842:	0018      	movs	r0, r3
 8000844:	2308      	movs	r3, #8
 8000846:	001a      	movs	r2, r3
 8000848:	2100      	movs	r1, #0
 800084a:	f003 fc11 	bl	8004070 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800084e:	2324      	movs	r3, #36	; 0x24
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	0018      	movs	r0, r3
 8000854:	231c      	movs	r3, #28
 8000856:	001a      	movs	r2, r3
 8000858:	2100      	movs	r1, #0
 800085a:	f003 fc09 	bl	8004070 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	0018      	movs	r0, r3
 8000862:	2320      	movs	r3, #32
 8000864:	001a      	movs	r2, r3
 8000866:	2100      	movs	r1, #0
 8000868:	f003 fc02 	bl	8004070 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800086c:	4b46      	ldr	r3, [pc, #280]	; (8000988 <MX_TIM1_Init+0x160>)
 800086e:	4a47      	ldr	r2, [pc, #284]	; (800098c <MX_TIM1_Init+0x164>)
 8000870:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 12 - 1;
 8000872:	4b45      	ldr	r3, [pc, #276]	; (8000988 <MX_TIM1_Init+0x160>)
 8000874:	220b      	movs	r2, #11
 8000876:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000878:	4b43      	ldr	r3, [pc, #268]	; (8000988 <MX_TIM1_Init+0x160>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 800087e:	4b42      	ldr	r3, [pc, #264]	; (8000988 <MX_TIM1_Init+0x160>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000884:	4b40      	ldr	r3, [pc, #256]	; (8000988 <MX_TIM1_Init+0x160>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800088a:	4b3f      	ldr	r3, [pc, #252]	; (8000988 <MX_TIM1_Init+0x160>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000890:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <MX_TIM1_Init+0x160>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000896:	4b3c      	ldr	r3, [pc, #240]	; (8000988 <MX_TIM1_Init+0x160>)
 8000898:	0018      	movs	r0, r3
 800089a:	f001 fb4d 	bl	8001f38 <HAL_TIM_Base_Init>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM1_Init+0x7e>
		Error_Handler();
 80008a2:	f000 f9a1 	bl	8000be8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a6:	2148      	movs	r1, #72	; 0x48
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	0152      	lsls	r2, r2, #5
 80008ae:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80008b0:	187a      	adds	r2, r7, r1
 80008b2:	4b35      	ldr	r3, [pc, #212]	; (8000988 <MX_TIM1_Init+0x160>)
 80008b4:	0011      	movs	r1, r2
 80008b6:	0018      	movs	r0, r3
 80008b8:	f002 f9ca 	bl	8002c50 <HAL_TIM_ConfigClockSource>
 80008bc:	1e03      	subs	r3, r0, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM1_Init+0x9c>
		Error_Handler();
 80008c0:	f000 f992 	bl	8000be8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80008c4:	4b30      	ldr	r3, [pc, #192]	; (8000988 <MX_TIM1_Init+0x160>)
 80008c6:	0018      	movs	r0, r3
 80008c8:	f001 fbcc 	bl	8002064 <HAL_TIM_PWM_Init>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM1_Init+0xac>
		Error_Handler();
 80008d0:	f000 f98a 	bl	8000be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2140      	movs	r1, #64	; 0x40
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80008e2:	187a      	adds	r2, r7, r1
 80008e4:	4b28      	ldr	r3, [pc, #160]	; (8000988 <MX_TIM1_Init+0x160>)
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f002 fef5 	bl	80036d8 <HAL_TIMEx_MasterConfigSynchronization>
 80008ee:	1e03      	subs	r3, r0, #0
 80008f0:	d001      	beq.n	80008f6 <MX_TIM1_Init+0xce>
			!= HAL_OK) {
		Error_Handler();
 80008f2:	f000 f979 	bl	8000be8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f6:	2124      	movs	r1, #36	; 0x24
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2260      	movs	r2, #96	; 0x60
 80008fc:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000910:	187b      	adds	r3, r7, r1
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000916:	187b      	adds	r3, r7, r1
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800091c:	187b      	adds	r3, r7, r1
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000922:	1879      	adds	r1, r7, r1
 8000924:	4b18      	ldr	r3, [pc, #96]	; (8000988 <MX_TIM1_Init+0x160>)
 8000926:	2204      	movs	r2, #4
 8000928:	0018      	movs	r0, r3
 800092a:	f002 f8cb 	bl	8002ac4 <HAL_TIM_PWM_ConfigChannel>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x10e>
			!= HAL_OK) {
		Error_Handler();
 8000932:	f000 f959 	bl	8000be8 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2280      	movs	r2, #128	; 0x80
 8000958:	0192      	lsls	r2, r2, #6
 800095a:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800095c:	1d3b      	adds	r3, r7, #4
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000962:	1d3a      	adds	r2, r7, #4
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <MX_TIM1_Init+0x160>)
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f002 ff07 	bl	800377c <HAL_TIMEx_ConfigBreakDeadTime>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x14e>
			!= HAL_OK) {
		Error_Handler();
 8000972:	f000 f939 	bl	8000be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <MX_TIM1_Init+0x160>)
 8000978:	0018      	movs	r0, r3
 800097a:	f000 f9e7 	bl	8000d4c <HAL_TIM_MspPostInit>

}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b016      	add	sp, #88	; 0x58
 8000984:	bd80      	pop	{r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	20000120 	.word	0x20000120
 800098c:	40012c00 	.word	0x40012c00

08000990 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000996:	2318      	movs	r3, #24
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	0018      	movs	r0, r3
 800099c:	2310      	movs	r3, #16
 800099e:	001a      	movs	r2, r3
 80009a0:	2100      	movs	r1, #0
 80009a2:	f003 fb65 	bl	8004070 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009a6:	2310      	movs	r3, #16
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	0018      	movs	r0, r3
 80009ac:	2308      	movs	r3, #8
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f003 fb5d 	bl	8004070 <memset>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80009b6:	003b      	movs	r3, r7
 80009b8:	0018      	movs	r0, r3
 80009ba:	2310      	movs	r3, #16
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f003 fb56 	bl	8004070 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80009c4:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <MX_TIM3_Init+0x10c>)
 80009c6:	4a36      	ldr	r2, [pc, #216]	; (8000aa0 <MX_TIM3_Init+0x110>)
 80009c8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 12 - 1;
 80009ca:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <MX_TIM3_Init+0x10c>)
 80009cc:	220b      	movs	r2, #11
 80009ce:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b32      	ldr	r3, [pc, #200]	; (8000a9c <MX_TIM3_Init+0x10c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 80009d6:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <MX_TIM3_Init+0x10c>)
 80009d8:	4a32      	ldr	r2, [pc, #200]	; (8000aa4 <MX_TIM3_Init+0x114>)
 80009da:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <MX_TIM3_Init+0x10c>)
 80009de:	2200      	movs	r2, #0
 80009e0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <MX_TIM3_Init+0x10c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80009e8:	4b2c      	ldr	r3, [pc, #176]	; (8000a9c <MX_TIM3_Init+0x10c>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 faa4 	bl	8001f38 <HAL_TIM_Base_Init>
 80009f0:	1e03      	subs	r3, r0, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM3_Init+0x68>
		Error_Handler();
 80009f4:	f000 f8f8 	bl	8000be8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	2118      	movs	r1, #24
 80009fa:	187b      	adds	r3, r7, r1
 80009fc:	2280      	movs	r2, #128	; 0x80
 80009fe:	0152      	lsls	r2, r2, #5
 8000a00:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000a02:	187a      	adds	r2, r7, r1
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_TIM3_Init+0x10c>)
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f002 f921 	bl	8002c50 <HAL_TIM_ConfigClockSource>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <MX_TIM3_Init+0x86>
		Error_Handler();
 8000a12:	f000 f8e9 	bl	8000be8 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_TIM3_Init+0x10c>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 fc97 	bl	800234c <HAL_TIM_IC_Init>
 8000a1e:	1e03      	subs	r3, r0, #0
 8000a20:	d001      	beq.n	8000a26 <MX_TIM3_Init+0x96>
		Error_Handler();
 8000a22:	f000 f8e1 	bl	8000be8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a26:	2110      	movs	r1, #16
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	2200      	movs	r2, #0
 8000a32:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000a34:	187a      	adds	r2, r7, r1
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <MX_TIM3_Init+0x10c>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f002 fe4c 	bl	80036d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	1e03      	subs	r3, r0, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000a44:	f000 f8d0 	bl	8000be8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000a48:	003b      	movs	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a4e:	003b      	movs	r3, r7
 8000a50:	2201      	movs	r2, #1
 8000a52:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a54:	003b      	movs	r3, r7
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000a60:	0039      	movs	r1, r7
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <MX_TIM3_Init+0x10c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f001 ff88 	bl	800297c <HAL_TIM_IC_ConfigChannel>
 8000a6c:	1e03      	subs	r3, r0, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM3_Init+0xe4>
		Error_Handler();
 8000a70:	f000 f8ba 	bl	8000be8 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2202      	movs	r2, #2
 8000a78:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8000a80:	0039      	movs	r1, r7
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <MX_TIM3_Init+0x10c>)
 8000a84:	2204      	movs	r2, #4
 8000a86:	0018      	movs	r0, r3
 8000a88:	f001 ff78 	bl	800297c <HAL_TIM_IC_ConfigChannel>
 8000a8c:	1e03      	subs	r3, r0, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0x104>
		Error_Handler();
 8000a90:	f000 f8aa 	bl	8000be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b00a      	add	sp, #40	; 0x28
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000054 	.word	0x20000054
 8000aa0:	40000400 	.word	0x40000400
 8000aa4:	0000ffff 	.word	0x0000ffff

08000aa8 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_TIM16_Init+0x44>)
 8000aae:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <MX_TIM16_Init+0x48>)
 8000ab0:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 12 - 1;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_TIM16_Init+0x44>)
 8000ab4:	220b      	movs	r2, #11
 8000ab6:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_TIM16_Init+0x44>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_TIM16_Init+0x44>)
 8000ac0:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <MX_TIM16_Init+0x4c>)
 8000ac2:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_TIM16_Init+0x44>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_TIM16_Init+0x44>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_TIM16_Init+0x44>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <MX_TIM16_Init+0x44>)
 8000ad8:	0018      	movs	r0, r3
 8000ada:	f001 fa2d 	bl	8001f38 <HAL_TIM_Base_Init>
 8000ade:	1e03      	subs	r3, r0, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM16_Init+0x3e>
		Error_Handler();
 8000ae2:	f000 f881 	bl	8000be8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	20000168 	.word	0x20000168
 8000af0:	40014400 	.word	0x40014400
 8000af4:	0000ffff 	.word	0x0000ffff

08000af8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000afc:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000afe:	4a15      	ldr	r2, [pc, #84]	; (8000b54 <MX_USART1_UART_Init+0x5c>)
 8000b00:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000b02:	4b13      	ldr	r3, [pc, #76]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b04:	22e1      	movs	r2, #225	; 0xe1
 8000b06:	0252      	lsls	r2, r2, #9
 8000b08:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b0b      	ldr	r3, [pc, #44]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b2e:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <MX_USART1_UART_Init+0x58>)
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f002 fe8b 	bl	8003858 <HAL_UART_Init>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000b46:	f000 f84f 	bl	8000be8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000009c 	.word	0x2000009c
 8000b54:	40013800 	.word	0x40013800

08000b58 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b089      	sub	sp, #36	; 0x24
 8000b5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b5e:	240c      	movs	r4, #12
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	0018      	movs	r0, r3
 8000b64:	2314      	movs	r3, #20
 8000b66:	001a      	movs	r2, r3
 8000b68:	2100      	movs	r1, #0
 8000b6a:	f003 fa81 	bl	8004070 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <MX_GPIO_Init+0x88>)
 8000b70:	695a      	ldr	r2, [r3, #20]
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_GPIO_Init+0x88>)
 8000b74:	2180      	movs	r1, #128	; 0x80
 8000b76:	0289      	lsls	r1, r1, #10
 8000b78:	430a      	orrs	r2, r1
 8000b7a:	615a      	str	r2, [r3, #20]
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_GPIO_Init+0x88>)
 8000b7e:	695a      	ldr	r2, [r3, #20]
 8000b80:	2380      	movs	r3, #128	; 0x80
 8000b82:	029b      	lsls	r3, r3, #10
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_GPIO_Init+0x88>)
 8000b8c:	695a      	ldr	r2, [r3, #20]
 8000b8e:	4b14      	ldr	r3, [pc, #80]	; (8000be0 <MX_GPIO_Init+0x88>)
 8000b90:	2180      	movs	r1, #128	; 0x80
 8000b92:	02c9      	lsls	r1, r1, #11
 8000b94:	430a      	orrs	r2, r1
 8000b96:	615a      	str	r2, [r3, #20]
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_GPIO_Init+0x88>)
 8000b9a:	695a      	ldr	r2, [r3, #20]
 8000b9c:	2380      	movs	r3, #128	; 0x80
 8000b9e:	02db      	lsls	r3, r3, #11
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_GPIO_Init+0x8c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2140      	movs	r1, #64	; 0x40
 8000bac:	0018      	movs	r0, r3
 8000bae:	f000 fc6b 	bl	8001488 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2240      	movs	r2, #64	; 0x40
 8000bb8:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2200      	movs	r2, #0
 8000bca:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	187b      	adds	r3, r7, r1
 8000bce:	4a05      	ldr	r2, [pc, #20]	; (8000be4 <MX_GPIO_Init+0x8c>)
 8000bd0:	0019      	movs	r1, r3
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	f000 fae8 	bl	80011a8 <HAL_GPIO_Init>

}
 8000bd8:	46c0      	nop			; (mov r8, r8)
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b009      	add	sp, #36	; 0x24
 8000bde:	bd90      	pop	{r4, r7, pc}
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400

08000be8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bec:	b672      	cpsid	i
}
 8000bee:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000bf0:	e7fe      	b.n	8000bf0 <Error_Handler+0x8>
	...

08000bf4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <HAL_MspInit+0x44>)
 8000bfc:	699a      	ldr	r2, [r3, #24]
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_MspInit+0x44>)
 8000c00:	2101      	movs	r1, #1
 8000c02:	430a      	orrs	r2, r1
 8000c04:	619a      	str	r2, [r3, #24]
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_MspInit+0x44>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	607b      	str	r3, [r7, #4]
 8000c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_MspInit+0x44>)
 8000c14:	69da      	ldr	r2, [r3, #28]
 8000c16:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_MspInit+0x44>)
 8000c18:	2180      	movs	r1, #128	; 0x80
 8000c1a:	0549      	lsls	r1, r1, #21
 8000c1c:	430a      	orrs	r2, r1
 8000c1e:	61da      	str	r2, [r3, #28]
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_MspInit+0x44>)
 8000c22:	69da      	ldr	r2, [r3, #28]
 8000c24:	2380      	movs	r3, #128	; 0x80
 8000c26:	055b      	lsls	r3, r3, #21
 8000c28:	4013      	ands	r3, r2
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	40021000 	.word	0x40021000

08000c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	; 0x30
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	231c      	movs	r3, #28
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2314      	movs	r3, #20
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f003 fa0e 	bl	8004070 <memset>
  if(htim_base->Instance==TIM1)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a37      	ldr	r2, [pc, #220]	; (8000d38 <HAL_TIM_Base_MspInit+0xfc>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d116      	bne.n	8000c8c <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c5e:	4b37      	ldr	r3, [pc, #220]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000c60:	699a      	ldr	r2, [r3, #24]
 8000c62:	4b36      	ldr	r3, [pc, #216]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000c64:	2180      	movs	r1, #128	; 0x80
 8000c66:	0109      	lsls	r1, r1, #4
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	619a      	str	r2, [r3, #24]
 8000c6c:	4b33      	ldr	r3, [pc, #204]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000c6e:	699a      	ldr	r2, [r3, #24]
 8000c70:	2380      	movs	r3, #128	; 0x80
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	200e      	movs	r0, #14
 8000c80:	f000 fa60 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000c84:	200e      	movs	r0, #14
 8000c86:	f000 fa72 	bl	800116e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000c8a:	e050      	b.n	8000d2e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a2b      	ldr	r2, [pc, #172]	; (8000d40 <HAL_TIM_Base_MspInit+0x104>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d138      	bne.n	8000d08 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c96:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000c98:	69da      	ldr	r2, [r3, #28]
 8000c9a:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000c9c:	2102      	movs	r1, #2
 8000c9e:	430a      	orrs	r2, r1
 8000ca0:	61da      	str	r2, [r3, #28]
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000ca4:	69db      	ldr	r3, [r3, #28]
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	4013      	ands	r3, r2
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	02c9      	lsls	r1, r1, #11
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	02db      	lsls	r3, r3, #11
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cca:	211c      	movs	r1, #28
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2210      	movs	r2, #16
 8000cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	187b      	adds	r3, r7, r1
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000ce4:	187b      	adds	r3, r7, r1
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cea:	187b      	adds	r3, r7, r1
 8000cec:	4a15      	ldr	r2, [pc, #84]	; (8000d44 <HAL_TIM_Base_MspInit+0x108>)
 8000cee:	0019      	movs	r1, r3
 8000cf0:	0010      	movs	r0, r2
 8000cf2:	f000 fa59 	bl	80011a8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	2010      	movs	r0, #16
 8000cfc:	f000 fa22 	bl	8001144 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d00:	2010      	movs	r0, #16
 8000d02:	f000 fa34 	bl	800116e <HAL_NVIC_EnableIRQ>
}
 8000d06:	e012      	b.n	8000d2e <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM16)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <HAL_TIM_Base_MspInit+0x10c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d10d      	bne.n	8000d2e <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000d14:	699a      	ldr	r2, [r3, #24]
 8000d16:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	0289      	lsls	r1, r1, #10
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	619a      	str	r2, [r3, #24]
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_TIM_Base_MspInit+0x100>)
 8000d22:	699a      	ldr	r2, [r3, #24]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	46bd      	mov	sp, r7
 8000d32:	b00c      	add	sp, #48	; 0x30
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	40012c00 	.word	0x40012c00
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40000400 	.word	0x40000400
 8000d44:	48000400 	.word	0x48000400
 8000d48:	40014400 	.word	0x40014400

08000d4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d54:	240c      	movs	r4, #12
 8000d56:	193b      	adds	r3, r7, r4
 8000d58:	0018      	movs	r0, r3
 8000d5a:	2314      	movs	r3, #20
 8000d5c:	001a      	movs	r2, r3
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f003 f986 	bl	8004070 <memset>
  if(htim->Instance==TIM1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <HAL_TIM_MspPostInit+0x78>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d125      	bne.n	8000dba <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_TIM_MspPostInit+0x7c>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	4b15      	ldr	r3, [pc, #84]	; (8000dc8 <HAL_TIM_MspPostInit+0x7c>)
 8000d74:	2180      	movs	r1, #128	; 0x80
 8000d76:	0289      	lsls	r1, r1, #10
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	615a      	str	r2, [r3, #20]
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_TIM_MspPostInit+0x7c>)
 8000d7e:	695a      	ldr	r2, [r3, #20]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	0092      	lsls	r2, r2, #2
 8000d90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d92:	0021      	movs	r1, r4
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2202      	movs	r2, #2
 8000d98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2202      	movs	r2, #2
 8000daa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	187a      	adds	r2, r7, r1
 8000dae:	2390      	movs	r3, #144	; 0x90
 8000db0:	05db      	lsls	r3, r3, #23
 8000db2:	0011      	movs	r1, r2
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 f9f7 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000dba:	46c0      	nop			; (mov r8, r8)
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	b009      	add	sp, #36	; 0x24
 8000dc0:	bd90      	pop	{r4, r7, pc}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	40012c00 	.word	0x40012c00
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b08b      	sub	sp, #44	; 0x2c
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	2414      	movs	r4, #20
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	0018      	movs	r0, r3
 8000dda:	2314      	movs	r3, #20
 8000ddc:	001a      	movs	r2, r3
 8000dde:	2100      	movs	r1, #0
 8000de0:	f003 f946 	bl	8004070 <memset>
  if(huart->Instance==USART1)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a1c      	ldr	r2, [pc, #112]	; (8000e5c <HAL_UART_MspInit+0x90>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d132      	bne.n	8000e54 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_UART_MspInit+0x94>)
 8000df0:	699a      	ldr	r2, [r3, #24]
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_UART_MspInit+0x94>)
 8000df4:	2180      	movs	r1, #128	; 0x80
 8000df6:	01c9      	lsls	r1, r1, #7
 8000df8:	430a      	orrs	r2, r1
 8000dfa:	619a      	str	r2, [r3, #24]
 8000dfc:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_UART_MspInit+0x94>)
 8000dfe:	699a      	ldr	r2, [r3, #24]
 8000e00:	2380      	movs	r3, #128	; 0x80
 8000e02:	01db      	lsls	r3, r3, #7
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_UART_MspInit+0x94>)
 8000e0c:	695a      	ldr	r2, [r3, #20]
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_UART_MspInit+0x94>)
 8000e10:	2180      	movs	r1, #128	; 0x80
 8000e12:	0289      	lsls	r1, r1, #10
 8000e14:	430a      	orrs	r2, r1
 8000e16:	615a      	str	r2, [r3, #20]
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_UART_MspInit+0x94>)
 8000e1a:	695a      	ldr	r2, [r3, #20]
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	029b      	lsls	r3, r3, #10
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e26:	0021      	movs	r1, r4
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2202      	movs	r2, #2
 8000e32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	2201      	movs	r2, #1
 8000e44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	187a      	adds	r2, r7, r1
 8000e48:	2390      	movs	r3, #144	; 0x90
 8000e4a:	05db      	lsls	r3, r3, #23
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f000 f9aa 	bl	80011a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b00b      	add	sp, #44	; 0x2c
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	40013800 	.word	0x40013800
 8000e60:	40021000 	.word	0x40021000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e88:	f000 f894 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e98:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <TIM1_CC_IRQHandler+0x14>)
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f001 fc58 	bl	8002750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	20000120 	.word	0x20000120

08000eac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000eb0:	4b03      	ldr	r3, [pc, #12]	; (8000ec0 <TIM3_IRQHandler+0x14>)
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 fc4c 	bl	8002750 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	46c0      	nop			; (mov r8, r8)
 8000ec0:	20000054 	.word	0x20000054

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <Reset_Handler>:
 8000ed0:	480d      	ldr	r0, [pc, #52]	; (8000f08 <LoopForever+0x2>)
 8000ed2:	4685      	mov	sp, r0
 8000ed4:	480d      	ldr	r0, [pc, #52]	; (8000f0c <LoopForever+0x6>)
 8000ed6:	490e      	ldr	r1, [pc, #56]	; (8000f10 <LoopForever+0xa>)
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	; (8000f14 <LoopForever+0xe>)
 8000eda:	2300      	movs	r3, #0
 8000edc:	e002      	b.n	8000ee4 <LoopCopyDataInit>

08000ede <CopyDataInit>:
 8000ede:	58d4      	ldr	r4, [r2, r3]
 8000ee0:	50c4      	str	r4, [r0, r3]
 8000ee2:	3304      	adds	r3, #4

08000ee4 <LoopCopyDataInit>:
 8000ee4:	18c4      	adds	r4, r0, r3
 8000ee6:	428c      	cmp	r4, r1
 8000ee8:	d3f9      	bcc.n	8000ede <CopyDataInit>
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <LoopForever+0x12>)
 8000eec:	4c0b      	ldr	r4, [pc, #44]	; (8000f1c <LoopForever+0x16>)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e001      	b.n	8000ef6 <LoopFillZerobss>

08000ef2 <FillZerobss>:
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	3204      	adds	r2, #4

08000ef6 <LoopFillZerobss>:
 8000ef6:	42a2      	cmp	r2, r4
 8000ef8:	d3fb      	bcc.n	8000ef2 <FillZerobss>
 8000efa:	f7ff ffe3 	bl	8000ec4 <SystemInit>
 8000efe:	f003 f893 	bl	8004028 <__libc_init_array>
 8000f02:	f7ff fbed 	bl	80006e0 <main>

08000f06 <LoopForever>:
 8000f06:	e7fe      	b.n	8000f06 <LoopForever>
 8000f08:	20001000 	.word	0x20001000
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	08004168 	.word	0x08004168
 8000f18:	2000000c 	.word	0x2000000c
 8000f1c:	200001b4 	.word	0x200001b4

08000f20 <ADC1_IRQHandler>:
 8000f20:	e7fe      	b.n	8000f20 <ADC1_IRQHandler>
	...

08000f24 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_Init+0x24>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_Init+0x24>)
 8000f2e:	2110      	movs	r1, #16
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f809 	bl	8000f4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3a:	f7ff fe5b 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	0018      	movs	r0, r3
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	40022000 	.word	0x40022000

08000f4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f4c:	b590      	push	{r4, r7, lr}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f54:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <HAL_InitTick+0x5c>)
 8000f56:	681c      	ldr	r4, [r3, #0]
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_InitTick+0x60>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	0019      	movs	r1, r3
 8000f5e:	23fa      	movs	r3, #250	; 0xfa
 8000f60:	0098      	lsls	r0, r3, #2
 8000f62:	f7ff f8d9 	bl	8000118 <__udivsi3>
 8000f66:	0003      	movs	r3, r0
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0020      	movs	r0, r4
 8000f6c:	f7ff f8d4 	bl	8000118 <__udivsi3>
 8000f70:	0003      	movs	r3, r0
 8000f72:	0018      	movs	r0, r3
 8000f74:	f000 f90b 	bl	800118e <HAL_SYSTICK_Config>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	e00f      	b.n	8000fa0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d80b      	bhi.n	8000f9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	2301      	movs	r3, #1
 8000f8a:	425b      	negs	r3, r3
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	0018      	movs	r0, r3
 8000f90:	f000 f8d8 	bl	8001144 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_InitTick+0x64>)
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd90      	pop	{r4, r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	20000004 	.word	0x20000004

08000fb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	18d2      	adds	r2, r2, r3
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	200001b0 	.word	0x200001b0

08000fd8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_GetTick+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	46c0      	nop			; (mov r8, r8)
 8000fe8:	200001b0 	.word	0x200001b0

08000fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	0002      	movs	r2, r0
 8000ff4:	1dfb      	adds	r3, r7, #7
 8000ff6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ffe:	d809      	bhi.n	8001014 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	001a      	movs	r2, r3
 8001006:	231f      	movs	r3, #31
 8001008:	401a      	ands	r2, r3
 800100a:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_EnableIRQ+0x30>)
 800100c:	2101      	movs	r1, #1
 800100e:	4091      	lsls	r1, r2
 8001010:	000a      	movs	r2, r1
 8001012:	601a      	str	r2, [r3, #0]
  }
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b002      	add	sp, #8
 800101a:	bd80      	pop	{r7, pc}
 800101c:	e000e100 	.word	0xe000e100

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	0002      	movs	r2, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	1dfb      	adds	r3, r7, #7
 800102c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b7f      	cmp	r3, #127	; 0x7f
 8001034:	d828      	bhi.n	8001088 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001036:	4a2f      	ldr	r2, [pc, #188]	; (80010f4 <__NVIC_SetPriority+0xd4>)
 8001038:	1dfb      	adds	r3, r7, #7
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b25b      	sxtb	r3, r3
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	33c0      	adds	r3, #192	; 0xc0
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	589b      	ldr	r3, [r3, r2]
 8001046:	1dfa      	adds	r2, r7, #7
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	0011      	movs	r1, r2
 800104c:	2203      	movs	r2, #3
 800104e:	400a      	ands	r2, r1
 8001050:	00d2      	lsls	r2, r2, #3
 8001052:	21ff      	movs	r1, #255	; 0xff
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	43d2      	mvns	r2, r2
 800105a:	401a      	ands	r2, r3
 800105c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	019b      	lsls	r3, r3, #6
 8001062:	22ff      	movs	r2, #255	; 0xff
 8001064:	401a      	ands	r2, r3
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	0018      	movs	r0, r3
 800106c:	2303      	movs	r3, #3
 800106e:	4003      	ands	r3, r0
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001074:	481f      	ldr	r0, [pc, #124]	; (80010f4 <__NVIC_SetPriority+0xd4>)
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	b25b      	sxtb	r3, r3
 800107c:	089b      	lsrs	r3, r3, #2
 800107e:	430a      	orrs	r2, r1
 8001080:	33c0      	adds	r3, #192	; 0xc0
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001086:	e031      	b.n	80010ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001088:	4a1b      	ldr	r2, [pc, #108]	; (80010f8 <__NVIC_SetPriority+0xd8>)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0019      	movs	r1, r3
 8001090:	230f      	movs	r3, #15
 8001092:	400b      	ands	r3, r1
 8001094:	3b08      	subs	r3, #8
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3306      	adds	r3, #6
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	18d3      	adds	r3, r2, r3
 800109e:	3304      	adds	r3, #4
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	0011      	movs	r1, r2
 80010a8:	2203      	movs	r2, #3
 80010aa:	400a      	ands	r2, r1
 80010ac:	00d2      	lsls	r2, r2, #3
 80010ae:	21ff      	movs	r1, #255	; 0xff
 80010b0:	4091      	lsls	r1, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	401a      	ands	r2, r3
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	2303      	movs	r3, #3
 80010ca:	4003      	ands	r3, r0
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	4809      	ldr	r0, [pc, #36]	; (80010f8 <__NVIC_SetPriority+0xd8>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	001c      	movs	r4, r3
 80010d8:	230f      	movs	r3, #15
 80010da:	4023      	ands	r3, r4
 80010dc:	3b08      	subs	r3, #8
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	430a      	orrs	r2, r1
 80010e2:	3306      	adds	r3, #6
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	18c3      	adds	r3, r0, r3
 80010e8:	3304      	adds	r3, #4
 80010ea:	601a      	str	r2, [r3, #0]
}
 80010ec:	46c0      	nop			; (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b003      	add	sp, #12
 80010f2:	bd90      	pop	{r4, r7, pc}
 80010f4:	e000e100 	.word	0xe000e100
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	1e5a      	subs	r2, r3, #1
 8001108:	2380      	movs	r3, #128	; 0x80
 800110a:	045b      	lsls	r3, r3, #17
 800110c:	429a      	cmp	r2, r3
 800110e:	d301      	bcc.n	8001114 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001110:	2301      	movs	r3, #1
 8001112:	e010      	b.n	8001136 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <SysTick_Config+0x44>)
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	3a01      	subs	r2, #1
 800111a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111c:	2301      	movs	r3, #1
 800111e:	425b      	negs	r3, r3
 8001120:	2103      	movs	r1, #3
 8001122:	0018      	movs	r0, r3
 8001124:	f7ff ff7c 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SysTick_Config+0x44>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	4b04      	ldr	r3, [pc, #16]	; (8001140 <SysTick_Config+0x44>)
 8001130:	2207      	movs	r2, #7
 8001132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001134:	2300      	movs	r3, #0
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	b002      	add	sp, #8
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	e000e010 	.word	0xe000e010

08001144 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	210f      	movs	r1, #15
 8001150:	187b      	adds	r3, r7, r1
 8001152:	1c02      	adds	r2, r0, #0
 8001154:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	187b      	adds	r3, r7, r1
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b25b      	sxtb	r3, r3
 800115e:	0011      	movs	r1, r2
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ff5d 	bl	8001020 <__NVIC_SetPriority>
}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	46bd      	mov	sp, r7
 800116a:	b004      	add	sp, #16
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b082      	sub	sp, #8
 8001172:	af00      	add	r7, sp, #0
 8001174:	0002      	movs	r2, r0
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b25b      	sxtb	r3, r3
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff ff33 	bl	8000fec <__NVIC_EnableIRQ>
}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	46bd      	mov	sp, r7
 800118a:	b002      	add	sp, #8
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	0018      	movs	r0, r3
 800119a:	f7ff ffaf 	bl	80010fc <SysTick_Config>
 800119e:	0003      	movs	r3, r0
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	b002      	add	sp, #8
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b6:	e14f      	b.n	8001458 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	4091      	lsls	r1, r2
 80011c2:	000a      	movs	r2, r1
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d100      	bne.n	80011d0 <HAL_GPIO_Init+0x28>
 80011ce:	e140      	b.n	8001452 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d005      	beq.n	80011e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	2203      	movs	r2, #3
 80011e2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d130      	bne.n	800124a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	2203      	movs	r2, #3
 80011f4:	409a      	lsls	r2, r3
 80011f6:	0013      	movs	r3, r2
 80011f8:	43da      	mvns	r2, r3
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	4013      	ands	r3, r2
 80011fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68da      	ldr	r2, [r3, #12]
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	409a      	lsls	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800121e:	2201      	movs	r2, #1
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	43da      	mvns	r2, r3
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	091b      	lsrs	r3, r3, #4
 8001234:	2201      	movs	r2, #1
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
 800123c:	0013      	movs	r3, r2
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2203      	movs	r2, #3
 8001250:	4013      	ands	r3, r2
 8001252:	2b03      	cmp	r3, #3
 8001254:	d017      	beq.n	8001286 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	2203      	movs	r2, #3
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	43da      	mvns	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	4013      	ands	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	409a      	lsls	r2, r3
 8001278:	0013      	movs	r3, r2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	4013      	ands	r3, r2
 800128e:	2b02      	cmp	r3, #2
 8001290:	d123      	bne.n	80012da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	58d3      	ldr	r3, [r2, r3]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	2207      	movs	r2, #7
 80012a4:	4013      	ands	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	220f      	movs	r2, #15
 80012aa:	409a      	lsls	r2, r3
 80012ac:	0013      	movs	r3, r2
 80012ae:	43da      	mvns	r2, r3
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	691a      	ldr	r2, [r3, #16]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	2107      	movs	r1, #7
 80012be:	400b      	ands	r3, r1
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	409a      	lsls	r2, r3
 80012c4:	0013      	movs	r3, r2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	08da      	lsrs	r2, r3, #3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3208      	adds	r2, #8
 80012d4:	0092      	lsls	r2, r2, #2
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	2203      	movs	r2, #3
 80012e6:	409a      	lsls	r2, r3
 80012e8:	0013      	movs	r3, r2
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	401a      	ands	r2, r3
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	409a      	lsls	r2, r3
 8001300:	0013      	movs	r3, r2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	693a      	ldr	r2, [r7, #16]
 800130c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	23c0      	movs	r3, #192	; 0xc0
 8001314:	029b      	lsls	r3, r3, #10
 8001316:	4013      	ands	r3, r2
 8001318:	d100      	bne.n	800131c <HAL_GPIO_Init+0x174>
 800131a:	e09a      	b.n	8001452 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	4b53      	ldr	r3, [pc, #332]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 8001322:	2101      	movs	r1, #1
 8001324:	430a      	orrs	r2, r1
 8001326:	619a      	str	r2, [r3, #24]
 8001328:	4b51      	ldr	r3, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x2c8>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	2201      	movs	r2, #1
 800132e:	4013      	ands	r3, r2
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x2cc>)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	3302      	adds	r3, #2
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	589b      	ldr	r3, [r3, r2]
 8001340:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	2203      	movs	r2, #3
 8001346:	4013      	ands	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	409a      	lsls	r2, r3
 800134e:	0013      	movs	r3, r2
 8001350:	43da      	mvns	r2, r3
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	2390      	movs	r3, #144	; 0x90
 800135c:	05db      	lsls	r3, r3, #23
 800135e:	429a      	cmp	r2, r3
 8001360:	d013      	beq.n	800138a <HAL_GPIO_Init+0x1e2>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a44      	ldr	r2, [pc, #272]	; (8001478 <HAL_GPIO_Init+0x2d0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d00d      	beq.n	8001386 <HAL_GPIO_Init+0x1de>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a43      	ldr	r2, [pc, #268]	; (800147c <HAL_GPIO_Init+0x2d4>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d007      	beq.n	8001382 <HAL_GPIO_Init+0x1da>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a42      	ldr	r2, [pc, #264]	; (8001480 <HAL_GPIO_Init+0x2d8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d101      	bne.n	800137e <HAL_GPIO_Init+0x1d6>
 800137a:	2303      	movs	r3, #3
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x1e4>
 800137e:	2305      	movs	r3, #5
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x1e4>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x1e4>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x1e4>
 800138a:	2300      	movs	r3, #0
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	2103      	movs	r1, #3
 8001390:	400a      	ands	r2, r1
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800139c:	4935      	ldr	r1, [pc, #212]	; (8001474 <HAL_GPIO_Init+0x2cc>)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	43da      	mvns	r2, r3
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4013      	ands	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	025b      	lsls	r3, r3, #9
 80013c2:	4013      	ands	r3, r2
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	43da      	mvns	r2, r3
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685a      	ldr	r2, [r3, #4]
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	029b      	lsls	r3, r3, #10
 80013ec:	4013      	ands	r3, r2
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013f8:	4b22      	ldr	r3, [pc, #136]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	43da      	mvns	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	035b      	lsls	r3, r3, #13
 8001416:	4013      	ands	r3, r2
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001422:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001428:	4b16      	ldr	r3, [pc, #88]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43da      	mvns	r2, r3
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	039b      	lsls	r3, r3, #14
 8001440:	4013      	ands	r3, r2
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800144c:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_GPIO_Init+0x2dc>)
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	3301      	adds	r3, #1
 8001456:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	40da      	lsrs	r2, r3
 8001460:	1e13      	subs	r3, r2, #0
 8001462:	d000      	beq.n	8001466 <HAL_GPIO_Init+0x2be>
 8001464:	e6a8      	b.n	80011b8 <HAL_GPIO_Init+0x10>
  } 
}
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	46c0      	nop			; (mov r8, r8)
 800146a:	46bd      	mov	sp, r7
 800146c:	b006      	add	sp, #24
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000
 8001478:	48000400 	.word	0x48000400
 800147c:	48000800 	.word	0x48000800
 8001480:	48000c00 	.word	0x48000c00
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	0008      	movs	r0, r1
 8001492:	0011      	movs	r1, r2
 8001494:	1cbb      	adds	r3, r7, #2
 8001496:	1c02      	adds	r2, r0, #0
 8001498:	801a      	strh	r2, [r3, #0]
 800149a:	1c7b      	adds	r3, r7, #1
 800149c:	1c0a      	adds	r2, r1, #0
 800149e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014a0:	1c7b      	adds	r3, r7, #1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d004      	beq.n	80014b2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014a8:	1cbb      	adds	r3, r7, #2
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b0:	e003      	b.n	80014ba <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b2:	1cbb      	adds	r3, r7, #2
 80014b4:	881a      	ldrh	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	46bd      	mov	sp, r7
 80014be:	b002      	add	sp, #8
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b088      	sub	sp, #32
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d101      	bne.n	80014d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e301      	b.n	8001ada <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2201      	movs	r2, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	d100      	bne.n	80014e2 <HAL_RCC_OscConfig+0x1e>
 80014e0:	e08d      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014e2:	4bc3      	ldr	r3, [pc, #780]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	220c      	movs	r2, #12
 80014e8:	4013      	ands	r3, r2
 80014ea:	2b04      	cmp	r3, #4
 80014ec:	d00e      	beq.n	800150c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014ee:	4bc0      	ldr	r3, [pc, #768]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	220c      	movs	r2, #12
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d116      	bne.n	8001528 <HAL_RCC_OscConfig+0x64>
 80014fa:	4bbd      	ldr	r3, [pc, #756]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	025b      	lsls	r3, r3, #9
 8001502:	401a      	ands	r2, r3
 8001504:	2380      	movs	r3, #128	; 0x80
 8001506:	025b      	lsls	r3, r3, #9
 8001508:	429a      	cmp	r2, r3
 800150a:	d10d      	bne.n	8001528 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4bb8      	ldr	r3, [pc, #736]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d100      	bne.n	800151a <HAL_RCC_OscConfig+0x56>
 8001518:	e070      	b.n	80015fc <HAL_RCC_OscConfig+0x138>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d000      	beq.n	8001524 <HAL_RCC_OscConfig+0x60>
 8001522:	e06b      	b.n	80015fc <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e2d8      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x7c>
 8001530:	4baf      	ldr	r3, [pc, #700]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4bae      	ldr	r3, [pc, #696]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0249      	lsls	r1, r1, #9
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e02f      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10c      	bne.n	8001562 <HAL_RCC_OscConfig+0x9e>
 8001548:	4ba9      	ldr	r3, [pc, #676]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	4ba8      	ldr	r3, [pc, #672]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800154e:	49a9      	ldr	r1, [pc, #676]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001550:	400a      	ands	r2, r1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	4ba6      	ldr	r3, [pc, #664]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4ba5      	ldr	r3, [pc, #660]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800155a:	49a7      	ldr	r1, [pc, #668]	; (80017f8 <HAL_RCC_OscConfig+0x334>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	e01e      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d10e      	bne.n	8001588 <HAL_RCC_OscConfig+0xc4>
 800156a:	4ba1      	ldr	r3, [pc, #644]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4ba0      	ldr	r3, [pc, #640]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001570:	2180      	movs	r1, #128	; 0x80
 8001572:	02c9      	lsls	r1, r1, #11
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	4b9d      	ldr	r3, [pc, #628]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b9c      	ldr	r3, [pc, #624]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800157e:	2180      	movs	r1, #128	; 0x80
 8001580:	0249      	lsls	r1, r1, #9
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e00b      	b.n	80015a0 <HAL_RCC_OscConfig+0xdc>
 8001588:	4b99      	ldr	r3, [pc, #612]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b98      	ldr	r3, [pc, #608]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800158e:	4999      	ldr	r1, [pc, #612]	; (80017f4 <HAL_RCC_OscConfig+0x330>)
 8001590:	400a      	ands	r2, r1
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	4b96      	ldr	r3, [pc, #600]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b95      	ldr	r3, [pc, #596]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800159a:	4997      	ldr	r1, [pc, #604]	; (80017f8 <HAL_RCC_OscConfig+0x334>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d014      	beq.n	80015d2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a8:	f7ff fd16 	bl	8000fd8 <HAL_GetTick>
 80015ac:	0003      	movs	r3, r0
 80015ae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b2:	f7ff fd11 	bl	8000fd8 <HAL_GetTick>
 80015b6:	0002      	movs	r2, r0
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b64      	cmp	r3, #100	; 0x64
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e28a      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c4:	4b8a      	ldr	r3, [pc, #552]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	029b      	lsls	r3, r3, #10
 80015cc:	4013      	ands	r3, r2
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0xee>
 80015d0:	e015      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d2:	f7ff fd01 	bl	8000fd8 <HAL_GetTick>
 80015d6:	0003      	movs	r3, r0
 80015d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff fcfc 	bl	8000fd8 <HAL_GetTick>
 80015e0:	0002      	movs	r2, r0
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	; 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e275      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b80      	ldr	r3, [pc, #512]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	029b      	lsls	r3, r3, #10
 80015f6:	4013      	ands	r3, r2
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x118>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2202      	movs	r2, #2
 8001604:	4013      	ands	r3, r2
 8001606:	d100      	bne.n	800160a <HAL_RCC_OscConfig+0x146>
 8001608:	e069      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800160a:	4b79      	ldr	r3, [pc, #484]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	220c      	movs	r2, #12
 8001610:	4013      	ands	r3, r2
 8001612:	d00b      	beq.n	800162c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001614:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	220c      	movs	r2, #12
 800161a:	4013      	ands	r3, r2
 800161c:	2b08      	cmp	r3, #8
 800161e:	d11c      	bne.n	800165a <HAL_RCC_OscConfig+0x196>
 8001620:	4b73      	ldr	r3, [pc, #460]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	2380      	movs	r3, #128	; 0x80
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	4013      	ands	r3, r2
 800162a:	d116      	bne.n	800165a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162c:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2202      	movs	r2, #2
 8001632:	4013      	ands	r3, r2
 8001634:	d005      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d001      	beq.n	8001642 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e24b      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001642:	4b6b      	ldr	r3, [pc, #428]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	22f8      	movs	r2, #248	; 0xf8
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	691b      	ldr	r3, [r3, #16]
 8001650:	00da      	lsls	r2, r3, #3
 8001652:	4b67      	ldr	r3, [pc, #412]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001658:	e041      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d024      	beq.n	80016ac <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b63      	ldr	r3, [pc, #396]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b62      	ldr	r3, [pc, #392]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001668:	2101      	movs	r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fcb3 	bl	8000fd8 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001678:	f7ff fcae 	bl	8000fd8 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e227      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168a:	4b59      	ldr	r3, [pc, #356]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d0f1      	beq.n	8001678 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b56      	ldr	r3, [pc, #344]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	22f8      	movs	r2, #248	; 0xf8
 800169a:	4393      	bics	r3, r2
 800169c:	0019      	movs	r1, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	00da      	lsls	r2, r3, #3
 80016a4:	4b52      	ldr	r3, [pc, #328]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016a6:	430a      	orrs	r2, r1
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	e018      	b.n	80016de <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016ac:	4b50      	ldr	r3, [pc, #320]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016b2:	2101      	movs	r1, #1
 80016b4:	438a      	bics	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc8e 	bl	8000fd8 <HAL_GetTick>
 80016bc:	0003      	movs	r3, r0
 80016be:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c2:	f7ff fc89 	bl	8000fd8 <HAL_GetTick>
 80016c6:	0002      	movs	r2, r0
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e202      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d4:	4b46      	ldr	r3, [pc, #280]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d1f1      	bne.n	80016c2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2208      	movs	r2, #8
 80016e4:	4013      	ands	r3, r2
 80016e6:	d036      	beq.n	8001756 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016f4:	4b3e      	ldr	r3, [pc, #248]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fc6c 	bl	8000fd8 <HAL_GetTick>
 8001700:	0003      	movs	r3, r0
 8001702:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fc67 	bl	8000fd8 <HAL_GetTick>
 800170a:	0002      	movs	r2, r0
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e1e0      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001718:	4b35      	ldr	r3, [pc, #212]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800171a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171c:	2202      	movs	r2, #2
 800171e:	4013      	ands	r3, r2
 8001720:	d0f1      	beq.n	8001706 <HAL_RCC_OscConfig+0x242>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	4b32      	ldr	r3, [pc, #200]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800172a:	2101      	movs	r1, #1
 800172c:	438a      	bics	r2, r1
 800172e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fc52 	bl	8000fd8 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff fc4d 	bl	8000fd8 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e1c6      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	2202      	movs	r2, #2
 8001752:	4013      	ands	r3, r2
 8001754:	d1f1      	bne.n	800173a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2204      	movs	r2, #4
 800175c:	4013      	ands	r3, r2
 800175e:	d100      	bne.n	8001762 <HAL_RCC_OscConfig+0x29e>
 8001760:	e0b4      	b.n	80018cc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001762:	201f      	movs	r0, #31
 8001764:	183b      	adds	r3, r7, r0
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800176c:	69da      	ldr	r2, [r3, #28]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	055b      	lsls	r3, r3, #21
 8001772:	4013      	ands	r3, r2
 8001774:	d110      	bne.n	8001798 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001778:	69da      	ldr	r2, [r3, #28]
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 800177c:	2180      	movs	r1, #128	; 0x80
 800177e:	0549      	lsls	r1, r1, #21
 8001780:	430a      	orrs	r2, r1
 8001782:	61da      	str	r2, [r3, #28]
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 8001786:	69da      	ldr	r2, [r3, #28]
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	055b      	lsls	r3, r3, #21
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001792:	183b      	adds	r3, r7, r0
 8001794:	2201      	movs	r2, #1
 8001796:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4013      	ands	r3, r2
 80017a2:	d11a      	bne.n	80017da <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 80017aa:	2180      	movs	r1, #128	; 0x80
 80017ac:	0049      	lsls	r1, r1, #1
 80017ae:	430a      	orrs	r2, r1
 80017b0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fc11 	bl	8000fd8 <HAL_GetTick>
 80017b6:	0003      	movs	r3, r0
 80017b8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017bc:	f7ff fc0c 	bl	8000fd8 <HAL_GetTick>
 80017c0:	0002      	movs	r2, r0
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b64      	cmp	r3, #100	; 0x64
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e185      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_OscConfig+0x338>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	4013      	ands	r3, r2
 80017d8:	d0f0      	beq.n	80017bc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10e      	bne.n	8001800 <HAL_RCC_OscConfig+0x33c>
 80017e2:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <HAL_RCC_OscConfig+0x32c>)
 80017e8:	2101      	movs	r1, #1
 80017ea:	430a      	orrs	r2, r1
 80017ec:	621a      	str	r2, [r3, #32]
 80017ee:	e035      	b.n	800185c <HAL_RCC_OscConfig+0x398>
 80017f0:	40021000 	.word	0x40021000
 80017f4:	fffeffff 	.word	0xfffeffff
 80017f8:	fffbffff 	.word	0xfffbffff
 80017fc:	40007000 	.word	0x40007000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d10c      	bne.n	8001822 <HAL_RCC_OscConfig+0x35e>
 8001808:	4bb6      	ldr	r3, [pc, #728]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800180a:	6a1a      	ldr	r2, [r3, #32]
 800180c:	4bb5      	ldr	r3, [pc, #724]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800180e:	2101      	movs	r1, #1
 8001810:	438a      	bics	r2, r1
 8001812:	621a      	str	r2, [r3, #32]
 8001814:	4bb3      	ldr	r3, [pc, #716]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001816:	6a1a      	ldr	r2, [r3, #32]
 8001818:	4bb2      	ldr	r3, [pc, #712]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800181a:	2104      	movs	r1, #4
 800181c:	438a      	bics	r2, r1
 800181e:	621a      	str	r2, [r3, #32]
 8001820:	e01c      	b.n	800185c <HAL_RCC_OscConfig+0x398>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x380>
 800182a:	4bae      	ldr	r3, [pc, #696]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800182c:	6a1a      	ldr	r2, [r3, #32]
 800182e:	4bad      	ldr	r3, [pc, #692]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001830:	2104      	movs	r1, #4
 8001832:	430a      	orrs	r2, r1
 8001834:	621a      	str	r2, [r3, #32]
 8001836:	4bab      	ldr	r3, [pc, #684]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001838:	6a1a      	ldr	r2, [r3, #32]
 800183a:	4baa      	ldr	r3, [pc, #680]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800183c:	2101      	movs	r1, #1
 800183e:	430a      	orrs	r2, r1
 8001840:	621a      	str	r2, [r3, #32]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x398>
 8001844:	4ba7      	ldr	r3, [pc, #668]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001846:	6a1a      	ldr	r2, [r3, #32]
 8001848:	4ba6      	ldr	r3, [pc, #664]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800184a:	2101      	movs	r1, #1
 800184c:	438a      	bics	r2, r1
 800184e:	621a      	str	r2, [r3, #32]
 8001850:	4ba4      	ldr	r3, [pc, #656]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001852:	6a1a      	ldr	r2, [r3, #32]
 8001854:	4ba3      	ldr	r3, [pc, #652]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001856:	2104      	movs	r1, #4
 8001858:	438a      	bics	r2, r1
 800185a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d014      	beq.n	800188e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001864:	f7ff fbb8 	bl	8000fd8 <HAL_GetTick>
 8001868:	0003      	movs	r3, r0
 800186a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186c:	e009      	b.n	8001882 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f7ff fbb3 	bl	8000fd8 <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	4a9b      	ldr	r2, [pc, #620]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e12b      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001882:	4b98      	ldr	r3, [pc, #608]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x3aa>
 800188c:	e013      	b.n	80018b6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800188e:	f7ff fba3 	bl	8000fd8 <HAL_GetTick>
 8001892:	0003      	movs	r3, r0
 8001894:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001896:	e009      	b.n	80018ac <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff fb9e 	bl	8000fd8 <HAL_GetTick>
 800189c:	0002      	movs	r2, r0
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	4a91      	ldr	r2, [pc, #580]	; (8001ae8 <HAL_RCC_OscConfig+0x624>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e116      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	4b8d      	ldr	r3, [pc, #564]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018ae:	6a1b      	ldr	r3, [r3, #32]
 80018b0:	2202      	movs	r2, #2
 80018b2:	4013      	ands	r3, r2
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018b6:	231f      	movs	r3, #31
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d105      	bne.n	80018cc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c0:	4b88      	ldr	r3, [pc, #544]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018c2:	69da      	ldr	r2, [r3, #28]
 80018c4:	4b87      	ldr	r3, [pc, #540]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018c6:	4989      	ldr	r1, [pc, #548]	; (8001aec <HAL_RCC_OscConfig+0x628>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2210      	movs	r2, #16
 80018d2:	4013      	ands	r3, r2
 80018d4:	d063      	beq.n	800199e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d12a      	bne.n	8001934 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018de:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e2:	4b80      	ldr	r3, [pc, #512]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018e4:	2104      	movs	r1, #4
 80018e6:	430a      	orrs	r2, r1
 80018e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80018ea:	4b7e      	ldr	r3, [pc, #504]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ee:	4b7d      	ldr	r3, [pc, #500]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f6:	f7ff fb6f 	bl	8000fd8 <HAL_GetTick>
 80018fa:	0003      	movs	r3, r0
 80018fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001900:	f7ff fb6a 	bl	8000fd8 <HAL_GetTick>
 8001904:	0002      	movs	r2, r0
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e0e3      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001912:	4b74      	ldr	r3, [pc, #464]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001916:	2202      	movs	r2, #2
 8001918:	4013      	ands	r3, r2
 800191a:	d0f1      	beq.n	8001900 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800191c:	4b71      	ldr	r3, [pc, #452]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	22f8      	movs	r2, #248	; 0xf8
 8001922:	4393      	bics	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	00da      	lsls	r2, r3, #3
 800192c:	4b6d      	ldr	r3, [pc, #436]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800192e:	430a      	orrs	r2, r1
 8001930:	635a      	str	r2, [r3, #52]	; 0x34
 8001932:	e034      	b.n	800199e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	3305      	adds	r3, #5
 800193a:	d111      	bne.n	8001960 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800193e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001940:	4b68      	ldr	r3, [pc, #416]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001942:	2104      	movs	r1, #4
 8001944:	438a      	bics	r2, r1
 8001946:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	22f8      	movs	r2, #248	; 0xf8
 800194e:	4393      	bics	r3, r2
 8001950:	0019      	movs	r1, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	00da      	lsls	r2, r3, #3
 8001958:	4b62      	ldr	r3, [pc, #392]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
 800195e:	e01e      	b.n	800199e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001960:	4b60      	ldr	r3, [pc, #384]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001964:	4b5f      	ldr	r3, [pc, #380]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001966:	2104      	movs	r1, #4
 8001968:	430a      	orrs	r2, r1
 800196a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800196c:	4b5d      	ldr	r3, [pc, #372]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 800196e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001970:	4b5c      	ldr	r3, [pc, #368]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001972:	2101      	movs	r1, #1
 8001974:	438a      	bics	r2, r1
 8001976:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001978:	f7ff fb2e 	bl	8000fd8 <HAL_GetTick>
 800197c:	0003      	movs	r3, r0
 800197e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001982:	f7ff fb29 	bl	8000fd8 <HAL_GetTick>
 8001986:	0002      	movs	r2, r0
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e0a2      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001994:	4b53      	ldr	r3, [pc, #332]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001998:	2202      	movs	r2, #2
 800199a:	4013      	ands	r3, r2
 800199c:	d1f1      	bne.n	8001982 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d100      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4e4>
 80019a6:	e097      	b.n	8001ad8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019a8:	4b4e      	ldr	r3, [pc, #312]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	220c      	movs	r2, #12
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b08      	cmp	r3, #8
 80019b2:	d100      	bne.n	80019b6 <HAL_RCC_OscConfig+0x4f2>
 80019b4:	e06b      	b.n	8001a8e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1b      	ldr	r3, [r3, #32]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d14c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b49      	ldr	r3, [pc, #292]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b48      	ldr	r3, [pc, #288]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019c4:	494a      	ldr	r1, [pc, #296]	; (8001af0 <HAL_RCC_OscConfig+0x62c>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fb05 	bl	8000fd8 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fb00 	bl	8000fd8 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e079      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e6:	4b3f      	ldr	r3, [pc, #252]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	049b      	lsls	r3, r3, #18
 80019ee:	4013      	ands	r3, r2
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f2:	4b3c      	ldr	r3, [pc, #240]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	220f      	movs	r2, #15
 80019f8:	4393      	bics	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a3a      	ldr	r2, [pc, #232]	; (8001af4 <HAL_RCC_OscConfig+0x630>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	431a      	orrs	r2, r3
 8001a1a:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a20:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0449      	lsls	r1, r1, #17
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fad3 	bl	8000fd8 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff face 	bl	8000fd8 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e047      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a4a:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	049b      	lsls	r3, r3, #18
 8001a52:	4013      	ands	r3, r2
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x574>
 8001a56:	e03f      	b.n	8001ad8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a5e:	4924      	ldr	r1, [pc, #144]	; (8001af0 <HAL_RCC_OscConfig+0x62c>)
 8001a60:	400a      	ands	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fab8 	bl	8000fd8 <HAL_GetTick>
 8001a68:	0003      	movs	r3, r0
 8001a6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff fab3 	bl	8000fd8 <HAL_GetTick>
 8001a72:	0002      	movs	r2, r0
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e02c      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	2380      	movs	r3, #128	; 0x80
 8001a86:	049b      	lsls	r3, r3, #18
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x5aa>
 8001a8c:	e024      	b.n	8001ad8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d101      	bne.n	8001a9a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e01f      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001a9a:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001aa0:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_RCC_OscConfig+0x620>)
 8001aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	2380      	movs	r3, #128	; 0x80
 8001aaa:	025b      	lsls	r3, r3, #9
 8001aac:	401a      	ands	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d10e      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	220f      	movs	r2, #15
 8001aba:	401a      	ands	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001ac4:	697a      	ldr	r2, [r7, #20]
 8001ac6:	23f0      	movs	r3, #240	; 0xf0
 8001ac8:	039b      	lsls	r3, r3, #14
 8001aca:	401a      	ands	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d001      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	0018      	movs	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	b008      	add	sp, #32
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	00001388 	.word	0x00001388
 8001aec:	efffffff 	.word	0xefffffff
 8001af0:	feffffff 	.word	0xfeffffff
 8001af4:	ffc2ffff 	.word	0xffc2ffff

08001af8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e0b3      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b0c:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2201      	movs	r2, #1
 8001b12:	4013      	ands	r3, r2
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d911      	bls.n	8001b3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1a:	4b58      	ldr	r3, [pc, #352]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4393      	bics	r3, r2
 8001b22:	0019      	movs	r1, r3
 8001b24:	4b55      	ldr	r3, [pc, #340]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2c:	4b53      	ldr	r3, [pc, #332]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2201      	movs	r2, #1
 8001b32:	4013      	ands	r3, r2
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d001      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e09a      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2202      	movs	r2, #2
 8001b44:	4013      	ands	r3, r2
 8001b46:	d015      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d006      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b52:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4b4a      	ldr	r3, [pc, #296]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b58:	21e0      	movs	r1, #224	; 0xe0
 8001b5a:	00c9      	lsls	r1, r1, #3
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b47      	ldr	r3, [pc, #284]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	22f0      	movs	r2, #240	; 0xf0
 8001b66:	4393      	bics	r3, r2
 8001b68:	0019      	movs	r1, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689a      	ldr	r2, [r3, #8]
 8001b6e:	4b44      	ldr	r3, [pc, #272]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b70:	430a      	orrs	r2, r1
 8001b72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d040      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	029b      	lsls	r3, r3, #10
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d114      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e06e      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9e:	4b38      	ldr	r3, [pc, #224]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	049b      	lsls	r3, r3, #18
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d108      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e062      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	4b34      	ldr	r3, [pc, #208]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e05b      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bbc:	4b30      	ldr	r3, [pc, #192]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	4393      	bics	r3, r2
 8001bc4:	0019      	movs	r1, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd0:	f7ff fa02 	bl	8000fd8 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd8:	e009      	b.n	8001bee <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bda:	f7ff f9fd 	bl	8000fd8 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <HAL_RCC_ClockConfig+0x18c>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e042      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bee:	4b24      	ldr	r3, [pc, #144]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	401a      	ands	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d1ec      	bne.n	8001bda <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	4013      	ands	r3, r2
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d211      	bcs.n	8001c32 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2201      	movs	r2, #1
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c20:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <HAL_RCC_ClockConfig+0x184>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e020      	b.n	8001c74 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2204      	movs	r2, #4
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d009      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <HAL_RCC_ClockConfig+0x190>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c50:	f000 f820 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c54:	0001      	movs	r1, r0
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x188>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	091b      	lsrs	r3, r3, #4
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	4013      	ands	r3, r2
 8001c60:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <HAL_RCC_ClockConfig+0x194>)
 8001c62:	5cd3      	ldrb	r3, [r2, r3]
 8001c64:	000a      	movs	r2, r1
 8001c66:	40da      	lsrs	r2, r3
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x198>)
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c6c:	2003      	movs	r0, #3
 8001c6e:	f7ff f96d 	bl	8000f4c <HAL_InitTick>
  
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b004      	add	sp, #16
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40022000 	.word	0x40022000
 8001c80:	40021000 	.word	0x40021000
 8001c84:	00001388 	.word	0x00001388
 8001c88:	fffff8ff 	.word	0xfffff8ff
 8001c8c:	08004148 	.word	0x08004148
 8001c90:	20000000 	.word	0x20000000

08001c94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	b590      	push	{r4, r7, lr}
 8001c96:	b08f      	sub	sp, #60	; 0x3c
 8001c98:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001c9a:	2314      	movs	r3, #20
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ca0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ca2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	4a29      	ldr	r2, [pc, #164]	; (8001d50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cae:	c313      	stmia	r3!, {r0, r1, r4}
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cb8:	2300      	movs	r3, #0
 8001cba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	637b      	str	r3, [r7, #52]	; 0x34
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001cc8:	4b22      	ldr	r3, [pc, #136]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd0:	220c      	movs	r2, #12
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d002      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x4a>
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d003      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x50>
 8001cdc:	e02d      	b.n	8001d3a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cde:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ce2:	e02d      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce6:	0c9b      	lsrs	r3, r3, #18
 8001ce8:	220f      	movs	r2, #15
 8001cea:	4013      	ands	r3, r2
 8001cec:	2214      	movs	r2, #20
 8001cee:	18ba      	adds	r2, r7, r2
 8001cf0:	5cd3      	ldrb	r3, [r2, r3]
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	220f      	movs	r2, #15
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	1d3a      	adds	r2, r7, #4
 8001cfe:	5cd3      	ldrb	r3, [r2, r3]
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	025b      	lsls	r3, r3, #9
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d0e:	4812      	ldr	r0, [pc, #72]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d10:	f7fe fa02 	bl	8000118 <__udivsi3>
 8001d14:	0003      	movs	r3, r0
 8001d16:	001a      	movs	r2, r3
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	4353      	muls	r3, r2
 8001d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d1e:	e009      	b.n	8001d34 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001d20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d22:	000a      	movs	r2, r1
 8001d24:	0152      	lsls	r2, r2, #5
 8001d26:	1a52      	subs	r2, r2, r1
 8001d28:	0193      	lsls	r3, r2, #6
 8001d2a:	1a9b      	subs	r3, r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	185b      	adds	r3, r3, r1
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d38:	e002      	b.n	8001d40 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d3a:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d42:	0018      	movs	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b00f      	add	sp, #60	; 0x3c
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	08004128 	.word	0x08004128
 8001d50:	08004138 	.word	0x08004138
 8001d54:	40021000 	.word	0x40021000
 8001d58:	007a1200 	.word	0x007a1200

08001d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d60:	4b02      	ldr	r3, [pc, #8]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001d62:	681b      	ldr	r3, [r3, #0]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	20000000 	.word	0x20000000

08001d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001d74:	f7ff fff2 	bl	8001d5c <HAL_RCC_GetHCLKFreq>
 8001d78:	0001      	movs	r1, r0
 8001d7a:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	2207      	movs	r2, #7
 8001d82:	4013      	ands	r3, r2
 8001d84:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d86:	5cd3      	ldrb	r3, [r2, r3]
 8001d88:	40d9      	lsrs	r1, r3
 8001d8a:	000b      	movs	r3, r1
}    
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	46c0      	nop			; (mov r8, r8)
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08004158 	.word	0x08004158

08001d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001da8:	2300      	movs	r3, #0
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	025b      	lsls	r3, r3, #9
 8001db4:	4013      	ands	r3, r2
 8001db6:	d100      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001db8:	e08e      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001dba:	2017      	movs	r0, #23
 8001dbc:	183b      	adds	r3, r7, r0
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc2:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dc4:	69da      	ldr	r2, [r3, #28]
 8001dc6:	2380      	movs	r3, #128	; 0x80
 8001dc8:	055b      	lsls	r3, r3, #21
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d110      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dce:	4b54      	ldr	r3, [pc, #336]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	4b53      	ldr	r3, [pc, #332]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dd4:	2180      	movs	r1, #128	; 0x80
 8001dd6:	0549      	lsls	r1, r1, #21
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	61da      	str	r2, [r3, #28]
 8001ddc:	4b50      	ldr	r3, [pc, #320]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001dde:	69da      	ldr	r2, [r3, #28]
 8001de0:	2380      	movs	r3, #128	; 0x80
 8001de2:	055b      	lsls	r3, r3, #21
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dea:	183b      	adds	r3, r7, r0
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	; 0x80
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d11a      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfc:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0049      	lsls	r1, r1, #1
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff f8e5 	bl	8000fd8 <HAL_GetTick>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e12:	e008      	b.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e14:	f7ff f8e0 	bl	8000fd8 <HAL_GetTick>
 8001e18:	0002      	movs	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e077      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e26:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	005b      	lsls	r3, r3, #1
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e32:	4b3b      	ldr	r3, [pc, #236]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e34:	6a1a      	ldr	r2, [r3, #32]
 8001e36:	23c0      	movs	r3, #192	; 0xc0
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d034      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685a      	ldr	r2, [r3, #4]
 8001e48:	23c0      	movs	r3, #192	; 0xc0
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	68fa      	ldr	r2, [r7, #12]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d02c      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e54:	4b32      	ldr	r3, [pc, #200]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a33      	ldr	r2, [pc, #204]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e5e:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e60:	6a1a      	ldr	r2, [r3, #32]
 8001e62:	4b2f      	ldr	r3, [pc, #188]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	0249      	lsls	r1, r1, #9
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e6c:	4b2c      	ldr	r3, [pc, #176]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e6e:	6a1a      	ldr	r2, [r3, #32]
 8001e70:	4b2b      	ldr	r3, [pc, #172]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e72:	492e      	ldr	r1, [pc, #184]	; (8001f2c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001e74:	400a      	ands	r2, r1
 8001e76:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e78:	4b29      	ldr	r3, [pc, #164]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	4013      	ands	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e86:	f7ff f8a7 	bl	8000fd8 <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	e009      	b.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff f8a2 	bl	8000fd8 <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	4a25      	ldr	r2, [pc, #148]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e038      	b.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d0f0      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a1d      	ldr	r2, [pc, #116]	; (8001f28 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec2:	2317      	movs	r3, #23
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	4b13      	ldr	r3, [pc, #76]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ed2:	4918      	ldr	r1, [pc, #96]	; (8001f34 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2201      	movs	r2, #1
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d009      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ee2:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	4393      	bics	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2220      	movs	r2, #32
 8001efc:	4013      	ands	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f00:	4b07      	ldr	r3, [pc, #28]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	2210      	movs	r2, #16
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001f10:	430a      	orrs	r2, r1
 8001f12:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	0018      	movs	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	b006      	add	sp, #24
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40007000 	.word	0x40007000
 8001f28:	fffffcff 	.word	0xfffffcff
 8001f2c:	fffeffff 	.word	0xfffeffff
 8001f30:	00001388 	.word	0x00001388
 8001f34:	efffffff 	.word	0xefffffff

08001f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e042      	b.n	8001fd0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223d      	movs	r2, #61	; 0x3d
 8001f4e:	5c9b      	ldrb	r3, [r3, r2]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d107      	bne.n	8001f66 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	223c      	movs	r2, #60	; 0x3c
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	0018      	movs	r0, r3
 8001f62:	f7fe fe6b 	bl	8000c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	223d      	movs	r2, #61	; 0x3d
 8001f6a:	2102      	movs	r1, #2
 8001f6c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	0019      	movs	r1, r3
 8001f78:	0010      	movs	r0, r2
 8001f7a:	f000 ff89 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2246      	movs	r2, #70	; 0x46
 8001f82:	2101      	movs	r1, #1
 8001f84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	223e      	movs	r2, #62	; 0x3e
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	223f      	movs	r2, #63	; 0x3f
 8001f92:	2101      	movs	r1, #1
 8001f94:	5499      	strb	r1, [r3, r2]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2240      	movs	r2, #64	; 0x40
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2241      	movs	r2, #65	; 0x41
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2242      	movs	r2, #66	; 0x42
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2243      	movs	r2, #67	; 0x43
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2244      	movs	r2, #68	; 0x44
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2245      	movs	r2, #69	; 0x45
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	223d      	movs	r2, #61	; 0x3d
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	0018      	movs	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	b002      	add	sp, #8
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	223d      	movs	r2, #61	; 0x3d
 8001fe4:	5c9b      	ldrb	r3, [r3, r2]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d001      	beq.n	8001ff0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e030      	b.n	8002052 <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	223d      	movs	r2, #61	; 0x3d
 8001ff4:	2102      	movs	r1, #2
 8001ff6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2101      	movs	r1, #1
 8002004:	430a      	orrs	r2, r1
 8002006:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a13      	ldr	r2, [pc, #76]	; (800205c <HAL_TIM_Base_Start_IT+0x84>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d004      	beq.n	800201c <HAL_TIM_Base_Start_IT+0x44>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a12      	ldr	r2, [pc, #72]	; (8002060 <HAL_TIM_Base_Start_IT+0x88>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2207      	movs	r2, #7
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b06      	cmp	r3, #6
 800202c:	d010      	beq.n	8002050 <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203e:	e007      	b.n	8002050 <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2101      	movs	r1, #1
 800204c:	430a      	orrs	r2, r1
 800204e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b004      	add	sp, #16
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40012c00 	.word	0x40012c00
 8002060:	40000400 	.word	0x40000400

08002064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e042      	b.n	80020fc <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	223d      	movs	r2, #61	; 0x3d
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	d107      	bne.n	8002092 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	223c      	movs	r2, #60	; 0x3c
 8002086:	2100      	movs	r1, #0
 8002088:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	0018      	movs	r0, r3
 800208e:	f000 f839 	bl	8002104 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	223d      	movs	r2, #61	; 0x3d
 8002096:	2102      	movs	r1, #2
 8002098:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3304      	adds	r3, #4
 80020a2:	0019      	movs	r1, r3
 80020a4:	0010      	movs	r0, r2
 80020a6:	f000 fef3 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2246      	movs	r2, #70	; 0x46
 80020ae:	2101      	movs	r1, #1
 80020b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	223e      	movs	r2, #62	; 0x3e
 80020b6:	2101      	movs	r1, #1
 80020b8:	5499      	strb	r1, [r3, r2]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223f      	movs	r2, #63	; 0x3f
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2240      	movs	r2, #64	; 0x40
 80020c6:	2101      	movs	r1, #1
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2241      	movs	r2, #65	; 0x41
 80020ce:	2101      	movs	r1, #1
 80020d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2242      	movs	r2, #66	; 0x42
 80020d6:	2101      	movs	r1, #1
 80020d8:	5499      	strb	r1, [r3, r2]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2243      	movs	r2, #67	; 0x43
 80020de:	2101      	movs	r1, #1
 80020e0:	5499      	strb	r1, [r3, r2]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2244      	movs	r2, #68	; 0x44
 80020e6:	2101      	movs	r1, #1
 80020e8:	5499      	strb	r1, [r3, r2]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2245      	movs	r2, #69	; 0x45
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	223d      	movs	r2, #61	; 0x3d
 80020f6:	2101      	movs	r1, #1
 80020f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	0018      	movs	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	b002      	add	sp, #8
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d108      	bne.n	8002136 <HAL_TIM_PWM_Start+0x22>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	223e      	movs	r2, #62	; 0x3e
 8002128:	5c9b      	ldrb	r3, [r3, r2]
 800212a:	b2db      	uxtb	r3, r3
 800212c:	3b01      	subs	r3, #1
 800212e:	1e5a      	subs	r2, r3, #1
 8002130:	4193      	sbcs	r3, r2
 8002132:	b2db      	uxtb	r3, r3
 8002134:	e01f      	b.n	8002176 <HAL_TIM_PWM_Start+0x62>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b04      	cmp	r3, #4
 800213a:	d108      	bne.n	800214e <HAL_TIM_PWM_Start+0x3a>
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	223f      	movs	r2, #63	; 0x3f
 8002140:	5c9b      	ldrb	r3, [r3, r2]
 8002142:	b2db      	uxtb	r3, r3
 8002144:	3b01      	subs	r3, #1
 8002146:	1e5a      	subs	r2, r3, #1
 8002148:	4193      	sbcs	r3, r2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	e013      	b.n	8002176 <HAL_TIM_PWM_Start+0x62>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b08      	cmp	r3, #8
 8002152:	d108      	bne.n	8002166 <HAL_TIM_PWM_Start+0x52>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2240      	movs	r2, #64	; 0x40
 8002158:	5c9b      	ldrb	r3, [r3, r2]
 800215a:	b2db      	uxtb	r3, r3
 800215c:	3b01      	subs	r3, #1
 800215e:	1e5a      	subs	r2, r3, #1
 8002160:	4193      	sbcs	r3, r2
 8002162:	b2db      	uxtb	r3, r3
 8002164:	e007      	b.n	8002176 <HAL_TIM_PWM_Start+0x62>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2241      	movs	r2, #65	; 0x41
 800216a:	5c9b      	ldrb	r3, [r3, r2]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3b01      	subs	r3, #1
 8002170:	1e5a      	subs	r2, r3, #1
 8002172:	4193      	sbcs	r3, r2
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e064      	b.n	8002248 <HAL_TIM_PWM_Start+0x134>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d104      	bne.n	800218e <HAL_TIM_PWM_Start+0x7a>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	223e      	movs	r2, #62	; 0x3e
 8002188:	2102      	movs	r1, #2
 800218a:	5499      	strb	r1, [r3, r2]
 800218c:	e013      	b.n	80021b6 <HAL_TIM_PWM_Start+0xa2>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b04      	cmp	r3, #4
 8002192:	d104      	bne.n	800219e <HAL_TIM_PWM_Start+0x8a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	223f      	movs	r2, #63	; 0x3f
 8002198:	2102      	movs	r1, #2
 800219a:	5499      	strb	r1, [r3, r2]
 800219c:	e00b      	b.n	80021b6 <HAL_TIM_PWM_Start+0xa2>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d104      	bne.n	80021ae <HAL_TIM_PWM_Start+0x9a>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	2102      	movs	r1, #2
 80021aa:	5499      	strb	r1, [r3, r2]
 80021ac:	e003      	b.n	80021b6 <HAL_TIM_PWM_Start+0xa2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2241      	movs	r2, #65	; 0x41
 80021b2:	2102      	movs	r1, #2
 80021b4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6839      	ldr	r1, [r7, #0]
 80021bc:	2201      	movs	r2, #1
 80021be:	0018      	movs	r0, r3
 80021c0:	f001 fa66 	bl	8003690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a21      	ldr	r2, [pc, #132]	; (8002250 <HAL_TIM_PWM_Start+0x13c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d009      	beq.n	80021e2 <HAL_TIM_PWM_Start+0xce>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_TIM_PWM_Start+0x140>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d004      	beq.n	80021e2 <HAL_TIM_PWM_Start+0xce>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a1e      	ldr	r2, [pc, #120]	; (8002258 <HAL_TIM_PWM_Start+0x144>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_TIM_PWM_Start+0xd2>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_TIM_PWM_Start+0xd4>
 80021e6:	2300      	movs	r3, #0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2180      	movs	r1, #128	; 0x80
 80021f8:	0209      	lsls	r1, r1, #8
 80021fa:	430a      	orrs	r2, r1
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <HAL_TIM_PWM_Start+0x13c>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d004      	beq.n	8002212 <HAL_TIM_PWM_Start+0xfe>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a13      	ldr	r2, [pc, #76]	; (800225c <HAL_TIM_PWM_Start+0x148>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d111      	bne.n	8002236 <HAL_TIM_PWM_Start+0x122>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2207      	movs	r2, #7
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	2b06      	cmp	r3, #6
 8002222:	d010      	beq.n	8002246 <HAL_TIM_PWM_Start+0x132>
    {
      __HAL_TIM_ENABLE(htim);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2101      	movs	r1, #1
 8002230:	430a      	orrs	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002234:	e007      	b.n	8002246 <HAL_TIM_PWM_Start+0x132>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2101      	movs	r1, #1
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b004      	add	sp, #16
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40014400 	.word	0x40014400
 8002258:	40014800 	.word	0x40014800
 800225c:	40000400 	.word	0x40000400

08002260 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	2200      	movs	r2, #0
 8002272:	0018      	movs	r0, r3
 8002274:	f001 fa0c 	bl	8003690 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a2d      	ldr	r2, [pc, #180]	; (8002334 <HAL_TIM_PWM_Stop+0xd4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_TIM_PWM_Stop+0x36>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a2c      	ldr	r2, [pc, #176]	; (8002338 <HAL_TIM_PWM_Stop+0xd8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_TIM_PWM_Stop+0x36>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a2a      	ldr	r2, [pc, #168]	; (800233c <HAL_TIM_PWM_Stop+0xdc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_TIM_PWM_Stop+0x3a>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_TIM_PWM_Stop+0x3c>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_TIM_PWM_Stop+0x68>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_TIM_PWM_Stop+0xe0>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	d10d      	bne.n	80022c8 <HAL_TIM_PWM_Stop+0x68>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a24      	ldr	r2, [pc, #144]	; (8002344 <HAL_TIM_PWM_Stop+0xe4>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	d107      	bne.n	80022c8 <HAL_TIM_PWM_Stop+0x68>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4921      	ldr	r1, [pc, #132]	; (8002348 <HAL_TIM_PWM_Stop+0xe8>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_TIM_PWM_Stop+0xe0>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	d10d      	bne.n	80022f0 <HAL_TIM_PWM_Stop+0x90>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	6a1b      	ldr	r3, [r3, #32]
 80022da:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_TIM_PWM_Stop+0xe4>)
 80022dc:	4013      	ands	r3, r2
 80022de:	d107      	bne.n	80022f0 <HAL_TIM_PWM_Stop+0x90>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2101      	movs	r1, #1
 80022ec:	438a      	bics	r2, r1
 80022ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d104      	bne.n	8002300 <HAL_TIM_PWM_Stop+0xa0>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	223e      	movs	r2, #62	; 0x3e
 80022fa:	2101      	movs	r1, #1
 80022fc:	5499      	strb	r1, [r3, r2]
 80022fe:	e013      	b.n	8002328 <HAL_TIM_PWM_Stop+0xc8>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	2b04      	cmp	r3, #4
 8002304:	d104      	bne.n	8002310 <HAL_TIM_PWM_Stop+0xb0>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	223f      	movs	r2, #63	; 0x3f
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]
 800230e:	e00b      	b.n	8002328 <HAL_TIM_PWM_Stop+0xc8>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	2b08      	cmp	r3, #8
 8002314:	d104      	bne.n	8002320 <HAL_TIM_PWM_Stop+0xc0>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2240      	movs	r2, #64	; 0x40
 800231a:	2101      	movs	r1, #1
 800231c:	5499      	strb	r1, [r3, r2]
 800231e:	e003      	b.n	8002328 <HAL_TIM_PWM_Stop+0xc8>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2241      	movs	r2, #65	; 0x41
 8002324:	2101      	movs	r1, #1
 8002326:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	0018      	movs	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	b002      	add	sp, #8
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	40012c00 	.word	0x40012c00
 8002338:	40014400 	.word	0x40014400
 800233c:	40014800 	.word	0x40014800
 8002340:	00001111 	.word	0x00001111
 8002344:	00000444 	.word	0x00000444
 8002348:	ffff7fff 	.word	0xffff7fff

0800234c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e042      	b.n	80023e4 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	223d      	movs	r2, #61	; 0x3d
 8002362:	5c9b      	ldrb	r3, [r3, r2]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d107      	bne.n	800237a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	223c      	movs	r2, #60	; 0x3c
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f839 	bl	80023ec <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	223d      	movs	r2, #61	; 0x3d
 800237e:	2102      	movs	r1, #2
 8002380:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3304      	adds	r3, #4
 800238a:	0019      	movs	r1, r3
 800238c:	0010      	movs	r0, r2
 800238e:	f000 fd7f 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2246      	movs	r2, #70	; 0x46
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	223e      	movs	r2, #62	; 0x3e
 800239e:	2101      	movs	r1, #1
 80023a0:	5499      	strb	r1, [r3, r2]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	223f      	movs	r2, #63	; 0x3f
 80023a6:	2101      	movs	r1, #1
 80023a8:	5499      	strb	r1, [r3, r2]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	2101      	movs	r1, #1
 80023b0:	5499      	strb	r1, [r3, r2]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2241      	movs	r2, #65	; 0x41
 80023b6:	2101      	movs	r1, #1
 80023b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2242      	movs	r2, #66	; 0x42
 80023be:	2101      	movs	r1, #1
 80023c0:	5499      	strb	r1, [r3, r2]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2243      	movs	r2, #67	; 0x43
 80023c6:	2101      	movs	r1, #1
 80023c8:	5499      	strb	r1, [r3, r2]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2244      	movs	r2, #68	; 0x44
 80023ce:	2101      	movs	r1, #1
 80023d0:	5499      	strb	r1, [r3, r2]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2245      	movs	r2, #69	; 0x45
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	223d      	movs	r2, #61	; 0x3d
 80023de:	2101      	movs	r1, #1
 80023e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b002      	add	sp, #8
 80023ea:	bd80      	pop	{r7, pc}

080023ec <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002406:	230f      	movs	r3, #15
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2200      	movs	r2, #0
 800240c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d104      	bne.n	800241e <HAL_TIM_IC_Start_IT+0x22>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	223e      	movs	r2, #62	; 0x3e
 8002418:	5c9b      	ldrb	r3, [r3, r2]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	e013      	b.n	8002446 <HAL_TIM_IC_Start_IT+0x4a>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d104      	bne.n	800242e <HAL_TIM_IC_Start_IT+0x32>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	223f      	movs	r2, #63	; 0x3f
 8002428:	5c9b      	ldrb	r3, [r3, r2]
 800242a:	b2db      	uxtb	r3, r3
 800242c:	e00b      	b.n	8002446 <HAL_TIM_IC_Start_IT+0x4a>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	2b08      	cmp	r3, #8
 8002432:	d104      	bne.n	800243e <HAL_TIM_IC_Start_IT+0x42>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	5c9b      	ldrb	r3, [r3, r2]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	e003      	b.n	8002446 <HAL_TIM_IC_Start_IT+0x4a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2241      	movs	r2, #65	; 0x41
 8002442:	5c9b      	ldrb	r3, [r3, r2]
 8002444:	b2db      	uxtb	r3, r3
 8002446:	220e      	movs	r2, #14
 8002448:	18ba      	adds	r2, r7, r2
 800244a:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d104      	bne.n	800245c <HAL_TIM_IC_Start_IT+0x60>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2242      	movs	r2, #66	; 0x42
 8002456:	5c9b      	ldrb	r3, [r3, r2]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	e013      	b.n	8002484 <HAL_TIM_IC_Start_IT+0x88>
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2b04      	cmp	r3, #4
 8002460:	d104      	bne.n	800246c <HAL_TIM_IC_Start_IT+0x70>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2243      	movs	r2, #67	; 0x43
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e00b      	b.n	8002484 <HAL_TIM_IC_Start_IT+0x88>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2b08      	cmp	r3, #8
 8002470:	d104      	bne.n	800247c <HAL_TIM_IC_Start_IT+0x80>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2244      	movs	r2, #68	; 0x44
 8002476:	5c9b      	ldrb	r3, [r3, r2]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	e003      	b.n	8002484 <HAL_TIM_IC_Start_IT+0x88>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2245      	movs	r2, #69	; 0x45
 8002480:	5c9b      	ldrb	r3, [r3, r2]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	210d      	movs	r1, #13
 8002486:	187a      	adds	r2, r7, r1
 8002488:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800248a:	230e      	movs	r3, #14
 800248c:	18fb      	adds	r3, r7, r3
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d103      	bne.n	800249c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002494:	187b      	adds	r3, r7, r1
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d001      	beq.n	80024a0 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0a6      	b.n	80025ee <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d104      	bne.n	80024b0 <HAL_TIM_IC_Start_IT+0xb4>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	223e      	movs	r2, #62	; 0x3e
 80024aa:	2102      	movs	r1, #2
 80024ac:	5499      	strb	r1, [r3, r2]
 80024ae:	e013      	b.n	80024d8 <HAL_TIM_IC_Start_IT+0xdc>
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	2b04      	cmp	r3, #4
 80024b4:	d104      	bne.n	80024c0 <HAL_TIM_IC_Start_IT+0xc4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	223f      	movs	r2, #63	; 0x3f
 80024ba:	2102      	movs	r1, #2
 80024bc:	5499      	strb	r1, [r3, r2]
 80024be:	e00b      	b.n	80024d8 <HAL_TIM_IC_Start_IT+0xdc>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d104      	bne.n	80024d0 <HAL_TIM_IC_Start_IT+0xd4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2240      	movs	r2, #64	; 0x40
 80024ca:	2102      	movs	r1, #2
 80024cc:	5499      	strb	r1, [r3, r2]
 80024ce:	e003      	b.n	80024d8 <HAL_TIM_IC_Start_IT+0xdc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2241      	movs	r2, #65	; 0x41
 80024d4:	2102      	movs	r1, #2
 80024d6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d104      	bne.n	80024e8 <HAL_TIM_IC_Start_IT+0xec>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2242      	movs	r2, #66	; 0x42
 80024e2:	2102      	movs	r1, #2
 80024e4:	5499      	strb	r1, [r3, r2]
 80024e6:	e013      	b.n	8002510 <HAL_TIM_IC_Start_IT+0x114>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d104      	bne.n	80024f8 <HAL_TIM_IC_Start_IT+0xfc>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2243      	movs	r2, #67	; 0x43
 80024f2:	2102      	movs	r1, #2
 80024f4:	5499      	strb	r1, [r3, r2]
 80024f6:	e00b      	b.n	8002510 <HAL_TIM_IC_Start_IT+0x114>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d104      	bne.n	8002508 <HAL_TIM_IC_Start_IT+0x10c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2244      	movs	r2, #68	; 0x44
 8002502:	2102      	movs	r1, #2
 8002504:	5499      	strb	r1, [r3, r2]
 8002506:	e003      	b.n	8002510 <HAL_TIM_IC_Start_IT+0x114>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2245      	movs	r2, #69	; 0x45
 800250c:	2102      	movs	r1, #2
 800250e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b0c      	cmp	r3, #12
 8002514:	d02a      	beq.n	800256c <HAL_TIM_IC_Start_IT+0x170>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b0c      	cmp	r3, #12
 800251a:	d830      	bhi.n	800257e <HAL_TIM_IC_Start_IT+0x182>
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	2b08      	cmp	r3, #8
 8002520:	d01b      	beq.n	800255a <HAL_TIM_IC_Start_IT+0x15e>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	2b08      	cmp	r3, #8
 8002526:	d82a      	bhi.n	800257e <HAL_TIM_IC_Start_IT+0x182>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_TIM_IC_Start_IT+0x13a>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b04      	cmp	r3, #4
 8002532:	d009      	beq.n	8002548 <HAL_TIM_IC_Start_IT+0x14c>
 8002534:	e023      	b.n	800257e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68da      	ldr	r2, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2102      	movs	r1, #2
 8002542:	430a      	orrs	r2, r1
 8002544:	60da      	str	r2, [r3, #12]
      break;
 8002546:	e01f      	b.n	8002588 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68da      	ldr	r2, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2104      	movs	r1, #4
 8002554:	430a      	orrs	r2, r1
 8002556:	60da      	str	r2, [r3, #12]
      break;
 8002558:	e016      	b.n	8002588 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2108      	movs	r1, #8
 8002566:	430a      	orrs	r2, r1
 8002568:	60da      	str	r2, [r3, #12]
      break;
 800256a:	e00d      	b.n	8002588 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2110      	movs	r1, #16
 8002578:	430a      	orrs	r2, r1
 800257a:	60da      	str	r2, [r3, #12]
      break;
 800257c:	e004      	b.n	8002588 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	2201      	movs	r2, #1
 8002584:	701a      	strb	r2, [r3, #0]
      break;
 8002586:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002588:	230f      	movs	r3, #15
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d12a      	bne.n	80025e8 <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6839      	ldr	r1, [r7, #0]
 8002598:	2201      	movs	r2, #1
 800259a:	0018      	movs	r0, r3
 800259c:	f001 f878 	bl	8003690 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a14      	ldr	r2, [pc, #80]	; (80025f8 <HAL_TIM_IC_Start_IT+0x1fc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_TIM_IC_Start_IT+0x1b8>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a13      	ldr	r2, [pc, #76]	; (80025fc <HAL_TIM_IC_Start_IT+0x200>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d111      	bne.n	80025d8 <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2207      	movs	r2, #7
 80025bc:	4013      	ands	r3, r2
 80025be:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2b06      	cmp	r3, #6
 80025c4:	d010      	beq.n	80025e8 <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2101      	movs	r1, #1
 80025d2:	430a      	orrs	r2, r1
 80025d4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d6:	e007      	b.n	80025e8 <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2101      	movs	r1, #1
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	781b      	ldrb	r3, [r3, #0]
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	40012c00 	.word	0x40012c00
 80025fc:	40000400 	.word	0x40000400

08002600 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800260a:	230f      	movs	r3, #15
 800260c:	18fb      	adds	r3, r7, r3
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b0c      	cmp	r3, #12
 8002616:	d02a      	beq.n	800266e <HAL_TIM_IC_Stop_IT+0x6e>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2b0c      	cmp	r3, #12
 800261c:	d830      	bhi.n	8002680 <HAL_TIM_IC_Stop_IT+0x80>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d01b      	beq.n	800265c <HAL_TIM_IC_Stop_IT+0x5c>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b08      	cmp	r3, #8
 8002628:	d82a      	bhi.n	8002680 <HAL_TIM_IC_Stop_IT+0x80>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_TIM_IC_Stop_IT+0x38>
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d009      	beq.n	800264a <HAL_TIM_IC_Stop_IT+0x4a>
 8002636:	e023      	b.n	8002680 <HAL_TIM_IC_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2102      	movs	r1, #2
 8002644:	438a      	bics	r2, r1
 8002646:	60da      	str	r2, [r3, #12]
      break;
 8002648:	e01f      	b.n	800268a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2104      	movs	r1, #4
 8002656:	438a      	bics	r2, r1
 8002658:	60da      	str	r2, [r3, #12]
      break;
 800265a:	e016      	b.n	800268a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2108      	movs	r1, #8
 8002668:	438a      	bics	r2, r1
 800266a:	60da      	str	r2, [r3, #12]
      break;
 800266c:	e00d      	b.n	800268a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2110      	movs	r1, #16
 800267a:	438a      	bics	r2, r1
 800267c:	60da      	str	r2, [r3, #12]
      break;
 800267e:	e004      	b.n	800268a <HAL_TIM_IC_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002680:	230f      	movs	r3, #15
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
      break;
 8002688:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800268a:	230f      	movs	r3, #15
 800268c:	18fb      	adds	r3, r7, r3
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d152      	bne.n	800273a <HAL_TIM_IC_Stop_IT+0x13a>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	0018      	movs	r0, r3
 800269e:	f000 fff7 	bl	8003690 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_TIM_IC_Stop_IT+0x148>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	d10d      	bne.n	80026ca <HAL_TIM_IC_Stop_IT+0xca>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a25      	ldr	r2, [pc, #148]	; (800274c <HAL_TIM_IC_Stop_IT+0x14c>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	d107      	bne.n	80026ca <HAL_TIM_IC_Stop_IT+0xca>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2101      	movs	r1, #1
 80026c6:	438a      	bics	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d104      	bne.n	80026da <HAL_TIM_IC_Stop_IT+0xda>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	223e      	movs	r2, #62	; 0x3e
 80026d4:	2101      	movs	r1, #1
 80026d6:	5499      	strb	r1, [r3, r2]
 80026d8:	e013      	b.n	8002702 <HAL_TIM_IC_Stop_IT+0x102>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d104      	bne.n	80026ea <HAL_TIM_IC_Stop_IT+0xea>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	223f      	movs	r2, #63	; 0x3f
 80026e4:	2101      	movs	r1, #1
 80026e6:	5499      	strb	r1, [r3, r2]
 80026e8:	e00b      	b.n	8002702 <HAL_TIM_IC_Stop_IT+0x102>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d104      	bne.n	80026fa <HAL_TIM_IC_Stop_IT+0xfa>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	2101      	movs	r1, #1
 80026f6:	5499      	strb	r1, [r3, r2]
 80026f8:	e003      	b.n	8002702 <HAL_TIM_IC_Stop_IT+0x102>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2241      	movs	r2, #65	; 0x41
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d104      	bne.n	8002712 <HAL_TIM_IC_Stop_IT+0x112>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2242      	movs	r2, #66	; 0x42
 800270c:	2101      	movs	r1, #1
 800270e:	5499      	strb	r1, [r3, r2]
 8002710:	e013      	b.n	800273a <HAL_TIM_IC_Stop_IT+0x13a>
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d104      	bne.n	8002722 <HAL_TIM_IC_Stop_IT+0x122>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2243      	movs	r2, #67	; 0x43
 800271c:	2101      	movs	r1, #1
 800271e:	5499      	strb	r1, [r3, r2]
 8002720:	e00b      	b.n	800273a <HAL_TIM_IC_Stop_IT+0x13a>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b08      	cmp	r3, #8
 8002726:	d104      	bne.n	8002732 <HAL_TIM_IC_Stop_IT+0x132>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2244      	movs	r2, #68	; 0x44
 800272c:	2101      	movs	r1, #1
 800272e:	5499      	strb	r1, [r3, r2]
 8002730:	e003      	b.n	800273a <HAL_TIM_IC_Stop_IT+0x13a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2245      	movs	r2, #69	; 0x45
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800273a:	230f      	movs	r3, #15
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b004      	add	sp, #16
 8002746:	bd80      	pop	{r7, pc}
 8002748:	00001111 	.word	0x00001111
 800274c:	00000444 	.word	0x00000444

08002750 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2202      	movs	r2, #2
 8002760:	4013      	ands	r3, r2
 8002762:	2b02      	cmp	r3, #2
 8002764:	d124      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	2202      	movs	r2, #2
 800276e:	4013      	ands	r3, r2
 8002770:	2b02      	cmp	r3, #2
 8002772:	d11d      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2203      	movs	r2, #3
 800277a:	4252      	negs	r2, r2
 800277c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2203      	movs	r2, #3
 800278c:	4013      	ands	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	0018      	movs	r0, r3
 8002794:	f7fd fd82 	bl	800029c <HAL_TIM_IC_CaptureCallback>
 8002798:	e007      	b.n	80027aa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	0018      	movs	r0, r3
 800279e:	f000 fb5f 	bl	8002e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 fb63 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2204      	movs	r2, #4
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b04      	cmp	r3, #4
 80027bc:	d125      	bne.n	800280a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2204      	movs	r2, #4
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d11e      	bne.n	800280a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2205      	movs	r2, #5
 80027d2:	4252      	negs	r2, r2
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	23c0      	movs	r3, #192	; 0xc0
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d004      	beq.n	80027f4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	0018      	movs	r0, r3
 80027ee:	f7fd fd55 	bl	800029c <HAL_TIM_IC_CaptureCallback>
 80027f2:	e007      	b.n	8002804 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	0018      	movs	r0, r3
 80027f8:	f000 fb32 	bl	8002e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 fb36 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2208      	movs	r2, #8
 8002812:	4013      	ands	r3, r2
 8002814:	2b08      	cmp	r3, #8
 8002816:	d124      	bne.n	8002862 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2208      	movs	r2, #8
 8002820:	4013      	ands	r3, r2
 8002822:	2b08      	cmp	r3, #8
 8002824:	d11d      	bne.n	8002862 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2209      	movs	r2, #9
 800282c:	4252      	negs	r2, r2
 800282e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2204      	movs	r2, #4
 8002834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	2203      	movs	r2, #3
 800283e:	4013      	ands	r3, r2
 8002840:	d004      	beq.n	800284c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f7fd fd29 	bl	800029c <HAL_TIM_IC_CaptureCallback>
 800284a:	e007      	b.n	800285c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fb06 	bl	8002e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	0018      	movs	r0, r3
 8002858:	f000 fb0a 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2210      	movs	r2, #16
 800286a:	4013      	ands	r3, r2
 800286c:	2b10      	cmp	r3, #16
 800286e:	d125      	bne.n	80028bc <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2210      	movs	r2, #16
 8002878:	4013      	ands	r3, r2
 800287a:	2b10      	cmp	r3, #16
 800287c:	d11e      	bne.n	80028bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2211      	movs	r2, #17
 8002884:	4252      	negs	r2, r2
 8002886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2208      	movs	r2, #8
 800288c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	69da      	ldr	r2, [r3, #28]
 8002894:	23c0      	movs	r3, #192	; 0xc0
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d004      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f7fd fcfc 	bl	800029c <HAL_TIM_IC_CaptureCallback>
 80028a4:	e007      	b.n	80028b6 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 fad9 	bl	8002e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f000 fadd 	bl	8002e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	2201      	movs	r2, #1
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10f      	bne.n	80028ea <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d108      	bne.n	80028ea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2202      	movs	r2, #2
 80028de:	4252      	negs	r2, r2
 80028e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fd fd37 	bl	8000358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d10f      	bne.n	8002918 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	2280      	movs	r2, #128	; 0x80
 8002900:	4013      	ands	r3, r2
 8002902:	2b80      	cmp	r3, #128	; 0x80
 8002904:	d108      	bne.n	8002918 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2281      	movs	r2, #129	; 0x81
 800290c:	4252      	negs	r2, r2
 800290e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 ff98 	bl	8003848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	2240      	movs	r2, #64	; 0x40
 8002920:	4013      	ands	r3, r2
 8002922:	2b40      	cmp	r3, #64	; 0x40
 8002924:	d10f      	bne.n	8002946 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2240      	movs	r2, #64	; 0x40
 800292e:	4013      	ands	r3, r2
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d108      	bne.n	8002946 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2241      	movs	r2, #65	; 0x41
 800293a:	4252      	negs	r2, r2
 800293c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	0018      	movs	r0, r3
 8002942:	f000 fa9d 	bl	8002e80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	2220      	movs	r2, #32
 800294e:	4013      	ands	r3, r2
 8002950:	2b20      	cmp	r3, #32
 8002952:	d10f      	bne.n	8002974 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2220      	movs	r2, #32
 800295c:	4013      	ands	r3, r2
 800295e:	2b20      	cmp	r3, #32
 8002960:	d108      	bne.n	8002974 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2221      	movs	r2, #33	; 0x21
 8002968:	4252      	negs	r2, r2
 800296a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f000 ff62 	bl	8003838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002988:	2317      	movs	r3, #23
 800298a:	18fb      	adds	r3, r7, r3
 800298c:	2200      	movs	r2, #0
 800298e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	223c      	movs	r2, #60	; 0x3c
 8002994:	5c9b      	ldrb	r3, [r3, r2]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d101      	bne.n	800299e <HAL_TIM_IC_ConfigChannel+0x22>
 800299a:	2302      	movs	r3, #2
 800299c:	e08c      	b.n	8002ab8 <HAL_TIM_IC_ConfigChannel+0x13c>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	223c      	movs	r2, #60	; 0x3c
 80029a2:	2101      	movs	r1, #1
 80029a4:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f000 fcb4 	bl	8003328 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	699a      	ldr	r2, [r3, #24]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	210c      	movs	r1, #12
 80029cc:	438a      	bics	r2, r1
 80029ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6999      	ldr	r1, [r3, #24]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	619a      	str	r2, [r3, #24]
 80029e2:	e062      	b.n	8002aaa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	d11c      	bne.n	8002a24 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	685a      	ldr	r2, [r3, #4]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f000 fd15 	bl	8003428 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	492d      	ldr	r1, [pc, #180]	; (8002ac0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002a0a:	400a      	ands	r2, r1
 8002a0c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6999      	ldr	r1, [r3, #24]
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	021a      	lsls	r2, r3, #8
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	619a      	str	r2, [r3, #24]
 8002a22:	e042      	b.n	8002aaa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d11b      	bne.n	8002a62 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f000 fd69 	bl	8003510 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	69da      	ldr	r2, [r3, #28]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	210c      	movs	r1, #12
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	69d9      	ldr	r1, [r3, #28]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	61da      	str	r2, [r3, #28]
 8002a60:	e023      	b.n	8002aaa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d11c      	bne.n	8002aa2 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	6819      	ldr	r1, [r3, #0]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	685a      	ldr	r2, [r3, #4]
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f000 fd8a 	bl	8003590 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	490e      	ldr	r1, [pc, #56]	; (8002ac0 <HAL_TIM_IC_ConfigChannel+0x144>)
 8002a88:	400a      	ands	r2, r1
 8002a8a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	69d9      	ldr	r1, [r3, #28]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	021a      	lsls	r2, r3, #8
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]
 8002aa0:	e003      	b.n	8002aaa <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002aa2:	2317      	movs	r3, #23
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	223c      	movs	r2, #60	; 0x3c
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]

  return status;
 8002ab2:	2317      	movs	r3, #23
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	781b      	ldrb	r3, [r3, #0]
}
 8002ab8:	0018      	movs	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b006      	add	sp, #24
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	fffff3ff 	.word	0xfffff3ff

08002ac4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2317      	movs	r3, #23
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	223c      	movs	r2, #60	; 0x3c
 8002adc:	5c9b      	ldrb	r3, [r3, r2]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0ad      	b.n	8002c42 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	223c      	movs	r2, #60	; 0x3c
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d100      	bne.n	8002af6 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002af4:	e076      	b.n	8002be4 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d900      	bls.n	8002afe <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002afc:	e095      	b.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d04e      	beq.n	8002ba2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d900      	bls.n	8002b0c <HAL_TIM_PWM_ConfigChannel+0x48>
 8002b0a:	e08e      	b.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x166>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_PWM_ConfigChannel+0x56>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d021      	beq.n	8002b5c <HAL_TIM_PWM_ConfigChannel+0x98>
 8002b18:	e087      	b.n	8002c2a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	0011      	movs	r1, r2
 8002b22:	0018      	movs	r0, r3
 8002b24:	f000 fa20 	bl	8002f68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699a      	ldr	r2, [r3, #24]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2108      	movs	r1, #8
 8002b34:	430a      	orrs	r2, r1
 8002b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699a      	ldr	r2, [r3, #24]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2104      	movs	r1, #4
 8002b44:	438a      	bics	r2, r1
 8002b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6999      	ldr	r1, [r3, #24]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	619a      	str	r2, [r3, #24]
      break;
 8002b5a:	e06b      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	0011      	movs	r1, r2
 8002b64:	0018      	movs	r0, r3
 8002b66:	f000 fa7d 	bl	8003064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699a      	ldr	r2, [r3, #24]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	0109      	lsls	r1, r1, #4
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	699a      	ldr	r2, [r3, #24]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4931      	ldr	r1, [pc, #196]	; (8002c4c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002b88:	400a      	ands	r2, r1
 8002b8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6999      	ldr	r1, [r3, #24]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	021a      	lsls	r2, r3, #8
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	619a      	str	r2, [r3, #24]
      break;
 8002ba0:	e048      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	0011      	movs	r1, r2
 8002baa:	0018      	movs	r0, r3
 8002bac:	f000 fad8 	bl	8003160 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	69da      	ldr	r2, [r3, #28]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2108      	movs	r1, #8
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2104      	movs	r1, #4
 8002bcc:	438a      	bics	r2, r1
 8002bce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	69d9      	ldr	r1, [r3, #28]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	61da      	str	r2, [r3, #28]
      break;
 8002be2:	e027      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	0011      	movs	r1, r2
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fb37 	bl	8003260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2180      	movs	r1, #128	; 0x80
 8002bfe:	0109      	lsls	r1, r1, #4
 8002c00:	430a      	orrs	r2, r1
 8002c02:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	69da      	ldr	r2, [r3, #28]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	490f      	ldr	r1, [pc, #60]	; (8002c4c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002c10:	400a      	ands	r2, r1
 8002c12:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	69d9      	ldr	r1, [r3, #28]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	021a      	lsls	r2, r3, #8
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	61da      	str	r2, [r3, #28]
      break;
 8002c28:	e004      	b.n	8002c34 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002c2a:	2317      	movs	r3, #23
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
      break;
 8002c32:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	223c      	movs	r2, #60	; 0x3c
 8002c38:	2100      	movs	r1, #0
 8002c3a:	5499      	strb	r1, [r3, r2]

  return status;
 8002c3c:	2317      	movs	r3, #23
 8002c3e:	18fb      	adds	r3, r7, r3
 8002c40:	781b      	ldrb	r3, [r3, #0]
}
 8002c42:	0018      	movs	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	b006      	add	sp, #24
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	fffffbff 	.word	0xfffffbff

08002c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5a:	230f      	movs	r3, #15
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2200      	movs	r2, #0
 8002c60:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	223c      	movs	r2, #60	; 0x3c
 8002c66:	5c9b      	ldrb	r3, [r3, r2]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_TIM_ConfigClockSource+0x20>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e0bc      	b.n	8002dea <HAL_TIM_ConfigClockSource+0x19a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	223c      	movs	r2, #60	; 0x3c
 8002c74:	2101      	movs	r1, #1
 8002c76:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	223d      	movs	r2, #61	; 0x3d
 8002c7c:	2102      	movs	r1, #2
 8002c7e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2277      	movs	r2, #119	; 0x77
 8002c8c:	4393      	bics	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4a58      	ldr	r2, [pc, #352]	; (8002df4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	0192      	lsls	r2, r2, #6
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d040      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0xde>
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	0192      	lsls	r2, r2, #6
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d900      	bls.n	8002cb6 <HAL_TIM_ConfigClockSource+0x66>
 8002cb4:	e088      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
 8002cb6:	2280      	movs	r2, #128	; 0x80
 8002cb8:	0152      	lsls	r2, r2, #5
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d100      	bne.n	8002cc0 <HAL_TIM_ConfigClockSource+0x70>
 8002cbe:	e088      	b.n	8002dd2 <HAL_TIM_ConfigClockSource+0x182>
 8002cc0:	2280      	movs	r2, #128	; 0x80
 8002cc2:	0152      	lsls	r2, r2, #5
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d900      	bls.n	8002cca <HAL_TIM_ConfigClockSource+0x7a>
 8002cc8:	e07e      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
 8002cca:	2b70      	cmp	r3, #112	; 0x70
 8002ccc:	d018      	beq.n	8002d00 <HAL_TIM_ConfigClockSource+0xb0>
 8002cce:	d900      	bls.n	8002cd2 <HAL_TIM_ConfigClockSource+0x82>
 8002cd0:	e07a      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
 8002cd2:	2b60      	cmp	r3, #96	; 0x60
 8002cd4:	d04f      	beq.n	8002d76 <HAL_TIM_ConfigClockSource+0x126>
 8002cd6:	d900      	bls.n	8002cda <HAL_TIM_ConfigClockSource+0x8a>
 8002cd8:	e076      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
 8002cda:	2b50      	cmp	r3, #80	; 0x50
 8002cdc:	d03b      	beq.n	8002d56 <HAL_TIM_ConfigClockSource+0x106>
 8002cde:	d900      	bls.n	8002ce2 <HAL_TIM_ConfigClockSource+0x92>
 8002ce0:	e072      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
 8002ce2:	2b40      	cmp	r3, #64	; 0x40
 8002ce4:	d057      	beq.n	8002d96 <HAL_TIM_ConfigClockSource+0x146>
 8002ce6:	d900      	bls.n	8002cea <HAL_TIM_ConfigClockSource+0x9a>
 8002ce8:	e06e      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
 8002cea:	2b30      	cmp	r3, #48	; 0x30
 8002cec:	d063      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x166>
 8002cee:	d86b      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	d060      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x166>
 8002cf4:	d868      	bhi.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d05d      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x166>
 8002cfa:	2b10      	cmp	r3, #16
 8002cfc:	d05b      	beq.n	8002db6 <HAL_TIM_ConfigClockSource+0x166>
 8002cfe:	e063      	b.n	8002dc8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6818      	ldr	r0, [r3, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	6899      	ldr	r1, [r3, #8]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685a      	ldr	r2, [r3, #4]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f000 fc9e 	bl	8003650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2277      	movs	r2, #119	; 0x77
 8002d20:	4313      	orrs	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
      break;
 8002d2c:	e052      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6899      	ldr	r1, [r3, #8]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f000 fc87 	bl	8003650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2180      	movs	r1, #128	; 0x80
 8002d4e:	01c9      	lsls	r1, r1, #7
 8002d50:	430a      	orrs	r2, r1
 8002d52:	609a      	str	r2, [r3, #8]
      break;
 8002d54:	e03e      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	6859      	ldr	r1, [r3, #4]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	001a      	movs	r2, r3
 8002d64:	f000 fb32 	bl	80033cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2150      	movs	r1, #80	; 0x50
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f000 fc54 	bl	800361c <TIM_ITRx_SetConfig>
      break;
 8002d74:	e02e      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6818      	ldr	r0, [r3, #0]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	001a      	movs	r2, r3
 8002d84:	f000 fb92 	bl	80034ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2160      	movs	r1, #96	; 0x60
 8002d8e:	0018      	movs	r0, r3
 8002d90:	f000 fc44 	bl	800361c <TIM_ITRx_SetConfig>
      break;
 8002d94:	e01e      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	6859      	ldr	r1, [r3, #4]
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	001a      	movs	r2, r3
 8002da4:	f000 fb12 	bl	80033cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2140      	movs	r1, #64	; 0x40
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 fc34 	bl	800361c <TIM_ITRx_SetConfig>
      break;
 8002db4:	e00e      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0019      	movs	r1, r3
 8002dc0:	0010      	movs	r0, r2
 8002dc2:	f000 fc2b 	bl	800361c <TIM_ITRx_SetConfig>
      break;
 8002dc6:	e005      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002dc8:	230f      	movs	r3, #15
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]
      break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002dd2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	223d      	movs	r2, #61	; 0x3d
 8002dd8:	2101      	movs	r1, #1
 8002dda:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	223c      	movs	r2, #60	; 0x3c
 8002de0:	2100      	movs	r1, #0
 8002de2:	5499      	strb	r1, [r3, r2]

  return status;
 8002de4:	230f      	movs	r3, #15
 8002de6:	18fb      	adds	r3, r7, r3
 8002de8:	781b      	ldrb	r3, [r3, #0]
}
 8002dea:	0018      	movs	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b004      	add	sp, #16
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	ffff00ff 	.word	0xffff00ff

08002df8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d01e      	beq.n	8002e4a <HAL_TIM_ReadCapturedValue+0x52>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b0c      	cmp	r3, #12
 8002e10:	d820      	bhi.n	8002e54 <HAL_TIM_ReadCapturedValue+0x5c>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d013      	beq.n	8002e40 <HAL_TIM_ReadCapturedValue+0x48>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d81a      	bhi.n	8002e54 <HAL_TIM_ReadCapturedValue+0x5c>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_TIM_ReadCapturedValue+0x34>
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d005      	beq.n	8002e36 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002e2a:	e013      	b.n	8002e54 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e32:	60fb      	str	r3, [r7, #12]
      break;
 8002e34:	e00f      	b.n	8002e56 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	60fb      	str	r3, [r7, #12]
      break;
 8002e3e:	e00a      	b.n	8002e56 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	60fb      	str	r3, [r7, #12]
      break;
 8002e48:	e005      	b.n	8002e56 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	60fb      	str	r3, [r7, #12]
      break;
 8002e52:	e000      	b.n	8002e56 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002e54:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8002e56:	68fb      	ldr	r3, [r7, #12]
}
 8002e58:	0018      	movs	r0, r3
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	b004      	add	sp, #16
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e68:	46c0      	nop			; (mov r8, r8)
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	b002      	add	sp, #8
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e78:	46c0      	nop			; (mov r8, r8)
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	b002      	add	sp, #8
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a2b      	ldr	r2, [pc, #172]	; (8002f50 <TIM_Base_SetConfig+0xc0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d003      	beq.n	8002eb0 <TIM_Base_SetConfig+0x20>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a2a      	ldr	r2, [pc, #168]	; (8002f54 <TIM_Base_SetConfig+0xc4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d108      	bne.n	8002ec2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2270      	movs	r2, #112	; 0x70
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a22      	ldr	r2, [pc, #136]	; (8002f50 <TIM_Base_SetConfig+0xc0>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00f      	beq.n	8002eea <TIM_Base_SetConfig+0x5a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a21      	ldr	r2, [pc, #132]	; (8002f54 <TIM_Base_SetConfig+0xc4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00b      	beq.n	8002eea <TIM_Base_SetConfig+0x5a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <TIM_Base_SetConfig+0xc8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d007      	beq.n	8002eea <TIM_Base_SetConfig+0x5a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <TIM_Base_SetConfig+0xcc>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d003      	beq.n	8002eea <TIM_Base_SetConfig+0x5a>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <TIM_Base_SetConfig+0xd0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d108      	bne.n	8002efc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4a1d      	ldr	r2, [pc, #116]	; (8002f64 <TIM_Base_SetConfig+0xd4>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2280      	movs	r2, #128	; 0x80
 8002f00:	4393      	bics	r3, r2
 8002f02:	001a      	movs	r2, r3
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689a      	ldr	r2, [r3, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a0a      	ldr	r2, [pc, #40]	; (8002f50 <TIM_Base_SetConfig+0xc0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_Base_SetConfig+0xaa>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <TIM_Base_SetConfig+0xcc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_Base_SetConfig+0xaa>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <TIM_Base_SetConfig+0xd0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d103      	bne.n	8002f42 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	615a      	str	r2, [r3, #20]
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b004      	add	sp, #16
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40012c00 	.word	0x40012c00
 8002f54:	40000400 	.word	0x40000400
 8002f58:	40002000 	.word	0x40002000
 8002f5c:	40014400 	.word	0x40014400
 8002f60:	40014800 	.word	0x40014800
 8002f64:	fffffcff 	.word	0xfffffcff

08002f68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	2201      	movs	r2, #1
 8002f78:	4393      	bics	r3, r2
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2270      	movs	r2, #112	; 0x70
 8002f96:	4393      	bics	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2203      	movs	r2, #3
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	4393      	bics	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a23      	ldr	r2, [pc, #140]	; (8003050 <TIM_OC1_SetConfig+0xe8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d007      	beq.n	8002fd6 <TIM_OC1_SetConfig+0x6e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a22      	ldr	r2, [pc, #136]	; (8003054 <TIM_OC1_SetConfig+0xec>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_OC1_SetConfig+0x6e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a21      	ldr	r2, [pc, #132]	; (8003058 <TIM_OC1_SetConfig+0xf0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10c      	bne.n	8002ff0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2208      	movs	r2, #8
 8002fda:	4393      	bics	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	2204      	movs	r2, #4
 8002fec:	4393      	bics	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <TIM_OC1_SetConfig+0xe8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d007      	beq.n	8003008 <TIM_OC1_SetConfig+0xa0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a16      	ldr	r2, [pc, #88]	; (8003054 <TIM_OC1_SetConfig+0xec>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d003      	beq.n	8003008 <TIM_OC1_SetConfig+0xa0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a15      	ldr	r2, [pc, #84]	; (8003058 <TIM_OC1_SetConfig+0xf0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d111      	bne.n	800302c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4a14      	ldr	r2, [pc, #80]	; (800305c <TIM_OC1_SetConfig+0xf4>)
 800300c:	4013      	ands	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <TIM_OC1_SetConfig+0xf8>)
 8003014:	4013      	ands	r3, r2
 8003016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4313      	orrs	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	621a      	str	r2, [r3, #32]
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	b006      	add	sp, #24
 800304c:	bd80      	pop	{r7, pc}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	40012c00 	.word	0x40012c00
 8003054:	40014400 	.word	0x40014400
 8003058:	40014800 	.word	0x40014800
 800305c:	fffffeff 	.word	0xfffffeff
 8003060:	fffffdff 	.word	0xfffffdff

08003064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	2210      	movs	r2, #16
 8003074:	4393      	bics	r3, r2
 8003076:	001a      	movs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a2c      	ldr	r2, [pc, #176]	; (8003144 <TIM_OC2_SetConfig+0xe0>)
 8003092:	4013      	ands	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	4a2b      	ldr	r2, [pc, #172]	; (8003148 <TIM_OC2_SetConfig+0xe4>)
 800309a:	4013      	ands	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	021b      	lsls	r3, r3, #8
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2220      	movs	r2, #32
 80030ae:	4393      	bics	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <TIM_OC2_SetConfig+0xe8>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d10d      	bne.n	80030e2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	2280      	movs	r2, #128	; 0x80
 80030ca:	4393      	bics	r3, r2
 80030cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	011b      	lsls	r3, r3, #4
 80030d4:	697a      	ldr	r2, [r7, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2240      	movs	r2, #64	; 0x40
 80030de:	4393      	bics	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a19      	ldr	r2, [pc, #100]	; (800314c <TIM_OC2_SetConfig+0xe8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d007      	beq.n	80030fa <TIM_OC2_SetConfig+0x96>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a18      	ldr	r2, [pc, #96]	; (8003150 <TIM_OC2_SetConfig+0xec>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d003      	beq.n	80030fa <TIM_OC2_SetConfig+0x96>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a17      	ldr	r2, [pc, #92]	; (8003154 <TIM_OC2_SetConfig+0xf0>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d113      	bne.n	8003122 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4a16      	ldr	r2, [pc, #88]	; (8003158 <TIM_OC2_SetConfig+0xf4>)
 80030fe:	4013      	ands	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4a15      	ldr	r2, [pc, #84]	; (800315c <TIM_OC2_SetConfig+0xf8>)
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	621a      	str	r2, [r3, #32]
}
 800313c:	46c0      	nop			; (mov r8, r8)
 800313e:	46bd      	mov	sp, r7
 8003140:	b006      	add	sp, #24
 8003142:	bd80      	pop	{r7, pc}
 8003144:	ffff8fff 	.word	0xffff8fff
 8003148:	fffffcff 	.word	0xfffffcff
 800314c:	40012c00 	.word	0x40012c00
 8003150:	40014400 	.word	0x40014400
 8003154:	40014800 	.word	0x40014800
 8003158:	fffffbff 	.word	0xfffffbff
 800315c:	fffff7ff 	.word	0xfffff7ff

08003160 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	4a33      	ldr	r2, [pc, #204]	; (800323c <TIM_OC3_SetConfig+0xdc>)
 8003170:	401a      	ands	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2270      	movs	r2, #112	; 0x70
 800318c:	4393      	bics	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2203      	movs	r2, #3
 8003194:	4393      	bics	r3, r2
 8003196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4a26      	ldr	r2, [pc, #152]	; (8003240 <TIM_OC3_SetConfig+0xe0>)
 80031a6:	4013      	ands	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a22      	ldr	r2, [pc, #136]	; (8003244 <TIM_OC3_SetConfig+0xe4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d10d      	bne.n	80031da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4a21      	ldr	r2, [pc, #132]	; (8003248 <TIM_OC3_SetConfig+0xe8>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4a1d      	ldr	r2, [pc, #116]	; (800324c <TIM_OC3_SetConfig+0xec>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a19      	ldr	r2, [pc, #100]	; (8003244 <TIM_OC3_SetConfig+0xe4>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d007      	beq.n	80031f2 <TIM_OC3_SetConfig+0x92>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <TIM_OC3_SetConfig+0xf0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d003      	beq.n	80031f2 <TIM_OC3_SetConfig+0x92>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a19      	ldr	r2, [pc, #100]	; (8003254 <TIM_OC3_SetConfig+0xf4>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d113      	bne.n	800321a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <TIM_OC3_SetConfig+0xf8>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	4a17      	ldr	r2, [pc, #92]	; (800325c <TIM_OC3_SetConfig+0xfc>)
 80031fe:	4013      	ands	r3, r2
 8003200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	621a      	str	r2, [r3, #32]
}
 8003234:	46c0      	nop			; (mov r8, r8)
 8003236:	46bd      	mov	sp, r7
 8003238:	b006      	add	sp, #24
 800323a:	bd80      	pop	{r7, pc}
 800323c:	fffffeff 	.word	0xfffffeff
 8003240:	fffffdff 	.word	0xfffffdff
 8003244:	40012c00 	.word	0x40012c00
 8003248:	fffff7ff 	.word	0xfffff7ff
 800324c:	fffffbff 	.word	0xfffffbff
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800
 8003258:	ffffefff 	.word	0xffffefff
 800325c:	ffffdfff 	.word	0xffffdfff

08003260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b086      	sub	sp, #24
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	4a26      	ldr	r2, [pc, #152]	; (8003308 <TIM_OC4_SetConfig+0xa8>)
 8003270:	401a      	ands	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a20      	ldr	r2, [pc, #128]	; (800330c <TIM_OC4_SetConfig+0xac>)
 800328c:	4013      	ands	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a1f      	ldr	r2, [pc, #124]	; (8003310 <TIM_OC4_SetConfig+0xb0>)
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4a1b      	ldr	r2, [pc, #108]	; (8003314 <TIM_OC4_SetConfig+0xb4>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	031b      	lsls	r3, r3, #12
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a17      	ldr	r2, [pc, #92]	; (8003318 <TIM_OC4_SetConfig+0xb8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_OC4_SetConfig+0x70>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a16      	ldr	r2, [pc, #88]	; (800331c <TIM_OC4_SetConfig+0xbc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_OC4_SetConfig+0x70>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a15      	ldr	r2, [pc, #84]	; (8003320 <TIM_OC4_SetConfig+0xc0>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d109      	bne.n	80032e4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	4a14      	ldr	r2, [pc, #80]	; (8003324 <TIM_OC4_SetConfig+0xc4>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	019b      	lsls	r3, r3, #6
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685a      	ldr	r2, [r3, #4]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	621a      	str	r2, [r3, #32]
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	ffffefff 	.word	0xffffefff
 800330c:	ffff8fff 	.word	0xffff8fff
 8003310:	fffffcff 	.word	0xfffffcff
 8003314:	ffffdfff 	.word	0xffffdfff
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40014400 	.word	0x40014400
 8003320:	40014800 	.word	0x40014800
 8003324:	ffffbfff 	.word	0xffffbfff

08003328 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b086      	sub	sp, #24
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	2201      	movs	r2, #1
 800333c:	4393      	bics	r3, r2
 800333e:	001a      	movs	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a1c      	ldr	r2, [pc, #112]	; (80033c4 <TIM_TI1_SetConfig+0x9c>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d003      	beq.n	8003360 <TIM_TI1_SetConfig+0x38>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4a1b      	ldr	r2, [pc, #108]	; (80033c8 <TIM_TI1_SetConfig+0xa0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d101      	bne.n	8003364 <TIM_TI1_SetConfig+0x3c>
 8003360:	2301      	movs	r3, #1
 8003362:	e000      	b.n	8003366 <TIM_TI1_SetConfig+0x3e>
 8003364:	2300      	movs	r3, #0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d008      	beq.n	800337c <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2203      	movs	r2, #3
 800336e:	4393      	bics	r3, r2
 8003370:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4313      	orrs	r3, r2
 8003378:	617b      	str	r3, [r7, #20]
 800337a:	e003      	b.n	8003384 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	2201      	movs	r2, #1
 8003380:	4313      	orrs	r3, r2
 8003382:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	22f0      	movs	r2, #240	; 0xf0
 8003388:	4393      	bics	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	22ff      	movs	r2, #255	; 0xff
 8003392:	4013      	ands	r3, r2
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	220a      	movs	r2, #10
 800339e:	4393      	bics	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	220a      	movs	r2, #10
 80033a6:	4013      	ands	r3, r2
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	621a      	str	r2, [r3, #32]
}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	46bd      	mov	sp, r7
 80033be:	b006      	add	sp, #24
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	46c0      	nop			; (mov r8, r8)
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40000400 	.word	0x40000400

080033cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	2201      	movs	r2, #1
 80033e4:	4393      	bics	r3, r2
 80033e6:	001a      	movs	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	22f0      	movs	r2, #240	; 0xf0
 80033f6:	4393      	bics	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	4313      	orrs	r3, r2
 8003402:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	220a      	movs	r2, #10
 8003408:	4393      	bics	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	621a      	str	r2, [r3, #32]
}
 8003420:	46c0      	nop			; (mov r8, r8)
 8003422:	46bd      	mov	sp, r7
 8003424:	b006      	add	sp, #24
 8003426:	bd80      	pop	{r7, pc}

08003428 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a1b      	ldr	r3, [r3, #32]
 800343a:	2210      	movs	r2, #16
 800343c:	4393      	bics	r3, r2
 800343e:	001a      	movs	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <TIM_TI2_SetConfig+0x7c>)
 8003454:	4013      	ands	r3, r2
 8003456:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	021b      	lsls	r3, r3, #8
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4313      	orrs	r3, r2
 8003460:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <TIM_TI2_SetConfig+0x80>)
 8003466:	4013      	ands	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	031b      	lsls	r3, r3, #12
 800346e:	041b      	lsls	r3, r3, #16
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	4313      	orrs	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	22a0      	movs	r2, #160	; 0xa0
 800347c:	4393      	bics	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	22a0      	movs	r2, #160	; 0xa0
 8003486:	4013      	ands	r3, r2
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	fffffcff 	.word	0xfffffcff
 80034a8:	ffff0fff 	.word	0xffff0fff

080034ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	2210      	movs	r2, #16
 80034be:	4393      	bics	r3, r2
 80034c0:	001a      	movs	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	4a0d      	ldr	r2, [pc, #52]	; (800350c <TIM_TI2_ConfigInputStage+0x60>)
 80034d6:	4013      	ands	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	031b      	lsls	r3, r3, #12
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	22a0      	movs	r2, #160	; 0xa0
 80034e8:	4393      	bics	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	46bd      	mov	sp, r7
 8003506:	b006      	add	sp, #24
 8003508:	bd80      	pop	{r7, pc}
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	ffff0fff 	.word	0xffff0fff

08003510 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b086      	sub	sp, #24
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
 800351c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6a1b      	ldr	r3, [r3, #32]
 8003522:	4a19      	ldr	r2, [pc, #100]	; (8003588 <TIM_TI3_SetConfig+0x78>)
 8003524:	401a      	ands	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2203      	movs	r2, #3
 800353a:	4393      	bics	r3, r2
 800353c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	22f0      	movs	r2, #240	; 0xf0
 800354a:	4393      	bics	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	22ff      	movs	r2, #255	; 0xff
 8003554:	4013      	ands	r3, r2
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	4313      	orrs	r3, r2
 800355a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4a0b      	ldr	r2, [pc, #44]	; (800358c <TIM_TI3_SetConfig+0x7c>)
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	021a      	lsls	r2, r3, #8
 8003568:	23a0      	movs	r3, #160	; 0xa0
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	4013      	ands	r3, r2
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	693a      	ldr	r2, [r7, #16]
 800357e:	621a      	str	r2, [r3, #32]
}
 8003580:	46c0      	nop			; (mov r8, r8)
 8003582:	46bd      	mov	sp, r7
 8003584:	b006      	add	sp, #24
 8003586:	bd80      	pop	{r7, pc}
 8003588:	fffffeff 	.word	0xfffffeff
 800358c:	fffff5ff 	.word	0xfffff5ff

08003590 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
 800359c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	4a1a      	ldr	r2, [pc, #104]	; (800360c <TIM_TI4_SetConfig+0x7c>)
 80035a4:	401a      	ands	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	4a15      	ldr	r2, [pc, #84]	; (8003610 <TIM_TI4_SetConfig+0x80>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	697a      	ldr	r2, [r7, #20]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	4a12      	ldr	r2, [pc, #72]	; (8003614 <TIM_TI4_SetConfig+0x84>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	031b      	lsls	r3, r3, #12
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <TIM_TI4_SetConfig+0x88>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	031a      	lsls	r2, r3, #12
 80035ea:	23a0      	movs	r3, #160	; 0xa0
 80035ec:	021b      	lsls	r3, r3, #8
 80035ee:	4013      	ands	r3, r2
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	621a      	str	r2, [r3, #32]
}
 8003602:	46c0      	nop			; (mov r8, r8)
 8003604:	46bd      	mov	sp, r7
 8003606:	b006      	add	sp, #24
 8003608:	bd80      	pop	{r7, pc}
 800360a:	46c0      	nop			; (mov r8, r8)
 800360c:	ffffefff 	.word	0xffffefff
 8003610:	fffffcff 	.word	0xfffffcff
 8003614:	ffff0fff 	.word	0xffff0fff
 8003618:	ffff5fff 	.word	0xffff5fff

0800361c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2270      	movs	r2, #112	; 0x70
 8003630:	4393      	bics	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	2207      	movs	r2, #7
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	609a      	str	r2, [r3, #8]
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b004      	add	sp, #16
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
 800365c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	4a09      	ldr	r2, [pc, #36]	; (800368c <TIM_ETR_SetConfig+0x3c>)
 8003668:	4013      	ands	r3, r2
 800366a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	021a      	lsls	r2, r3, #8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	431a      	orrs	r2, r3
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4313      	orrs	r3, r2
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	4313      	orrs	r3, r2
 800367c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	609a      	str	r2, [r3, #8]
}
 8003684:	46c0      	nop			; (mov r8, r8)
 8003686:	46bd      	mov	sp, r7
 8003688:	b006      	add	sp, #24
 800368a:	bd80      	pop	{r7, pc}
 800368c:	ffff00ff 	.word	0xffff00ff

08003690 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	221f      	movs	r2, #31
 80036a0:	4013      	ands	r3, r2
 80036a2:	2201      	movs	r2, #1
 80036a4:	409a      	lsls	r2, r3
 80036a6:	0013      	movs	r3, r2
 80036a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	697a      	ldr	r2, [r7, #20]
 80036b0:	43d2      	mvns	r2, r2
 80036b2:	401a      	ands	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1a      	ldr	r2, [r3, #32]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	211f      	movs	r1, #31
 80036c0:	400b      	ands	r3, r1
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4099      	lsls	r1, r3
 80036c6:	000b      	movs	r3, r1
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	621a      	str	r2, [r3, #32]
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b006      	add	sp, #24
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	223c      	movs	r2, #60	; 0x3c
 80036e6:	5c9b      	ldrb	r3, [r3, r2]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d101      	bne.n	80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ec:	2302      	movs	r3, #2
 80036ee:	e03c      	b.n	800376a <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	223c      	movs	r2, #60	; 0x3c
 80036f4:	2101      	movs	r1, #1
 80036f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	223d      	movs	r2, #61	; 0x3d
 80036fc:	2102      	movs	r1, #2
 80036fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2270      	movs	r2, #112	; 0x70
 8003714:	4393      	bics	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a11      	ldr	r2, [pc, #68]	; (8003774 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d004      	beq.n	800373e <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0f      	ldr	r2, [pc, #60]	; (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d10c      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2280      	movs	r2, #128	; 0x80
 8003742:	4393      	bics	r3, r2
 8003744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	4313      	orrs	r3, r2
 800374e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	223d      	movs	r2, #61	; 0x3d
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	223c      	movs	r2, #60	; 0x3c
 8003764:	2100      	movs	r1, #0
 8003766:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	40012c00 	.word	0x40012c00
 8003778:	40000400 	.word	0x40000400

0800377c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	223c      	movs	r2, #60	; 0x3c
 800378e:	5c9b      	ldrb	r3, [r3, r2]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d101      	bne.n	8003798 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003794:	2302      	movs	r3, #2
 8003796:	e03e      	b.n	8003816 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	223c      	movs	r2, #60	; 0x3c
 800379c:	2101      	movs	r1, #1
 800379e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	22ff      	movs	r2, #255	; 0xff
 80037a4:	4393      	bics	r3, r2
 80037a6:	001a      	movs	r2, r3
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80037b4:	401a      	ands	r2, r3
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80037c2:	401a      	ands	r2, r3
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a16      	ldr	r2, [pc, #88]	; (8003828 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80037d0:	401a      	ands	r2, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80037de:	401a      	ands	r2, r3
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a11      	ldr	r2, [pc, #68]	; (8003830 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80037ec:	401a      	ands	r2, r3
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80037fa:	401a      	ands	r2, r3
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	223c      	movs	r2, #60	; 0x3c
 8003810:	2100      	movs	r1, #0
 8003812:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	0018      	movs	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bd80      	pop	{r7, pc}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	fffffcff 	.word	0xfffffcff
 8003824:	fffffbff 	.word	0xfffffbff
 8003828:	fffff7ff 	.word	0xfffff7ff
 800382c:	ffffefff 	.word	0xffffefff
 8003830:	ffffdfff 	.word	0xffffdfff
 8003834:	ffffbfff 	.word	0xffffbfff

08003838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003840:	46c0      	nop			; (mov r8, r8)
 8003842:	46bd      	mov	sp, r7
 8003844:	b002      	add	sp, #8
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b002      	add	sp, #8
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d101      	bne.n	800386a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e044      	b.n	80038f4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800386e:	2b00      	cmp	r3, #0
 8003870:	d107      	bne.n	8003882 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2274      	movs	r2, #116	; 0x74
 8003876:	2100      	movs	r1, #0
 8003878:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	0018      	movs	r0, r3
 800387e:	f7fd faa5 	bl	8000dcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2224      	movs	r2, #36	; 0x24
 8003886:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2101      	movs	r1, #1
 8003894:	438a      	bics	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	0018      	movs	r0, r3
 800389c:	f000 f8da 	bl	8003a54 <UART_SetConfig>
 80038a0:	0003      	movs	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e024      	b.n	80038f4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	0018      	movs	r0, r3
 80038b6:	f000 f9f7 	bl	8003ca8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	490d      	ldr	r1, [pc, #52]	; (80038fc <HAL_UART_Init+0xa4>)
 80038c6:	400a      	ands	r2, r1
 80038c8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2108      	movs	r1, #8
 80038d6:	438a      	bics	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2101      	movs	r1, #1
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 fa8f 	bl	8003e10 <UART_CheckIdleState>
 80038f2:	0003      	movs	r3, r0
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b002      	add	sp, #8
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	fffff7ff 	.word	0xfffff7ff

08003900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08a      	sub	sp, #40	; 0x28
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	1dbb      	adds	r3, r7, #6
 800390e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003914:	2b20      	cmp	r3, #32
 8003916:	d000      	beq.n	800391a <HAL_UART_Transmit+0x1a>
 8003918:	e096      	b.n	8003a48 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_UART_Transmit+0x28>
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	881b      	ldrh	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e08e      	b.n	8003a4a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	689a      	ldr	r2, [r3, #8]
 8003930:	2380      	movs	r3, #128	; 0x80
 8003932:	015b      	lsls	r3, r3, #5
 8003934:	429a      	cmp	r2, r3
 8003936:	d109      	bne.n	800394c <HAL_UART_Transmit+0x4c>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d105      	bne.n	800394c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2201      	movs	r2, #1
 8003944:	4013      	ands	r3, r2
 8003946:	d001      	beq.n	800394c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	e07e      	b.n	8003a4a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2274      	movs	r2, #116	; 0x74
 8003950:	5c9b      	ldrb	r3, [r3, r2]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d101      	bne.n	800395a <HAL_UART_Transmit+0x5a>
 8003956:	2302      	movs	r3, #2
 8003958:	e077      	b.n	8003a4a <HAL_UART_Transmit+0x14a>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2274      	movs	r2, #116	; 0x74
 800395e:	2101      	movs	r1, #1
 8003960:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2280      	movs	r2, #128	; 0x80
 8003966:	2100      	movs	r1, #0
 8003968:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2221      	movs	r2, #33	; 0x21
 800396e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003970:	f7fd fb32 	bl	8000fd8 <HAL_GetTick>
 8003974:	0003      	movs	r3, r0
 8003976:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1dba      	adds	r2, r7, #6
 800397c:	2150      	movs	r1, #80	; 0x50
 800397e:	8812      	ldrh	r2, [r2, #0]
 8003980:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	1dba      	adds	r2, r7, #6
 8003986:	2152      	movs	r1, #82	; 0x52
 8003988:	8812      	ldrh	r2, [r2, #0]
 800398a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	2380      	movs	r3, #128	; 0x80
 8003992:	015b      	lsls	r3, r3, #5
 8003994:	429a      	cmp	r2, r3
 8003996:	d108      	bne.n	80039aa <HAL_UART_Transmit+0xaa>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d104      	bne.n	80039aa <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	61bb      	str	r3, [r7, #24]
 80039a8:	e003      	b.n	80039b2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ae:	2300      	movs	r3, #0
 80039b0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2274      	movs	r2, #116	; 0x74
 80039b6:	2100      	movs	r1, #0
 80039b8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80039ba:	e02d      	b.n	8003a18 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	0013      	movs	r3, r2
 80039c6:	2200      	movs	r2, #0
 80039c8:	2180      	movs	r1, #128	; 0x80
 80039ca:	f000 fa69 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d001      	beq.n	80039d6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e039      	b.n	8003a4a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	881a      	ldrh	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	05d2      	lsls	r2, r2, #23
 80039e6:	0dd2      	lsrs	r2, r2, #23
 80039e8:	b292      	uxth	r2, r2
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	3302      	adds	r3, #2
 80039f0:	61bb      	str	r3, [r7, #24]
 80039f2:	e008      	b.n	8003a06 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	781a      	ldrb	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	b292      	uxth	r2, r2
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	3301      	adds	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2252      	movs	r2, #82	; 0x52
 8003a0a:	5a9b      	ldrh	r3, [r3, r2]
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	3b01      	subs	r3, #1
 8003a10:	b299      	uxth	r1, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2252      	movs	r2, #82	; 0x52
 8003a16:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2252      	movs	r2, #82	; 0x52
 8003a1c:	5a9b      	ldrh	r3, [r3, r2]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1cb      	bne.n	80039bc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2140      	movs	r1, #64	; 0x40
 8003a32:	f000 fa35 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e005      	b.n	8003a4a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	e000      	b.n	8003a4a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003a48:	2302      	movs	r3, #2
  }
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b008      	add	sp, #32
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a5c:	231e      	movs	r3, #30
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	431a      	orrs	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a84      	ldr	r2, [pc, #528]	; (8003c94 <UART_SetConfig+0x240>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	0019      	movs	r1, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	4a7f      	ldr	r2, [pc, #508]	; (8003c98 <UART_SetConfig+0x244>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	0019      	movs	r1, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	4a76      	ldr	r2, [pc, #472]	; (8003c9c <UART_SetConfig+0x248>)
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ad0:	4b73      	ldr	r3, [pc, #460]	; (8003ca0 <UART_SetConfig+0x24c>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d00d      	beq.n	8003af8 <UART_SetConfig+0xa4>
 8003adc:	d81b      	bhi.n	8003b16 <UART_SetConfig+0xc2>
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d014      	beq.n	8003b0c <UART_SetConfig+0xb8>
 8003ae2:	d818      	bhi.n	8003b16 <UART_SetConfig+0xc2>
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <UART_SetConfig+0x9a>
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d00a      	beq.n	8003b02 <UART_SetConfig+0xae>
 8003aec:	e013      	b.n	8003b16 <UART_SetConfig+0xc2>
 8003aee:	231f      	movs	r3, #31
 8003af0:	18fb      	adds	r3, r7, r3
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
 8003af6:	e012      	b.n	8003b1e <UART_SetConfig+0xca>
 8003af8:	231f      	movs	r3, #31
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	2202      	movs	r2, #2
 8003afe:	701a      	strb	r2, [r3, #0]
 8003b00:	e00d      	b.n	8003b1e <UART_SetConfig+0xca>
 8003b02:	231f      	movs	r3, #31
 8003b04:	18fb      	adds	r3, r7, r3
 8003b06:	2204      	movs	r2, #4
 8003b08:	701a      	strb	r2, [r3, #0]
 8003b0a:	e008      	b.n	8003b1e <UART_SetConfig+0xca>
 8003b0c:	231f      	movs	r3, #31
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2208      	movs	r2, #8
 8003b12:	701a      	strb	r2, [r3, #0]
 8003b14:	e003      	b.n	8003b1e <UART_SetConfig+0xca>
 8003b16:	231f      	movs	r3, #31
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	2210      	movs	r2, #16
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	021b      	lsls	r3, r3, #8
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d15d      	bne.n	8003be8 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003b2c:	231f      	movs	r3, #31
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d015      	beq.n	8003b62 <UART_SetConfig+0x10e>
 8003b36:	dc18      	bgt.n	8003b6a <UART_SetConfig+0x116>
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d00d      	beq.n	8003b58 <UART_SetConfig+0x104>
 8003b3c:	dc15      	bgt.n	8003b6a <UART_SetConfig+0x116>
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <UART_SetConfig+0xf4>
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d005      	beq.n	8003b52 <UART_SetConfig+0xfe>
 8003b46:	e010      	b.n	8003b6a <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b48:	f7fe f912 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8003b4c:	0003      	movs	r3, r0
 8003b4e:	61bb      	str	r3, [r7, #24]
        break;
 8003b50:	e012      	b.n	8003b78 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b52:	4b54      	ldr	r3, [pc, #336]	; (8003ca4 <UART_SetConfig+0x250>)
 8003b54:	61bb      	str	r3, [r7, #24]
        break;
 8003b56:	e00f      	b.n	8003b78 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b58:	f7fe f89c 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8003b5c:	0003      	movs	r3, r0
 8003b5e:	61bb      	str	r3, [r7, #24]
        break;
 8003b60:	e00a      	b.n	8003b78 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b62:	2380      	movs	r3, #128	; 0x80
 8003b64:	021b      	lsls	r3, r3, #8
 8003b66:	61bb      	str	r3, [r7, #24]
        break;
 8003b68:	e006      	b.n	8003b78 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b6e:	231e      	movs	r3, #30
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	2201      	movs	r2, #1
 8003b74:	701a      	strb	r2, [r3, #0]
        break;
 8003b76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d100      	bne.n	8003b80 <UART_SetConfig+0x12c>
 8003b7e:	e07b      	b.n	8003c78 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	005a      	lsls	r2, r3, #1
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	085b      	lsrs	r3, r3, #1
 8003b8a:	18d2      	adds	r2, r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	0019      	movs	r1, r3
 8003b92:	0010      	movs	r0, r2
 8003b94:	f7fc fac0 	bl	8000118 <__udivsi3>
 8003b98:	0003      	movs	r3, r0
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	2b0f      	cmp	r3, #15
 8003ba2:	d91c      	bls.n	8003bde <UART_SetConfig+0x18a>
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	025b      	lsls	r3, r3, #9
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d217      	bcs.n	8003bde <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	200e      	movs	r0, #14
 8003bb4:	183b      	adds	r3, r7, r0
 8003bb6:	210f      	movs	r1, #15
 8003bb8:	438a      	bics	r2, r1
 8003bba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2207      	movs	r2, #7
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b299      	uxth	r1, r3
 8003bc8:	183b      	adds	r3, r7, r0
 8003bca:	183a      	adds	r2, r7, r0
 8003bcc:	8812      	ldrh	r2, [r2, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	183a      	adds	r2, r7, r0
 8003bd8:	8812      	ldrh	r2, [r2, #0]
 8003bda:	60da      	str	r2, [r3, #12]
 8003bdc:	e04c      	b.n	8003c78 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003bde:	231e      	movs	r3, #30
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
 8003be6:	e047      	b.n	8003c78 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003be8:	231f      	movs	r3, #31
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b08      	cmp	r3, #8
 8003bf0:	d015      	beq.n	8003c1e <UART_SetConfig+0x1ca>
 8003bf2:	dc18      	bgt.n	8003c26 <UART_SetConfig+0x1d2>
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d00d      	beq.n	8003c14 <UART_SetConfig+0x1c0>
 8003bf8:	dc15      	bgt.n	8003c26 <UART_SetConfig+0x1d2>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0x1b0>
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d005      	beq.n	8003c0e <UART_SetConfig+0x1ba>
 8003c02:	e010      	b.n	8003c26 <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c04:	f7fe f8b4 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	61bb      	str	r3, [r7, #24]
        break;
 8003c0c:	e012      	b.n	8003c34 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c0e:	4b25      	ldr	r3, [pc, #148]	; (8003ca4 <UART_SetConfig+0x250>)
 8003c10:	61bb      	str	r3, [r7, #24]
        break;
 8003c12:	e00f      	b.n	8003c34 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c14:	f7fe f83e 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8003c18:	0003      	movs	r3, r0
 8003c1a:	61bb      	str	r3, [r7, #24]
        break;
 8003c1c:	e00a      	b.n	8003c34 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c1e:	2380      	movs	r3, #128	; 0x80
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	61bb      	str	r3, [r7, #24]
        break;
 8003c24:	e006      	b.n	8003c34 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c2a:	231e      	movs	r3, #30
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
        break;
 8003c32:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01e      	beq.n	8003c78 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	085a      	lsrs	r2, r3, #1
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	18d2      	adds	r2, r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	0019      	movs	r1, r3
 8003c4a:	0010      	movs	r0, r2
 8003c4c:	f7fc fa64 	bl	8000118 <__udivsi3>
 8003c50:	0003      	movs	r3, r0
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b0f      	cmp	r3, #15
 8003c5a:	d909      	bls.n	8003c70 <UART_SetConfig+0x21c>
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	025b      	lsls	r3, r3, #9
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d204      	bcs.n	8003c70 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	60da      	str	r2, [r3, #12]
 8003c6e:	e003      	b.n	8003c78 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003c70:	231e      	movs	r3, #30
 8003c72:	18fb      	adds	r3, r7, r3
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c84:	231e      	movs	r3, #30
 8003c86:	18fb      	adds	r3, r7, r3
 8003c88:	781b      	ldrb	r3, [r3, #0]
}
 8003c8a:	0018      	movs	r0, r3
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	b008      	add	sp, #32
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	ffff69f3 	.word	0xffff69f3
 8003c98:	ffffcfff 	.word	0xffffcfff
 8003c9c:	fffff4ff 	.word	0xfffff4ff
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	007a1200 	.word	0x007a1200

08003ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4a4a      	ldr	r2, [pc, #296]	; (8003dec <UART_AdvFeatureConfig+0x144>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0019      	movs	r1, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4a43      	ldr	r2, [pc, #268]	; (8003df0 <UART_AdvFeatureConfig+0x148>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	d00b      	beq.n	8003d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	4a3b      	ldr	r2, [pc, #236]	; (8003df4 <UART_AdvFeatureConfig+0x14c>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	0019      	movs	r1, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2208      	movs	r2, #8
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d00b      	beq.n	8003d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4a34      	ldr	r2, [pc, #208]	; (8003df8 <UART_AdvFeatureConfig+0x150>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	2210      	movs	r2, #16
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	4a2c      	ldr	r2, [pc, #176]	; (8003dfc <UART_AdvFeatureConfig+0x154>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2220      	movs	r2, #32
 8003d60:	4013      	ands	r3, r2
 8003d62:	d00b      	beq.n	8003d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <UART_AdvFeatureConfig+0x158>)
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	0019      	movs	r1, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	2240      	movs	r2, #64	; 0x40
 8003d82:	4013      	ands	r3, r2
 8003d84:	d01d      	beq.n	8003dc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a1d      	ldr	r2, [pc, #116]	; (8003e04 <UART_AdvFeatureConfig+0x15c>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	0019      	movs	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da2:	2380      	movs	r3, #128	; 0x80
 8003da4:	035b      	lsls	r3, r3, #13
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d10b      	bne.n	8003dc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <UART_AdvFeatureConfig+0x160>)
 8003db2:	4013      	ands	r3, r2
 8003db4:	0019      	movs	r1, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	2280      	movs	r2, #128	; 0x80
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d00b      	beq.n	8003de4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	; (8003e0c <UART_AdvFeatureConfig+0x164>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	605a      	str	r2, [r3, #4]
  }
}
 8003de4:	46c0      	nop			; (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	fffdffff 	.word	0xfffdffff
 8003df0:	fffeffff 	.word	0xfffeffff
 8003df4:	fffbffff 	.word	0xfffbffff
 8003df8:	ffff7fff 	.word	0xffff7fff
 8003dfc:	ffffefff 	.word	0xffffefff
 8003e00:	ffffdfff 	.word	0xffffdfff
 8003e04:	ffefffff 	.word	0xffefffff
 8003e08:	ff9fffff 	.word	0xff9fffff
 8003e0c:	fff7ffff 	.word	0xfff7ffff

08003e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af02      	add	r7, sp, #8
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2280      	movs	r2, #128	; 0x80
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e20:	f7fd f8da 	bl	8000fd8 <HAL_GetTick>
 8003e24:	0003      	movs	r3, r0
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2208      	movs	r2, #8
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b08      	cmp	r3, #8
 8003e34:	d10c      	bne.n	8003e50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2280      	movs	r2, #128	; 0x80
 8003e3a:	0391      	lsls	r1, r2, #14
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	4a17      	ldr	r2, [pc, #92]	; (8003e9c <UART_CheckIdleState+0x8c>)
 8003e40:	9200      	str	r2, [sp, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f000 f82c 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 8003e48:	1e03      	subs	r3, r0, #0
 8003e4a:	d001      	beq.n	8003e50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e021      	b.n	8003e94 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2204      	movs	r2, #4
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d10c      	bne.n	8003e78 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2280      	movs	r2, #128	; 0x80
 8003e62:	03d1      	lsls	r1, r2, #15
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <UART_CheckIdleState+0x8c>)
 8003e68:	9200      	str	r2, [sp, #0]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f000 f818 	bl	8003ea0 <UART_WaitOnFlagUntilTimeout>
 8003e70:	1e03      	subs	r3, r0, #0
 8003e72:	d001      	beq.n	8003e78 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e74:	2303      	movs	r3, #3
 8003e76:	e00d      	b.n	8003e94 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2220      	movs	r2, #32
 8003e82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2274      	movs	r2, #116	; 0x74
 8003e8e:	2100      	movs	r1, #0
 8003e90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	0018      	movs	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	b004      	add	sp, #16
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	01ffffff 	.word	0x01ffffff

08003ea0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b094      	sub	sp, #80	; 0x50
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	603b      	str	r3, [r7, #0]
 8003eac:	1dfb      	adds	r3, r7, #7
 8003eae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb0:	e0a3      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	d100      	bne.n	8003eba <UART_WaitOnFlagUntilTimeout+0x1a>
 8003eb8:	e09f      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fd f88d 	bl	8000fd8 <HAL_GetTick>
 8003ebe:	0002      	movs	r2, r0
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003eca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d13d      	bne.n	8003f4c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed8:	647b      	str	r3, [r7, #68]	; 0x44
 8003eda:	2301      	movs	r3, #1
 8003edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	f383 8810 	msr	PRIMASK, r3
}
 8003ee4:	46c0      	nop			; (mov r8, r8)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	494c      	ldr	r1, [pc, #304]	; (8004024 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ef2:	400a      	ands	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f02:	f3ef 8310 	mrs	r3, PRIMASK
 8003f06:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	689a      	ldr	r2, [r3, #8]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2101      	movs	r1, #1
 8003f24:	438a      	bics	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]
 8003f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2e:	f383 8810 	msr	PRIMASK, r3
}
 8003f32:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2274      	movs	r2, #116	; 0x74
 8003f44:	2100      	movs	r1, #0
 8003f46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e067      	b.n	800401c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2204      	movs	r2, #4
 8003f54:	4013      	ands	r3, r2
 8003f56:	d050      	beq.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	69da      	ldr	r2, [r3, #28]
 8003f5e:	2380      	movs	r3, #128	; 0x80
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	401a      	ands	r2, r3
 8003f64:	2380      	movs	r3, #128	; 0x80
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d146      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2280      	movs	r2, #128	; 0x80
 8003f72:	0112      	lsls	r2, r2, #4
 8003f74:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f76:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7a:	613b      	str	r3, [r7, #16]
  return(result);
 8003f7c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f80:	2301      	movs	r3, #1
 8003f82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f383 8810 	msr	PRIMASK, r3
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4923      	ldr	r1, [pc, #140]	; (8004024 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003f98:	400a      	ands	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f383 8810 	msr	PRIMASK, r3
}
 8003fa6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fac:	61fb      	str	r3, [r7, #28]
  return(result);
 8003fae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	f383 8810 	msr	PRIMASK, r3
}
 8003fbc:	46c0      	nop			; (mov r8, r8)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2101      	movs	r1, #1
 8003fca:	438a      	bics	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]
 8003fce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	f383 8810 	msr	PRIMASK, r3
}
 8003fd8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2280      	movs	r2, #128	; 0x80
 8003fea:	2120      	movs	r1, #32
 8003fec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2274      	movs	r2, #116	; 0x74
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e010      	b.n	800401c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	425a      	negs	r2, r3
 800400a:	4153      	adcs	r3, r2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	001a      	movs	r2, r3
 8004010:	1dfb      	adds	r3, r7, #7
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d100      	bne.n	800401a <UART_WaitOnFlagUntilTimeout+0x17a>
 8004018:	e74b      	b.n	8003eb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800401a:	2300      	movs	r3, #0
}
 800401c:	0018      	movs	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	b014      	add	sp, #80	; 0x50
 8004022:	bd80      	pop	{r7, pc}
 8004024:	fffffe5f 	.word	0xfffffe5f

08004028 <__libc_init_array>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	2600      	movs	r6, #0
 800402c:	4d0c      	ldr	r5, [pc, #48]	; (8004060 <__libc_init_array+0x38>)
 800402e:	4c0d      	ldr	r4, [pc, #52]	; (8004064 <__libc_init_array+0x3c>)
 8004030:	1b64      	subs	r4, r4, r5
 8004032:	10a4      	asrs	r4, r4, #2
 8004034:	42a6      	cmp	r6, r4
 8004036:	d109      	bne.n	800404c <__libc_init_array+0x24>
 8004038:	2600      	movs	r6, #0
 800403a:	f000 f821 	bl	8004080 <_init>
 800403e:	4d0a      	ldr	r5, [pc, #40]	; (8004068 <__libc_init_array+0x40>)
 8004040:	4c0a      	ldr	r4, [pc, #40]	; (800406c <__libc_init_array+0x44>)
 8004042:	1b64      	subs	r4, r4, r5
 8004044:	10a4      	asrs	r4, r4, #2
 8004046:	42a6      	cmp	r6, r4
 8004048:	d105      	bne.n	8004056 <__libc_init_array+0x2e>
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	00b3      	lsls	r3, r6, #2
 800404e:	58eb      	ldr	r3, [r5, r3]
 8004050:	4798      	blx	r3
 8004052:	3601      	adds	r6, #1
 8004054:	e7ee      	b.n	8004034 <__libc_init_array+0xc>
 8004056:	00b3      	lsls	r3, r6, #2
 8004058:	58eb      	ldr	r3, [r5, r3]
 800405a:	4798      	blx	r3
 800405c:	3601      	adds	r6, #1
 800405e:	e7f2      	b.n	8004046 <__libc_init_array+0x1e>
 8004060:	08004160 	.word	0x08004160
 8004064:	08004160 	.word	0x08004160
 8004068:	08004160 	.word	0x08004160
 800406c:	08004164 	.word	0x08004164

08004070 <memset>:
 8004070:	0003      	movs	r3, r0
 8004072:	1882      	adds	r2, r0, r2
 8004074:	4293      	cmp	r3, r2
 8004076:	d100      	bne.n	800407a <memset+0xa>
 8004078:	4770      	bx	lr
 800407a:	7019      	strb	r1, [r3, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	e7f9      	b.n	8004074 <memset+0x4>

08004080 <_init>:
 8004080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004086:	bc08      	pop	{r3}
 8004088:	469e      	mov	lr, r3
 800408a:	4770      	bx	lr

0800408c <_fini>:
 800408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004092:	bc08      	pop	{r3}
 8004094:	469e      	mov	lr, r3
 8004096:	4770      	bx	lr
