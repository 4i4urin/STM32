
final_course_work.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a9c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003b5c  08003b5c  00013b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf0  08003bf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003bf0  08003bf0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003bf0  08003bf0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf4  08003bf4  00013bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  2000000c  08003c04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  08003c04  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d340  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4b  00000000  00000000  0002d374  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  0002edc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  0002f920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010275  00000000  00000000  000303e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d256  00000000  00000000  0004065d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00063f2d  00000000  00000000  0004d8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b17e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002904  00000000  00000000  000b1834  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b44 	.word	0x08003b44

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003b44 	.word	0x08003b44

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <HAL_TIM_IC_CaptureCallback>:
 *
 * catch changing state of PWM channel
 * check period of signal to avoid interferences (should write else)
 * write rising times in bit array
 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b086      	sub	sp, #24
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) {
 8000238:	687a      	ldr	r2, [r7, #4]
 800023a:	4b25      	ldr	r3, [pc, #148]	; (80002d0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 800023c:	429a      	cmp	r2, r3
 800023e:	d143      	bne.n	80002c8 <HAL_TIM_IC_CaptureCallback+0x98>
		int falling_edge = 0;
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]
		int rising_edge = 0;
 8000244:	2300      	movs	r3, #0
 8000246:	613b      	str	r3, [r7, #16]
//		char buf[128] = { 0 };

		condition.callback_count += 1;
 8000248:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800024a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800024c:	1c5a      	adds	r2, r3, #1
 800024e:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000250:	625a      	str	r2, [r3, #36]	; 0x24

		falling_edge = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2);
 8000252:	4b1f      	ldr	r3, [pc, #124]	; (80002d0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000254:	2104      	movs	r1, #4
 8000256:	0018      	movs	r0, r3
 8000258:	f002 fb30 	bl	80028bc <HAL_TIM_ReadCapturedValue>
 800025c:	0003      	movs	r3, r0
 800025e:	617b      	str	r3, [r7, #20]
		rising_edge = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <HAL_TIM_IC_CaptureCallback+0xa0>)
 8000262:	2100      	movs	r1, #0
 8000264:	0018      	movs	r0, r3
 8000266:	f002 fb29 	bl	80028bc <HAL_TIM_ReadCapturedValue>
 800026a:	0003      	movs	r3, r0
 800026c:	613b      	str	r3, [r7, #16]
//		sprintf(buf, "r - %d f - %d\r\n", rising_edge, falling_edge);
//		HAL_UART_Transmit(&huart1, &buf, strlen(buf), -1);
		if (condition.callback_count % 2 != 0 && condition.callback_count != 1) {
 800026e:	4b19      	ldr	r3, [pc, #100]	; (80002d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000272:	001a      	movs	r2, r3
 8000274:	2301      	movs	r3, #1
 8000276:	4013      	ands	r3, r2
 8000278:	d020      	beq.n	80002bc <HAL_TIM_IC_CaptureCallback+0x8c>
 800027a:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800027c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800027e:	2b01      	cmp	r3, #1
 8000280:	d01c      	beq.n	80002bc <HAL_TIM_IC_CaptureCallback+0x8c>
			int period = rising_edge + falling_edge;
 8000282:	693a      	ldr	r2, [r7, #16]
 8000284:	697b      	ldr	r3, [r7, #20]
 8000286:	18d3      	adds	r3, r2, r3
 8000288:	60fb      	str	r3, [r7, #12]
			if (period < T * 1.1 && period > T * 0.9) { // 10% gap for period
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	4a12      	ldr	r2, [pc, #72]	; (80002d8 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800028e:	4293      	cmp	r3, r2
 8000290:	dc0f      	bgt.n	80002b2 <HAL_TIM_IC_CaptureCallback+0x82>
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	4a11      	ldr	r2, [pc, #68]	; (80002dc <HAL_TIM_IC_CaptureCallback+0xac>)
 8000296:	4293      	cmp	r3, r2
 8000298:	dd0b      	ble.n	80002b2 <HAL_TIM_IC_CaptureCallback+0x82>
//				sprintf(buf, "r - %d\r\n", rising_edge);
//				HAL_UART_Transmit(&huart1, &buf, strlen(buf), -1);
				condition.bit[condition.bit_count] = rising_edge;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800029c:	6a1a      	ldr	r2, [r3, #32]
 800029e:	4b0d      	ldr	r3, [pc, #52]	; (80002d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002a0:	0092      	lsls	r2, r2, #2
 80002a2:	6939      	ldr	r1, [r7, #16]
 80002a4:	50d1      	str	r1, [r2, r3]
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80002a8:	2201      	movs	r2, #1
 80002aa:	2140      	movs	r1, #64	; 0x40
 80002ac:	0018      	movs	r0, r3
 80002ae:	f001 f811 	bl	80012d4 <HAL_GPIO_WritePin>
//				sprintf(buf, "n - %d bit - %d\r\n", bit_count, bit[bit_count]);
//				HAL_UART_Transmit(&huart1, &buf, strlen(buf), -1);
			}
			condition.bit_count += 1;
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002b4:	6a1b      	ldr	r3, [r3, #32]
 80002b6:	1c5a      	adds	r2, r3, #1
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80002ba:	621a      	str	r2, [r3, #32]
		}
		TIM3->CNT = 0;
 80002bc:	4b09      	ldr	r3, [pc, #36]	; (80002e4 <HAL_TIM_IC_CaptureCallback+0xb4>)
 80002be:	2200      	movs	r2, #0
 80002c0:	625a      	str	r2, [r3, #36]	; 0x24
		TIM16->CNT = 0;
 80002c2:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <HAL_TIM_IC_CaptureCallback+0xb8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b006      	add	sp, #24
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000054 	.word	0x20000054
 80002d4:	20000028 	.word	0x20000028
 80002d8:	000101cf 	.word	0x000101cf
 80002dc:	0000d2f0 	.word	0x0000d2f0
 80002e0:	48000400 	.word	0x48000400
 80002e4:	40000400 	.word	0x40000400
 80002e8:	40014400 	.word	0x40014400

080002ec <HAL_TIM_PeriodElapsedCallback>:
 *
 * IDEL without catching any bit
 * Timer run function every period with or without information
 * function do nothing in this case
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	if (htim == &htim3) { // reading last bite of byte
 80002f4:	687a      	ldr	r2, [r7, #4]
 80002f6:	4b2b      	ldr	r3, [pc, #172]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d150      	bne.n	800039e <HAL_TIM_PeriodElapsedCallback+0xb2>
//		char message_1[] = "Hello from elapsed\r\n";
//		HAL_UART_Transmit(&huart1, &message_1, strlen(message_1), -1);
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002fc:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80002fe:	2200      	movs	r2, #0
 8000300:	2140      	movs	r1, #64	; 0x40
 8000302:	0018      	movs	r0, r3
 8000304:	f000 ffe6 	bl	80012d4 <HAL_GPIO_WritePin>
		if (condition.bit_count == 7 && condition.callback_count > 1) {
 8000308:	4b28      	ldr	r3, [pc, #160]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800030a:	6a1b      	ldr	r3, [r3, #32]
 800030c:	2b07      	cmp	r3, #7
 800030e:	d11c      	bne.n	800034a <HAL_TIM_PeriodElapsedCallback+0x5e>
 8000310:	4b26      	ldr	r3, [pc, #152]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000314:	2b01      	cmp	r3, #1
 8000316:	dd18      	ble.n	800034a <HAL_TIM_PeriodElapsedCallback+0x5e>
//			char buf[128] = { 0 };
//			sprintf(buf, "r - %d\r\n", HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_2));
//			HAL_UART_Transmit(&huart1, &buf, strlen(buf), -1);

			condition.bit[condition.bit_count] = HAL_TIM_ReadCapturedValue(&htim3, TIM_CHANNEL_1);
 8000318:	4b22      	ldr	r3, [pc, #136]	; (80003a4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800031a:	2100      	movs	r1, #0
 800031c:	0018      	movs	r0, r3
 800031e:	f002 facd 	bl	80028bc <HAL_TIM_ReadCapturedValue>
 8000322:	0001      	movs	r1, r0
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000326:	6a1a      	ldr	r2, [r3, #32]
 8000328:	4b20      	ldr	r3, [pc, #128]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800032a:	0092      	lsls	r2, r2, #2
 800032c:	50d1      	str	r1, [r2, r3]

			display_pwm_information(condition.bit);
 800032e:	4b1f      	ldr	r3, [pc, #124]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000330:	0018      	movs	r0, r3
 8000332:	f000 f869 	bl	8000408 <display_pwm_information>

			condition.bit_count = 0;
 8000336:	4b1d      	ldr	r3, [pc, #116]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000338:	2200      	movs	r2, #0
 800033a:	621a      	str	r2, [r3, #32]
			condition.callback_count = 0;
 800033c:	4b1b      	ldr	r3, [pc, #108]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800033e:	2200      	movs	r2, #0
 8000340:	625a      	str	r2, [r3, #36]	; 0x24
			condition.connect = 1;
 8000342:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000344:	2201      	movs	r2, #1
 8000346:	629a      	str	r2, [r3, #40]	; 0x28
 8000348:	e029      	b.n	800039e <HAL_TIM_PeriodElapsedCallback+0xb2>
		} else if (condition.callback_count > 1 && condition.bit_count < 7) { // when caught less then 8 bit before IDEL give message about lost byte
 800034a:	4b18      	ldr	r3, [pc, #96]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800034c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800034e:	2b01      	cmp	r3, #1
 8000350:	dd1d      	ble.n	800038e <HAL_TIM_PeriodElapsedCallback+0xa2>
 8000352:	4b16      	ldr	r3, [pc, #88]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000354:	6a1b      	ldr	r3, [r3, #32]
 8000356:	2b06      	cmp	r3, #6
 8000358:	dc19      	bgt.n	800038e <HAL_TIM_PeriodElapsedCallback+0xa2>
//			char buf[64] = { 0 };
			output("#LOST BYTE#");
 800035a:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800035c:	0018      	movs	r0, r3
 800035e:	f000 f8cf 	bl	8000500 <output>
//			sprintf(buf, "%d %d", bit_count, condition.callback_count);
//			HAL_UART_Transmit(&huart1, buf, strlen(buf), -1);
			if (condition.callback_count % 2 != 0) {
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000366:	001a      	movs	r2, r3
 8000368:	2301      	movs	r3, #1
 800036a:	4013      	ands	r3, r2
 800036c:	d002      	beq.n	8000374 <HAL_TIM_PeriodElapsedCallback+0x88>
				start_finish_connection();
 800036e:	f000 f821 	bl	80003b4 <start_finish_connection>
			if (condition.callback_count % 2 != 0) {
 8000372:	e014      	b.n	800039e <HAL_TIM_PeriodElapsedCallback+0xb2>
			} else {
				condition.bit_count = 0;
 8000374:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
				condition.callback_count = 0;
 800037a:	4b0c      	ldr	r3, [pc, #48]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800037c:	2200      	movs	r2, #0
 800037e:	625a      	str	r2, [r3, #36]	; 0x24
				HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000380:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000382:	2200      	movs	r2, #0
 8000384:	2140      	movs	r1, #64	; 0x40
 8000386:	0018      	movs	r0, r3
 8000388:	f000 ffa4 	bl	80012d4 <HAL_GPIO_WritePin>
			if (condition.callback_count % 2 != 0) {
 800038c:	e007      	b.n	800039e <HAL_TIM_PeriodElapsedCallback+0xb2>
			}
		} else if (condition.callback_count == 1) { // turning on/off transiver state of channel change 0V -> 3.3V / 3.3V -> 0V
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000392:	2b01      	cmp	r3, #1
 8000394:	d102      	bne.n	800039c <HAL_TIM_PeriodElapsedCallback+0xb0>
			start_finish_connection();
 8000396:	f000 f80d 	bl	80003b4 <start_finish_connection>
 800039a:	e000      	b.n	800039e <HAL_TIM_PeriodElapsedCallback+0xb2>
		} else // TIM run function every period ending
			return;
 800039c:	46c0      	nop			; (mov r8, r8)
	}
}
 800039e:	46bd      	mov	sp, r7
 80003a0:	b002      	add	sp, #8
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	20000054 	.word	0x20000054
 80003a8:	48000400 	.word	0x48000400
 80003ac:	20000028 	.word	0x20000028
 80003b0:	08003b5c 	.word	0x08003b5c

080003b4 <start_finish_connection>:

/* function check on/off channel state and show user information
 * about connection or disconnection transiver
 */
void start_finish_connection(void) {
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
	condition.bit_count = 0;
 80003b8:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <start_finish_connection+0x44>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	621a      	str	r2, [r3, #32]
	condition.callback_count = 0;
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <start_finish_connection+0x44>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	625a      	str	r2, [r3, #36]	; 0x24
	if (condition.connect == 0) { // transiver connected
 80003c4:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <start_finish_connection+0x44>)
 80003c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d107      	bne.n	80003dc <start_finish_connection+0x28>
		output("\r\nConnected. Ready for recive.\r\n");
 80003cc:	4b0b      	ldr	r3, [pc, #44]	; (80003fc <start_finish_connection+0x48>)
 80003ce:	0018      	movs	r0, r3
 80003d0:	f000 f896 	bl	8000500 <output>
		condition.connect = 1;
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <start_finish_connection+0x44>)
 80003d6:	2201      	movs	r2, #1
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
 80003da:	e006      	b.n	80003ea <start_finish_connection+0x36>
	} else { // transiver disconnected
		output("\r\nDisconected. Bye.\r\n");
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <start_finish_connection+0x4c>)
 80003de:	0018      	movs	r0, r3
 80003e0:	f000 f88e 	bl	8000500 <output>
		condition.connect = 0;
 80003e4:	4b04      	ldr	r3, [pc, #16]	; (80003f8 <start_finish_connection+0x44>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	629a      	str	r2, [r3, #40]	; 0x28
	}
	delay(T);
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <start_finish_connection+0x50>)
 80003ec:	0018      	movs	r0, r3
 80003ee:	f000 f867 	bl	80004c0 <delay>
}
 80003f2:	46c0      	nop			; (mov r8, r8)
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000028 	.word	0x20000028
 80003fc:	08003b68 	.word	0x08003b68
 8000400:	08003b8c 	.word	0x08003b8c
 8000404:	0000ea60 	.word	0x0000ea60

08000408 <display_pwm_information>:
 *
 * receives int array contain 8 rising times
 * convert rising times to char and display it
 *
 */
void display_pwm_information(int *bit) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	char ch = rises_to_char(bit);
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	0018      	movs	r0, r3
 8000414:	f000 f81e 	bl	8000454 <rises_to_char>
 8000418:	0003      	movs	r3, r0
 800041a:	001a      	movs	r2, r3
 800041c:	210f      	movs	r1, #15
 800041e:	187b      	adds	r3, r7, r1
 8000420:	701a      	strb	r2, [r3, #0]
	if (ch == '\r')
 8000422:	187b      	adds	r3, r7, r1
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b0d      	cmp	r3, #13
 8000428:	d103      	bne.n	8000432 <display_pwm_information+0x2a>
		output("\n");
 800042a:	4b08      	ldr	r3, [pc, #32]	; (800044c <display_pwm_information+0x44>)
 800042c:	0018      	movs	r0, r3
 800042e:	f000 f867 	bl	8000500 <output>
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 1000);
 8000432:	23fa      	movs	r3, #250	; 0xfa
 8000434:	009b      	lsls	r3, r3, #2
 8000436:	220f      	movs	r2, #15
 8000438:	18b9      	adds	r1, r7, r2
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <display_pwm_information+0x48>)
 800043c:	2201      	movs	r2, #1
 800043e:	f002 ffc1 	bl	80033c4 <HAL_UART_Transmit>
}
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	46bd      	mov	sp, r7
 8000446:	b004      	add	sp, #16
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			; (mov r8, r8)
 800044c:	08003ba4 	.word	0x08003ba4
 8000450:	2000009c 	.word	0x2000009c

08000454 <rises_to_char>:

/* function return char from 8 rising times array
 * bit - pointer to 8 rising times array contain 8 bits
 * If rising time more then 50% period then this is a 1, else 0
 */
char rises_to_char(int *bit) {
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	char c = 0;
 800045c:	2317      	movs	r3, #23
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	2200      	movs	r2, #0
 8000462:	701a      	strb	r2, [r3, #0]
	for (int i = 0, rank = 128; i < 8 && rank > 0; i++, rank /= 2) {
 8000464:	2300      	movs	r3, #0
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	2380      	movs	r3, #128	; 0x80
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	e018      	b.n	80004a0 <rises_to_char+0x4c>
		if (bit[i] > T * 0.5)
 800046e:	693b      	ldr	r3, [r7, #16]
 8000470:	009b      	lsls	r3, r3, #2
 8000472:	687a      	ldr	r2, [r7, #4]
 8000474:	18d3      	adds	r3, r2, r3
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <rises_to_char+0x68>)
 800047a:	4293      	cmp	r3, r2
 800047c:	dd07      	ble.n	800048e <rises_to_char+0x3a>
			c += rank;
 800047e:	68fb      	ldr	r3, [r7, #12]
 8000480:	b2d9      	uxtb	r1, r3
 8000482:	2217      	movs	r2, #23
 8000484:	18bb      	adds	r3, r7, r2
 8000486:	18ba      	adds	r2, r7, r2
 8000488:	7812      	ldrb	r2, [r2, #0]
 800048a:	188a      	adds	r2, r1, r2
 800048c:	701a      	strb	r2, [r3, #0]
	for (int i = 0, rank = 128; i < 8 && rank > 0; i++, rank /= 2) {
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	3301      	adds	r3, #1
 8000492:	613b      	str	r3, [r7, #16]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	2b00      	cmp	r3, #0
 8000498:	da00      	bge.n	800049c <rises_to_char+0x48>
 800049a:	3301      	adds	r3, #1
 800049c:	105b      	asrs	r3, r3, #1
 800049e:	60fb      	str	r3, [r7, #12]
 80004a0:	693b      	ldr	r3, [r7, #16]
 80004a2:	2b07      	cmp	r3, #7
 80004a4:	dc02      	bgt.n	80004ac <rises_to_char+0x58>
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	dce0      	bgt.n	800046e <rises_to_char+0x1a>
	}
	return c;
 80004ac:	2317      	movs	r3, #23
 80004ae:	18fb      	adds	r3, r7, r3
 80004b0:	781b      	ldrb	r3, [r3, #0]
}
 80004b2:	0018      	movs	r0, r3
 80004b4:	46bd      	mov	sp, r7
 80004b6:	b006      	add	sp, #24
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	00007530 	.word	0x00007530

080004c0 <delay>:

// function provides delay (in 20 nanoseconds)
void delay(int delay) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	if (delay > 0xFFFF)
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	025b      	lsls	r3, r3, #9
 80004ce:	429a      	cmp	r2, r3
 80004d0:	db01      	blt.n	80004d6 <delay+0x16>
		delay = 0xFFFF;
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <delay+0x38>)
 80004d4:	607b      	str	r3, [r7, #4]
	(&htim16)->Instance->CNT = 0;
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <delay+0x3c>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	2200      	movs	r2, #0
 80004dc:	625a      	str	r2, [r3, #36]	; 0x24
	while ((&htim16)->Instance->CNT < delay)
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	4b06      	ldr	r3, [pc, #24]	; (80004fc <delay+0x3c>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	d3f9      	bcc.n	80004e0 <delay+0x20>
		;
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	0000ffff 	.word	0x0000ffff
 80004fc:	20000168 	.word	0x20000168

08000500 <output>:

/*
 * function print message to UART1
 * @brief char message
 */
void output(char *string) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	char *buf = string;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart1, (uint8_t*) buf, strlen(buf), 1000);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	0018      	movs	r0, r3
 8000510:	f7ff fdfa 	bl	8000108 <strlen>
 8000514:	0003      	movs	r3, r0
 8000516:	b29a      	uxth	r2, r3
 8000518:	23fa      	movs	r3, #250	; 0xfa
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	68f9      	ldr	r1, [r7, #12]
 800051e:	4803      	ldr	r0, [pc, #12]	; (800052c <output+0x2c>)
 8000520:	f002 ff50 	bl	80033c4 <HAL_UART_Transmit>
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	2000009c 	.word	0x2000009c

08000530 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000534:	f000 fc1c 	bl	8000d70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000538:	f000 f83a 	bl	80005b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800053c:	f000 fa32 	bl	80009a4 <MX_GPIO_Init>
	MX_TIM16_Init();
 8000540:	f000 f9d8 	bl	80008f4 <MX_TIM16_Init>
	MX_USART1_UART_Init();
 8000544:	f000 f9fe 	bl	8000944 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000548:	f000 f894 	bl	8000674 <MX_TIM1_Init>
	MX_TIM3_Init();
 800054c:	f000 f946 	bl	80007dc <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	//	timer for read values
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000550:	4b11      	ldr	r3, [pc, #68]	; (8000598 <main+0x68>)
 8000552:	2100      	movs	r1, #0
 8000554:	0018      	movs	r0, r3
 8000556:	f001 fd5b 	bl	8002010 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <main+0x68>)
 800055c:	2104      	movs	r1, #4
 800055e:	0018      	movs	r0, r3
 8000560:	f001 fd56 	bl	8002010 <HAL_TIM_IC_Start_IT>

	// start TIM3 again to catch IDEL after empty period
	HAL_TIM_Base_Start_IT(&htim3);
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <main+0x68>)
 8000566:	0018      	movs	r0, r3
 8000568:	f001 fc5c 	bl	8001e24 <HAL_TIM_Base_Start_IT>

	TIM3->ARR = T;
 800056c:	4b0b      	ldr	r3, [pc, #44]	; (800059c <main+0x6c>)
 800056e:	4a0c      	ldr	r2, [pc, #48]	; (80005a0 <main+0x70>)
 8000570:	62da      	str	r2, [r3, #44]	; 0x2c

//	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_2);
//	TIM1->ARR = T;

	// Timer for calculating delays in micro or nano seconds
	HAL_TIM_Base_Start_IT(&htim16);
 8000572:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <main+0x74>)
 8000574:	0018      	movs	r0, r3
 8000576:	f001 fc55 	bl	8001e24 <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	output("Still work\r\n");
 800057a:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <main+0x78>)
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff ffbf 	bl	8000500 <output>
//	bit = calloc(8, sizeof(int));
//	if (bit == NULL) {
//		output("Memory end\r\n");
//		return 1;
//	}
	condition.callback_count = 0;
 8000582:	4b0a      	ldr	r3, [pc, #40]	; (80005ac <main+0x7c>)
 8000584:	2200      	movs	r2, #0
 8000586:	625a      	str	r2, [r3, #36]	; 0x24
	condition.bit_count = 0;
 8000588:	4b08      	ldr	r3, [pc, #32]	; (80005ac <main+0x7c>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
	condition.connect = 0;
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <main+0x7c>)
 8000590:	2200      	movs	r2, #0
 8000592:	629a      	str	r2, [r3, #40]	; 0x28

	while (1) {
 8000594:	e7fe      	b.n	8000594 <main+0x64>
 8000596:	46c0      	nop			; (mov r8, r8)
 8000598:	20000054 	.word	0x20000054
 800059c:	40000400 	.word	0x40000400
 80005a0:	0000ea60 	.word	0x0000ea60
 80005a4:	20000168 	.word	0x20000168
 80005a8:	08003ba8 	.word	0x08003ba8
 80005ac:	20000028 	.word	0x20000028

080005b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b095      	sub	sp, #84	; 0x54
 80005b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005b6:	2420      	movs	r4, #32
 80005b8:	193b      	adds	r3, r7, r4
 80005ba:	0018      	movs	r0, r3
 80005bc:	2330      	movs	r3, #48	; 0x30
 80005be:	001a      	movs	r2, r3
 80005c0:	2100      	movs	r1, #0
 80005c2:	f003 fab7 	bl	8003b34 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005c6:	2310      	movs	r3, #16
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	2310      	movs	r3, #16
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f003 faaf 	bl	8003b34 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	2310      	movs	r3, #16
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f003 faa8 	bl	8003b34 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e4:	0021      	movs	r1, r4
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2202      	movs	r2, #2
 80005ea:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	2201      	movs	r2, #1
 80005f0:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2210      	movs	r2, #16
 80005f6:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2202      	movs	r2, #2
 80005fc:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fe:	187b      	adds	r3, r7, r1
 8000600:	2200      	movs	r2, #0
 8000602:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000604:	187b      	adds	r3, r7, r1
 8000606:	22a0      	movs	r2, #160	; 0xa0
 8000608:	0392      	lsls	r2, r2, #14
 800060a:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000612:	187b      	adds	r3, r7, r1
 8000614:	0018      	movs	r0, r3
 8000616:	f000 fe7b 	bl	8001310 <HAL_RCC_OscConfig>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0x72>
		Error_Handler();
 800061e:	f000 fa09 	bl	8000a34 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000622:	2110      	movs	r1, #16
 8000624:	187b      	adds	r3, r7, r1
 8000626:	2207      	movs	r2, #7
 8000628:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	187b      	adds	r3, r7, r1
 800062c:	2202      	movs	r2, #2
 800062e:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000636:	187b      	adds	r3, r7, r1
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800063c:	187b      	adds	r3, r7, r1
 800063e:	2101      	movs	r1, #1
 8000640:	0018      	movs	r0, r3
 8000642:	f001 f97f 	bl	8001944 <HAL_RCC_ClockConfig>
 8000646:	1e03      	subs	r3, r0, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9e>
		Error_Handler();
 800064a:	f000 f9f3 	bl	8000a34 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800064e:	003b      	movs	r3, r7
 8000650:	2201      	movs	r2, #1
 8000652:	601a      	str	r2, [r3, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000654:	003b      	movs	r3, r7
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800065a:	003b      	movs	r3, r7
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fac3 	bl	8001be8 <HAL_RCCEx_PeriphCLKConfig>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xba>
		Error_Handler();
 8000666:	f000 f9e5 	bl	8000a34 <Error_Handler>
	}
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b015      	add	sp, #84	; 0x54
 8000670:	bd90      	pop	{r4, r7, pc}
	...

08000674 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b096      	sub	sp, #88	; 0x58
 8000678:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800067a:	2348      	movs	r3, #72	; 0x48
 800067c:	18fb      	adds	r3, r7, r3
 800067e:	0018      	movs	r0, r3
 8000680:	2310      	movs	r3, #16
 8000682:	001a      	movs	r2, r3
 8000684:	2100      	movs	r1, #0
 8000686:	f003 fa55 	bl	8003b34 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800068a:	2340      	movs	r3, #64	; 0x40
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	0018      	movs	r0, r3
 8000690:	2308      	movs	r3, #8
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f003 fa4d 	bl	8003b34 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800069a:	2324      	movs	r3, #36	; 0x24
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	0018      	movs	r0, r3
 80006a0:	231c      	movs	r3, #28
 80006a2:	001a      	movs	r2, r3
 80006a4:	2100      	movs	r1, #0
 80006a6:	f003 fa45 	bl	8003b34 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	0018      	movs	r0, r3
 80006ae:	2320      	movs	r3, #32
 80006b0:	001a      	movs	r2, r3
 80006b2:	2100      	movs	r1, #0
 80006b4:	f003 fa3e 	bl	8003b34 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80006b8:	4b46      	ldr	r3, [pc, #280]	; (80007d4 <MX_TIM1_Init+0x160>)
 80006ba:	4a47      	ldr	r2, [pc, #284]	; (80007d8 <MX_TIM1_Init+0x164>)
 80006bc:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1 - 1;
 80006be:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <MX_TIM1_Init+0x160>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c4:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <MX_TIM1_Init+0x160>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 0;
 80006ca:	4b42      	ldr	r3, [pc, #264]	; (80007d4 <MX_TIM1_Init+0x160>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b40      	ldr	r3, [pc, #256]	; (80007d4 <MX_TIM1_Init+0x160>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80006d6:	4b3f      	ldr	r3, [pc, #252]	; (80007d4 <MX_TIM1_Init+0x160>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <MX_TIM1_Init+0x160>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80006e2:	4b3c      	ldr	r3, [pc, #240]	; (80007d4 <MX_TIM1_Init+0x160>)
 80006e4:	0018      	movs	r0, r3
 80006e6:	f001 fb4d 	bl	8001d84 <HAL_TIM_Base_Init>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM1_Init+0x7e>
		Error_Handler();
 80006ee:	f000 f9a1 	bl	8000a34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006f2:	2148      	movs	r1, #72	; 0x48
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	0152      	lsls	r2, r2, #5
 80006fa:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80006fc:	187a      	adds	r2, r7, r1
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <MX_TIM1_Init+0x160>)
 8000700:	0011      	movs	r1, r2
 8000702:	0018      	movs	r0, r3
 8000704:	f002 f806 	bl	8002714 <HAL_TIM_ConfigClockSource>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_TIM1_Init+0x9c>
		Error_Handler();
 800070c:	f000 f992 	bl	8000a34 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8000710:	4b30      	ldr	r3, [pc, #192]	; (80007d4 <MX_TIM1_Init+0x160>)
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fbcc 	bl	8001eb0 <HAL_TIM_PWM_Init>
 8000718:	1e03      	subs	r3, r0, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0xac>
		Error_Handler();
 800071c:	f000 f98a 	bl	8000a34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000720:	2140      	movs	r1, #64	; 0x40
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 800072e:	187a      	adds	r2, r7, r1
 8000730:	4b28      	ldr	r3, [pc, #160]	; (80007d4 <MX_TIM1_Init+0x160>)
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f002 fd31 	bl	800319c <HAL_TIMEx_MasterConfigSynchronization>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0xce>
			!= HAL_OK) {
		Error_Handler();
 800073e:	f000 f979 	bl	8000a34 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000742:	2124      	movs	r1, #36	; 0x24
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2260      	movs	r2, #96	; 0x60
 8000748:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2200      	movs	r2, #0
 800074e:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2200      	movs	r2, #0
 800076c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800076e:	1879      	adds	r1, r7, r1
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_TIM1_Init+0x160>)
 8000772:	2204      	movs	r2, #4
 8000774:	0018      	movs	r0, r3
 8000776:	f001 ff07 	bl	8002588 <HAL_TIM_PWM_ConfigChannel>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0x10e>
			!= HAL_OK) {
		Error_Handler();
 800077e:	f000 f959 	bl	8000a34 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000788:	1d3b      	adds	r3, r7, #4
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2280      	movs	r2, #128	; 0x80
 80007a4:	0192      	lsls	r2, r2, #6
 80007a6:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	61da      	str	r2, [r3, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80007ae:	1d3a      	adds	r2, r7, #4
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_TIM1_Init+0x160>)
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 fd43 	bl	8003240 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_TIM1_Init+0x14e>
			!= HAL_OK) {
		Error_Handler();
 80007be:	f000 f939 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80007c2:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <MX_TIM1_Init+0x160>)
 80007c4:	0018      	movs	r0, r3
 80007c6:	f000 f9e7 	bl	8000b98 <HAL_TIM_MspPostInit>

}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b016      	add	sp, #88	; 0x58
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	20000120 	.word	0x20000120
 80007d8:	40012c00 	.word	0x40012c00

080007dc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08a      	sub	sp, #40	; 0x28
 80007e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80007e2:	2318      	movs	r3, #24
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f003 f9a1 	bl	8003b34 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80007f2:	2310      	movs	r3, #16
 80007f4:	18fb      	adds	r3, r7, r3
 80007f6:	0018      	movs	r0, r3
 80007f8:	2308      	movs	r3, #8
 80007fa:	001a      	movs	r2, r3
 80007fc:	2100      	movs	r1, #0
 80007fe:	f003 f999 	bl	8003b34 <memset>
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000802:	003b      	movs	r3, r7
 8000804:	0018      	movs	r0, r3
 8000806:	2310      	movs	r3, #16
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f003 f992 	bl	8003b34 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000810:	4b35      	ldr	r3, [pc, #212]	; (80008e8 <MX_TIM3_Init+0x10c>)
 8000812:	4a36      	ldr	r2, [pc, #216]	; (80008ec <MX_TIM3_Init+0x110>)
 8000814:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 1 - 1;
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_TIM3_Init+0x10c>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800081c:	4b32      	ldr	r3, [pc, #200]	; (80008e8 <MX_TIM3_Init+0x10c>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000822:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <MX_TIM3_Init+0x10c>)
 8000824:	4a32      	ldr	r2, [pc, #200]	; (80008f0 <MX_TIM3_Init+0x114>)
 8000826:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000828:	4b2f      	ldr	r3, [pc, #188]	; (80008e8 <MX_TIM3_Init+0x10c>)
 800082a:	2200      	movs	r2, #0
 800082c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_TIM3_Init+0x10c>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000834:	4b2c      	ldr	r3, [pc, #176]	; (80008e8 <MX_TIM3_Init+0x10c>)
 8000836:	0018      	movs	r0, r3
 8000838:	f001 faa4 	bl	8001d84 <HAL_TIM_Base_Init>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000840:	f000 f8f8 	bl	8000a34 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000844:	2118      	movs	r1, #24
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0152      	lsls	r2, r2, #5
 800084c:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 800084e:	187a      	adds	r2, r7, r1
 8000850:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_TIM3_Init+0x10c>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f001 ff5d 	bl	8002714 <HAL_TIM_ConfigClockSource>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x86>
		Error_Handler();
 800085e:	f000 f8e9 	bl	8000a34 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim3) != HAL_OK) {
 8000862:	4b21      	ldr	r3, [pc, #132]	; (80008e8 <MX_TIM3_Init+0x10c>)
 8000864:	0018      	movs	r0, r3
 8000866:	f001 fb7b 	bl	8001f60 <HAL_TIM_IC_Init>
 800086a:	1e03      	subs	r3, r0, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM3_Init+0x96>
		Error_Handler();
 800086e:	f000 f8e1 	bl	8000a34 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000872:	2110      	movs	r1, #16
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000880:	187a      	adds	r2, r7, r1
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <MX_TIM3_Init+0x10c>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fc88 	bl	800319c <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000890:	f000 f8d0 	bl	8000a34 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000894:	003b      	movs	r3, r7
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800089a:	003b      	movs	r3, r7
 800089c:	2201      	movs	r2, #1
 800089e:	605a      	str	r2, [r3, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80008a0:	003b      	movs	r3, r7
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
	sConfigIC.ICFilter = 0;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 80008ac:	0039      	movs	r1, r7
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_TIM3_Init+0x10c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 fdc4 	bl	8002440 <HAL_TIM_IC_ConfigChannel>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM3_Init+0xe4>
		Error_Handler();
 80008bc:	f000 f8ba 	bl	8000a34 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80008c0:	003b      	movs	r3, r7
 80008c2:	2202      	movs	r2, #2
 80008c4:	601a      	str	r2, [r3, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80008c6:	003b      	movs	r3, r7
 80008c8:	2202      	movs	r2, #2
 80008ca:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 80008cc:	0039      	movs	r1, r7
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_TIM3_Init+0x10c>)
 80008d0:	2204      	movs	r2, #4
 80008d2:	0018      	movs	r0, r3
 80008d4:	f001 fdb4 	bl	8002440 <HAL_TIM_IC_ConfigChannel>
 80008d8:	1e03      	subs	r3, r0, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM3_Init+0x104>
		Error_Handler();
 80008dc:	f000 f8aa 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80008e0:	46c0      	nop			; (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b00a      	add	sp, #40	; 0x28
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000054 	.word	0x20000054
 80008ec:	40000400 	.word	0x40000400
 80008f0:	0000ffff 	.word	0x0000ffff

080008f4 <MX_TIM16_Init>:
/**
 * @brief TIM16 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM16_Init(void) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
	/* USER CODE END TIM16_Init 0 */

	/* USER CODE BEGIN TIM16_Init 1 */

	/* USER CODE END TIM16_Init 1 */
	htim16.Instance = TIM16;
 80008f8:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_TIM16_Init+0x44>)
 80008fa:	4a10      	ldr	r2, [pc, #64]	; (800093c <MX_TIM16_Init+0x48>)
 80008fc:	601a      	str	r2, [r3, #0]
	htim16.Init.Prescaler = 1 - 1;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_TIM16_Init+0x44>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
	htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_TIM16_Init+0x44>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
	htim16.Init.Period = 65535;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_TIM16_Init+0x44>)
 800090c:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <MX_TIM16_Init+0x4c>)
 800090e:	60da      	str	r2, [r3, #12]
	htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_TIM16_Init+0x44>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
	htim16.Init.RepetitionCounter = 0;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_TIM16_Init+0x44>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
	htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_TIM16_Init+0x44>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim16) != HAL_OK) {
 8000922:	4b05      	ldr	r3, [pc, #20]	; (8000938 <MX_TIM16_Init+0x44>)
 8000924:	0018      	movs	r0, r3
 8000926:	f001 fa2d 	bl	8001d84 <HAL_TIM_Base_Init>
 800092a:	1e03      	subs	r3, r0, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM16_Init+0x3e>
		Error_Handler();
 800092e:	f000 f881 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN TIM16_Init 2 */

	/* USER CODE END TIM16_Init 2 */

}
 8000932:	46c0      	nop			; (mov r8, r8)
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	20000168 	.word	0x20000168
 800093c:	40014400 	.word	0x40014400
 8000940:	0000ffff 	.word	0x0000ffff

08000944 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USART1_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_USART1_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000950:	22e1      	movs	r2, #225	; 0xe1
 8000952:	0252      	lsls	r2, r2, #9
 8000954:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART1_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000986:	4b05      	ldr	r3, [pc, #20]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000988:	0018      	movs	r0, r3
 800098a:	f002 fcc7 	bl	800331c <HAL_UART_Init>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8000992:	f000 f84f 	bl	8000a34 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	2000009c 	.word	0x2000009c
 80009a0:	40013800 	.word	0x40013800

080009a4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b089      	sub	sp, #36	; 0x24
 80009a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009aa:	240c      	movs	r4, #12
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	2314      	movs	r3, #20
 80009b2:	001a      	movs	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f003 f8bd 	bl	8003b34 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <MX_GPIO_Init+0x88>)
 80009bc:	695a      	ldr	r2, [r3, #20]
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <MX_GPIO_Init+0x88>)
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0289      	lsls	r1, r1, #10
 80009c4:	430a      	orrs	r2, r1
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <MX_GPIO_Init+0x88>)
 80009ca:	695a      	ldr	r2, [r3, #20]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	029b      	lsls	r3, r3, #10
 80009d0:	4013      	ands	r3, r2
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_GPIO_Init+0x88>)
 80009d8:	695a      	ldr	r2, [r3, #20]
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_GPIO_Init+0x88>)
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	02c9      	lsls	r1, r1, #11
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_GPIO_Init+0x88>)
 80009e6:	695a      	ldr	r2, [r3, #20]
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	02db      	lsls	r3, r3, #11
 80009ec:	4013      	ands	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <MX_GPIO_Init+0x8c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 fc6b 	bl	80012d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 80009fe:	0021      	movs	r1, r4
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2240      	movs	r2, #64	; 0x40
 8000a04:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <MX_GPIO_Init+0x8c>)
 8000a1c:	0019      	movs	r1, r3
 8000a1e:	0010      	movs	r0, r2
 8000a20:	f000 fae8 	bl	8000ff4 <HAL_GPIO_Init>

}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b009      	add	sp, #36	; 0x24
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000400 	.word	0x48000400

08000a34 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a3c:	e7fe      	b.n	8000a3c <Error_Handler+0x8>
	...

08000a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <HAL_MspInit+0x44>)
 8000a48:	699a      	ldr	r2, [r3, #24]
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <HAL_MspInit+0x44>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	619a      	str	r2, [r3, #24]
 8000a52:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <HAL_MspInit+0x44>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	2201      	movs	r2, #1
 8000a58:	4013      	ands	r3, r2
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_MspInit+0x44>)
 8000a60:	69da      	ldr	r2, [r3, #28]
 8000a62:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_MspInit+0x44>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0549      	lsls	r1, r1, #21
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	61da      	str	r2, [r3, #28]
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <HAL_MspInit+0x44>)
 8000a6e:	69da      	ldr	r2, [r3, #28]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	055b      	lsls	r3, r3, #21
 8000a74:	4013      	ands	r3, r2
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	b002      	add	sp, #8
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08c      	sub	sp, #48	; 0x30
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	231c      	movs	r3, #28
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	0018      	movs	r0, r3
 8000a96:	2314      	movs	r3, #20
 8000a98:	001a      	movs	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f003 f84a 	bl	8003b34 <memset>
  if(htim_base->Instance==TIM1)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a37      	ldr	r2, [pc, #220]	; (8000b84 <HAL_TIM_Base_MspInit+0xfc>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d116      	bne.n	8000ad8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aaa:	4b37      	ldr	r3, [pc, #220]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000aac:	699a      	ldr	r2, [r3, #24]
 8000aae:	4b36      	ldr	r3, [pc, #216]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0109      	lsls	r1, r1, #4
 8000ab4:	430a      	orrs	r2, r1
 8000ab6:	619a      	str	r2, [r3, #24]
 8000ab8:	4b33      	ldr	r3, [pc, #204]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000aba:	699a      	ldr	r2, [r3, #24]
 8000abc:	2380      	movs	r3, #128	; 0x80
 8000abe:	011b      	lsls	r3, r3, #4
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	61bb      	str	r3, [r7, #24]
 8000ac4:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	200e      	movs	r0, #14
 8000acc:	f000 fa60 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ad0:	200e      	movs	r0, #14
 8000ad2:	f000 fa72 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000ad6:	e050      	b.n	8000b7a <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM3)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a2b      	ldr	r2, [pc, #172]	; (8000b8c <HAL_TIM_Base_MspInit+0x104>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d138      	bne.n	8000b54 <HAL_TIM_Base_MspInit+0xcc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ae2:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000ae4:	69da      	ldr	r2, [r3, #28]
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000ae8:	2102      	movs	r1, #2
 8000aea:	430a      	orrs	r2, r1
 8000aec:	61da      	str	r2, [r3, #28]
 8000aee:	4b26      	ldr	r3, [pc, #152]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	2202      	movs	r2, #2
 8000af4:	4013      	ands	r3, r2
 8000af6:	617b      	str	r3, [r7, #20]
 8000af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000afc:	695a      	ldr	r2, [r3, #20]
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	02c9      	lsls	r1, r1, #11
 8000b04:	430a      	orrs	r2, r1
 8000b06:	615a      	str	r2, [r3, #20]
 8000b08:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000b0a:	695a      	ldr	r2, [r3, #20]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	02db      	lsls	r3, r3, #11
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000b16:	211c      	movs	r1, #28
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	2210      	movs	r2, #16
 8000b1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1e:	187b      	adds	r3, r7, r1
 8000b20:	2202      	movs	r2, #2
 8000b22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	187b      	adds	r3, r7, r1
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	4a15      	ldr	r2, [pc, #84]	; (8000b90 <HAL_TIM_Base_MspInit+0x108>)
 8000b3a:	0019      	movs	r1, r3
 8000b3c:	0010      	movs	r0, r2
 8000b3e:	f000 fa59 	bl	8000ff4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	2010      	movs	r0, #16
 8000b48:	f000 fa22 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b4c:	2010      	movs	r0, #16
 8000b4e:	f000 fa34 	bl	8000fba <HAL_NVIC_EnableIRQ>
}
 8000b52:	e012      	b.n	8000b7a <HAL_TIM_Base_MspInit+0xf2>
  else if(htim_base->Instance==TIM16)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_TIM_Base_MspInit+0x10c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d10d      	bne.n	8000b7a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000b60:	699a      	ldr	r2, [r3, #24]
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000b64:	2180      	movs	r1, #128	; 0x80
 8000b66:	0289      	lsls	r1, r1, #10
 8000b68:	430a      	orrs	r2, r1
 8000b6a:	619a      	str	r2, [r3, #24]
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_TIM_Base_MspInit+0x100>)
 8000b6e:	699a      	ldr	r2, [r3, #24]
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	029b      	lsls	r3, r3, #10
 8000b74:	4013      	ands	r3, r2
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b00c      	add	sp, #48	; 0x30
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)
 8000b84:	40012c00 	.word	0x40012c00
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40000400 	.word	0x40000400
 8000b90:	48000400 	.word	0x48000400
 8000b94:	40014400 	.word	0x40014400

08000b98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b98:	b590      	push	{r4, r7, lr}
 8000b9a:	b089      	sub	sp, #36	; 0x24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	240c      	movs	r4, #12
 8000ba2:	193b      	adds	r3, r7, r4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f002 ffc2 	bl	8003b34 <memset>
  if(htim->Instance==TIM1)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <HAL_TIM_MspPostInit+0x78>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d125      	bne.n	8000c06 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <HAL_TIM_MspPostInit+0x7c>)
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_TIM_MspPostInit+0x7c>)
 8000bc0:	2180      	movs	r1, #128	; 0x80
 8000bc2:	0289      	lsls	r1, r1, #10
 8000bc4:	430a      	orrs	r2, r1
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_TIM_MspPostInit+0x7c>)
 8000bca:	695a      	ldr	r2, [r3, #20]
 8000bcc:	2380      	movs	r3, #128	; 0x80
 8000bce:	029b      	lsls	r3, r3, #10
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	2280      	movs	r2, #128	; 0x80
 8000bda:	0092      	lsls	r2, r2, #2
 8000bdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	0021      	movs	r1, r4
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2202      	movs	r2, #2
 8000be4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	187a      	adds	r2, r7, r1
 8000bfa:	2390      	movs	r3, #144	; 0x90
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 f9f7 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b009      	add	sp, #36	; 0x24
 8000c0c:	bd90      	pop	{r4, r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40012c00 	.word	0x40012c00
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b08b      	sub	sp, #44	; 0x2c
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	2414      	movs	r4, #20
 8000c22:	193b      	adds	r3, r7, r4
 8000c24:	0018      	movs	r0, r3
 8000c26:	2314      	movs	r3, #20
 8000c28:	001a      	movs	r2, r3
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	f002 ff82 	bl	8003b34 <memset>
  if(huart->Instance==USART1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_UART_MspInit+0x90>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d132      	bne.n	8000ca0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c3c:	699a      	ldr	r2, [r3, #24]
 8000c3e:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c40:	2180      	movs	r1, #128	; 0x80
 8000c42:	01c9      	lsls	r1, r1, #7
 8000c44:	430a      	orrs	r2, r1
 8000c46:	619a      	str	r2, [r3, #24]
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	2380      	movs	r3, #128	; 0x80
 8000c4e:	01db      	lsls	r3, r3, #7
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c58:	695a      	ldr	r2, [r3, #20]
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c5c:	2180      	movs	r1, #128	; 0x80
 8000c5e:	0289      	lsls	r1, r1, #10
 8000c60:	430a      	orrs	r2, r1
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <HAL_UART_MspInit+0x94>)
 8000c66:	695a      	ldr	r2, [r3, #20]
 8000c68:	2380      	movs	r3, #128	; 0x80
 8000c6a:	029b      	lsls	r3, r3, #10
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c72:	0021      	movs	r1, r4
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	220c      	movs	r2, #12
 8000c78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	2203      	movs	r2, #3
 8000c8a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000c8c:	187b      	adds	r3, r7, r1
 8000c8e:	2201      	movs	r2, #1
 8000c90:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c92:	187a      	adds	r2, r7, r1
 8000c94:	2390      	movs	r3, #144	; 0x90
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 f9aa 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b00b      	add	sp, #44	; 0x2c
 8000ca6:	bd90      	pop	{r4, r7, pc}
 8000ca8:	40013800 	.word	0x40013800
 8000cac:	40021000 	.word	0x40021000

08000cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <NMI_Handler+0x4>

08000cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <HardFault_Handler+0x4>

08000cbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cc0:	46c0      	nop			; (mov r8, r8)
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd4:	f000 f894 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd8:	46c0      	nop			; (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ce4:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <TIM1_CC_IRQHandler+0x14>)
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f001 fa94 	bl	8002214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000120 	.word	0x20000120

08000cf8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000cfc:	4b03      	ldr	r3, [pc, #12]	; (8000d0c <TIM3_IRQHandler+0x14>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f001 fa88 	bl	8002214 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d04:	46c0      	nop			; (mov r8, r8)
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	20000054 	.word	0x20000054

08000d10 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d14:	46c0      	nop			; (mov r8, r8)
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
	...

08000d1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d1c:	480d      	ldr	r0, [pc, #52]	; (8000d54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d1e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480d      	ldr	r0, [pc, #52]	; (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d22:	490e      	ldr	r1, [pc, #56]	; (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d38:	4c0b      	ldr	r4, [pc, #44]	; (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d46:	f7ff ffe3 	bl	8000d10 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d4a:	f002 fecf 	bl	8003aec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d4e:	f7ff fbef 	bl	8000530 <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   r0, =_estack
 8000d54:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d60:	08003bf8 	.word	0x08003bf8
  ldr r2, =_sbss
 8000d64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d68:	200001b4 	.word	0x200001b4

08000d6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_IRQHandler>
	...

08000d70 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <HAL_Init+0x24>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_Init+0x24>)
 8000d7a:	2110      	movs	r1, #16
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f809 	bl	8000d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d86:	f7ff fe5b 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	40022000 	.word	0x40022000

08000d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_InitTick+0x5c>)
 8000da2:	681c      	ldr	r4, [r3, #0]
 8000da4:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <HAL_InitTick+0x60>)
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	0019      	movs	r1, r3
 8000daa:	23fa      	movs	r3, #250	; 0xfa
 8000dac:	0098      	lsls	r0, r3, #2
 8000dae:	f7ff f9b3 	bl	8000118 <__udivsi3>
 8000db2:	0003      	movs	r3, r0
 8000db4:	0019      	movs	r1, r3
 8000db6:	0020      	movs	r0, r4
 8000db8:	f7ff f9ae 	bl	8000118 <__udivsi3>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	0018      	movs	r0, r3
 8000dc0:	f000 f90b 	bl	8000fda <HAL_SYSTICK_Config>
 8000dc4:	1e03      	subs	r3, r0, #0
 8000dc6:	d001      	beq.n	8000dcc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	e00f      	b.n	8000dec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d80b      	bhi.n	8000dea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	425b      	negs	r3, r3
 8000dd8:	2200      	movs	r2, #0
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 f8d8 	bl	8000f90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_InitTick+0x64>)
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	0018      	movs	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	b003      	add	sp, #12
 8000df2:	bd90      	pop	{r4, r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x1c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x20>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	18d2      	adds	r2, r2, r3
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_IncTick+0x20>)
 8000e12:	601a      	str	r2, [r3, #0]
}
 8000e14:	46c0      	nop			; (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200001b0 	.word	0x200001b0

08000e24 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <HAL_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			; (mov r8, r8)
 8000e34:	200001b0 	.word	0x200001b0

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	0002      	movs	r2, r0
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	1dfb      	adds	r3, r7, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b7f      	cmp	r3, #127	; 0x7f
 8000e4a:	d809      	bhi.n	8000e60 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4c:	1dfb      	adds	r3, r7, #7
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	001a      	movs	r2, r3
 8000e52:	231f      	movs	r3, #31
 8000e54:	401a      	ands	r2, r3
 8000e56:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <__NVIC_EnableIRQ+0x30>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4091      	lsls	r1, r2
 8000e5c:	000a      	movs	r2, r1
 8000e5e:	601a      	str	r2, [r3, #0]
  }
}
 8000e60:	46c0      	nop			; (mov r8, r8)
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b590      	push	{r4, r7, lr}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	0002      	movs	r2, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b7f      	cmp	r3, #127	; 0x7f
 8000e80:	d828      	bhi.n	8000ed4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e82:	4a2f      	ldr	r2, [pc, #188]	; (8000f40 <__NVIC_SetPriority+0xd4>)
 8000e84:	1dfb      	adds	r3, r7, #7
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	33c0      	adds	r3, #192	; 0xc0
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	589b      	ldr	r3, [r3, r2]
 8000e92:	1dfa      	adds	r2, r7, #7
 8000e94:	7812      	ldrb	r2, [r2, #0]
 8000e96:	0011      	movs	r1, r2
 8000e98:	2203      	movs	r2, #3
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	00d2      	lsls	r2, r2, #3
 8000e9e:	21ff      	movs	r1, #255	; 0xff
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	000a      	movs	r2, r1
 8000ea4:	43d2      	mvns	r2, r2
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	019b      	lsls	r3, r3, #6
 8000eae:	22ff      	movs	r2, #255	; 0xff
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	1dfb      	adds	r3, r7, #7
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	2303      	movs	r3, #3
 8000eba:	4003      	ands	r3, r0
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec0:	481f      	ldr	r0, [pc, #124]	; (8000f40 <__NVIC_SetPriority+0xd4>)
 8000ec2:	1dfb      	adds	r3, r7, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	33c0      	adds	r3, #192	; 0xc0
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ed2:	e031      	b.n	8000f38 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed4:	4a1b      	ldr	r2, [pc, #108]	; (8000f44 <__NVIC_SetPriority+0xd8>)
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	0019      	movs	r1, r3
 8000edc:	230f      	movs	r3, #15
 8000ede:	400b      	ands	r3, r1
 8000ee0:	3b08      	subs	r3, #8
 8000ee2:	089b      	lsrs	r3, r3, #2
 8000ee4:	3306      	adds	r3, #6
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	18d3      	adds	r3, r2, r3
 8000eea:	3304      	adds	r3, #4
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	1dfa      	adds	r2, r7, #7
 8000ef0:	7812      	ldrb	r2, [r2, #0]
 8000ef2:	0011      	movs	r1, r2
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	400a      	ands	r2, r1
 8000ef8:	00d2      	lsls	r2, r2, #3
 8000efa:	21ff      	movs	r1, #255	; 0xff
 8000efc:	4091      	lsls	r1, r2
 8000efe:	000a      	movs	r2, r1
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	401a      	ands	r2, r3
 8000f04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	019b      	lsls	r3, r3, #6
 8000f0a:	22ff      	movs	r2, #255	; 0xff
 8000f0c:	401a      	ands	r2, r3
 8000f0e:	1dfb      	adds	r3, r7, #7
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	0018      	movs	r0, r3
 8000f14:	2303      	movs	r3, #3
 8000f16:	4003      	ands	r3, r0
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f1c:	4809      	ldr	r0, [pc, #36]	; (8000f44 <__NVIC_SetPriority+0xd8>)
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	001c      	movs	r4, r3
 8000f24:	230f      	movs	r3, #15
 8000f26:	4023      	ands	r3, r4
 8000f28:	3b08      	subs	r3, #8
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	3306      	adds	r3, #6
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	18c3      	adds	r3, r0, r3
 8000f34:	3304      	adds	r3, #4
 8000f36:	601a      	str	r2, [r3, #0]
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b003      	add	sp, #12
 8000f3e:	bd90      	pop	{r4, r7, pc}
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	1e5a      	subs	r2, r3, #1
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	045b      	lsls	r3, r3, #17
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d301      	bcc.n	8000f60 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e010      	b.n	8000f82 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f60:	4b0a      	ldr	r3, [pc, #40]	; (8000f8c <SysTick_Config+0x44>)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	3a01      	subs	r2, #1
 8000f66:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f68:	2301      	movs	r3, #1
 8000f6a:	425b      	negs	r3, r3
 8000f6c:	2103      	movs	r1, #3
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f7ff ff7c 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x44>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x44>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	0018      	movs	r0, r3
 8000f84:	46bd      	mov	sp, r7
 8000f86:	b002      	add	sp, #8
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60b9      	str	r1, [r7, #8]
 8000f98:	607a      	str	r2, [r7, #4]
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	1c02      	adds	r2, r0, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	0011      	movs	r1, r2
 8000fac:	0018      	movs	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b004      	add	sp, #16
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	0002      	movs	r2, r0
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	b25b      	sxtb	r3, r3
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff ff33 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	b002      	add	sp, #8
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	f7ff ffaf 	bl	8000f48 <SysTick_Config>
 8000fea:	0003      	movs	r3, r0
}
 8000fec:	0018      	movs	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b002      	add	sp, #8
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e14f      	b.n	80012a4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697a      	ldr	r2, [r7, #20]
 800100c:	4091      	lsls	r1, r2
 800100e:	000a      	movs	r2, r1
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d100      	bne.n	800101c <HAL_GPIO_Init+0x28>
 800101a:	e140      	b.n	800129e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	4013      	ands	r3, r2
 8001024:	2b01      	cmp	r3, #1
 8001026:	d005      	beq.n	8001034 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	2203      	movs	r2, #3
 800102e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001030:	2b02      	cmp	r3, #2
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	2201      	movs	r2, #1
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2203      	movs	r2, #3
 800109c:	4013      	ands	r3, r2
 800109e:	2b03      	cmp	r3, #3
 80010a0:	d017      	beq.n	80010d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	2203      	movs	r2, #3
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	43da      	mvns	r2, r3
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	2203      	movs	r2, #3
 80010d8:	4013      	ands	r3, r2
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d123      	bne.n	8001126 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	08da      	lsrs	r2, r3, #3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3208      	adds	r2, #8
 80010e6:	0092      	lsls	r2, r2, #2
 80010e8:	58d3      	ldr	r3, [r2, r3]
 80010ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2207      	movs	r2, #7
 80010f0:	4013      	ands	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	220f      	movs	r2, #15
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	691a      	ldr	r2, [r3, #16]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2107      	movs	r1, #7
 800110a:	400b      	ands	r3, r1
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	409a      	lsls	r2, r3
 8001110:	0013      	movs	r3, r2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	0092      	lsls	r2, r2, #2
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	409a      	lsls	r2, r3
 8001134:	0013      	movs	r3, r2
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2203      	movs	r2, #3
 8001144:	401a      	ands	r2, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	409a      	lsls	r2, r3
 800114c:	0013      	movs	r3, r2
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	23c0      	movs	r3, #192	; 0xc0
 8001160:	029b      	lsls	r3, r3, #10
 8001162:	4013      	ands	r3, r2
 8001164:	d100      	bne.n	8001168 <HAL_GPIO_Init+0x174>
 8001166:	e09a      	b.n	800129e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001168:	4b54      	ldr	r3, [pc, #336]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 800116e:	2101      	movs	r1, #1
 8001170:	430a      	orrs	r2, r1
 8001172:	619a      	str	r2, [r3, #24]
 8001174:	4b51      	ldr	r3, [pc, #324]	; (80012bc <HAL_GPIO_Init+0x2c8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	2201      	movs	r2, #1
 800117a:	4013      	ands	r3, r2
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001180:	4a4f      	ldr	r2, [pc, #316]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	589b      	ldr	r3, [r3, r2]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2203      	movs	r2, #3
 8001192:	4013      	ands	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	220f      	movs	r2, #15
 8001198:	409a      	lsls	r2, r3
 800119a:	0013      	movs	r3, r2
 800119c:	43da      	mvns	r2, r3
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	4013      	ands	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	2390      	movs	r3, #144	; 0x90
 80011a8:	05db      	lsls	r3, r3, #23
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d013      	beq.n	80011d6 <HAL_GPIO_Init+0x1e2>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <HAL_GPIO_Init+0x2d0>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d00d      	beq.n	80011d2 <HAL_GPIO_Init+0x1de>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a43      	ldr	r2, [pc, #268]	; (80012c8 <HAL_GPIO_Init+0x2d4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d007      	beq.n	80011ce <HAL_GPIO_Init+0x1da>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a42      	ldr	r2, [pc, #264]	; (80012cc <HAL_GPIO_Init+0x2d8>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_GPIO_Init+0x1d6>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011ca:	2305      	movs	r3, #5
 80011cc:	e004      	b.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011ce:	2302      	movs	r3, #2
 80011d0:	e002      	b.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <HAL_GPIO_Init+0x1e4>
 80011d6:	2300      	movs	r3, #0
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	2103      	movs	r1, #3
 80011dc:	400a      	ands	r2, r1
 80011de:	0092      	lsls	r2, r2, #2
 80011e0:	4093      	lsls	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011e8:	4935      	ldr	r1, [pc, #212]	; (80012c0 <HAL_GPIO_Init+0x2cc>)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f6:	4b36      	ldr	r3, [pc, #216]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43da      	mvns	r2, r3
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	025b      	lsls	r3, r3, #9
 800120e:	4013      	ands	r3, r2
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800121a:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001220:	4b2b      	ldr	r3, [pc, #172]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43da      	mvns	r2, r3
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685a      	ldr	r2, [r3, #4]
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	029b      	lsls	r3, r3, #10
 8001238:	4013      	ands	r3, r2
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001244:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	2380      	movs	r3, #128	; 0x80
 8001260:	035b      	lsls	r3, r3, #13
 8001262:	4013      	ands	r3, r2
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43da      	mvns	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685a      	ldr	r2, [r3, #4]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	039b      	lsls	r3, r3, #14
 800128c:	4013      	ands	r3, r2
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <HAL_GPIO_Init+0x2dc>)
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	40da      	lsrs	r2, r3
 80012ac:	1e13      	subs	r3, r2, #0
 80012ae:	d000      	beq.n	80012b2 <HAL_GPIO_Init+0x2be>
 80012b0:	e6a8      	b.n	8001004 <HAL_GPIO_Init+0x10>
  } 
}
 80012b2:	46c0      	nop			; (mov r8, r8)
 80012b4:	46c0      	nop			; (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b006      	add	sp, #24
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40010000 	.word	0x40010000
 80012c4:	48000400 	.word	0x48000400
 80012c8:	48000800 	.word	0x48000800
 80012cc:	48000c00 	.word	0x48000c00
 80012d0:	40010400 	.word	0x40010400

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	0008      	movs	r0, r1
 80012de:	0011      	movs	r1, r2
 80012e0:	1cbb      	adds	r3, r7, #2
 80012e2:	1c02      	adds	r2, r0, #0
 80012e4:	801a      	strh	r2, [r3, #0]
 80012e6:	1c7b      	adds	r3, r7, #1
 80012e8:	1c0a      	adds	r2, r1, #0
 80012ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ec:	1c7b      	adds	r3, r7, #1
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d004      	beq.n	80012fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012f4:	1cbb      	adds	r3, r7, #2
 80012f6:	881a      	ldrh	r2, [r3, #0]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012fc:	e003      	b.n	8001306 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012fe:	1cbb      	adds	r3, r7, #2
 8001300:	881a      	ldrh	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b088      	sub	sp, #32
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e301      	b.n	8001926 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2201      	movs	r2, #1
 8001328:	4013      	ands	r3, r2
 800132a:	d100      	bne.n	800132e <HAL_RCC_OscConfig+0x1e>
 800132c:	e08d      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800132e:	4bc3      	ldr	r3, [pc, #780]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	220c      	movs	r2, #12
 8001334:	4013      	ands	r3, r2
 8001336:	2b04      	cmp	r3, #4
 8001338:	d00e      	beq.n	8001358 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133a:	4bc0      	ldr	r3, [pc, #768]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	220c      	movs	r2, #12
 8001340:	4013      	ands	r3, r2
 8001342:	2b08      	cmp	r3, #8
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x64>
 8001346:	4bbd      	ldr	r3, [pc, #756]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	025b      	lsls	r3, r3, #9
 800134e:	401a      	ands	r2, r3
 8001350:	2380      	movs	r3, #128	; 0x80
 8001352:	025b      	lsls	r3, r3, #9
 8001354:	429a      	cmp	r2, r3
 8001356:	d10d      	bne.n	8001374 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001358:	4bb8      	ldr	r3, [pc, #736]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	029b      	lsls	r3, r3, #10
 8001360:	4013      	ands	r3, r2
 8001362:	d100      	bne.n	8001366 <HAL_RCC_OscConfig+0x56>
 8001364:	e070      	b.n	8001448 <HAL_RCC_OscConfig+0x138>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d000      	beq.n	8001370 <HAL_RCC_OscConfig+0x60>
 800136e:	e06b      	b.n	8001448 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e2d8      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d107      	bne.n	800138c <HAL_RCC_OscConfig+0x7c>
 800137c:	4baf      	ldr	r3, [pc, #700]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4bae      	ldr	r3, [pc, #696]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	0249      	lsls	r1, r1, #9
 8001386:	430a      	orrs	r2, r1
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	e02f      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d10c      	bne.n	80013ae <HAL_RCC_OscConfig+0x9e>
 8001394:	4ba9      	ldr	r3, [pc, #676]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4ba8      	ldr	r3, [pc, #672]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800139a:	49a9      	ldr	r1, [pc, #676]	; (8001640 <HAL_RCC_OscConfig+0x330>)
 800139c:	400a      	ands	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	4ba6      	ldr	r3, [pc, #664]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4ba5      	ldr	r3, [pc, #660]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013a6:	49a7      	ldr	r1, [pc, #668]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e01e      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d10e      	bne.n	80013d4 <HAL_RCC_OscConfig+0xc4>
 80013b6:	4ba1      	ldr	r3, [pc, #644]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4ba0      	ldr	r3, [pc, #640]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	02c9      	lsls	r1, r1, #11
 80013c0:	430a      	orrs	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	4b9d      	ldr	r3, [pc, #628]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	4b9c      	ldr	r3, [pc, #624]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0249      	lsls	r1, r1, #9
 80013ce:	430a      	orrs	r2, r1
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xdc>
 80013d4:	4b99      	ldr	r3, [pc, #612]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	4b98      	ldr	r3, [pc, #608]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013da:	4999      	ldr	r1, [pc, #612]	; (8001640 <HAL_RCC_OscConfig+0x330>)
 80013dc:	400a      	ands	r2, r1
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	4b96      	ldr	r3, [pc, #600]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b95      	ldr	r3, [pc, #596]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80013e6:	4997      	ldr	r1, [pc, #604]	; (8001644 <HAL_RCC_OscConfig+0x334>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d014      	beq.n	800141e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fd16 	bl	8000e24 <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013fe:	f7ff fd11 	bl	8000e24 <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b64      	cmp	r3, #100	; 0x64
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e28a      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001410:	4b8a      	ldr	r3, [pc, #552]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	029b      	lsls	r3, r3, #10
 8001418:	4013      	ands	r3, r2
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0xee>
 800141c:	e015      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141e:	f7ff fd01 	bl	8000e24 <HAL_GetTick>
 8001422:	0003      	movs	r3, r0
 8001424:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fcfc 	bl	8000e24 <HAL_GetTick>
 800142c:	0002      	movs	r2, r0
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e275      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	4b80      	ldr	r3, [pc, #512]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800143c:	681a      	ldr	r2, [r3, #0]
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	d1f0      	bne.n	8001428 <HAL_RCC_OscConfig+0x118>
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001448:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2202      	movs	r2, #2
 8001450:	4013      	ands	r3, r2
 8001452:	d100      	bne.n	8001456 <HAL_RCC_OscConfig+0x146>
 8001454:	e069      	b.n	800152a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001456:	4b79      	ldr	r3, [pc, #484]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	220c      	movs	r2, #12
 800145c:	4013      	ands	r3, r2
 800145e:	d00b      	beq.n	8001478 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001460:	4b76      	ldr	r3, [pc, #472]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	220c      	movs	r2, #12
 8001466:	4013      	ands	r3, r2
 8001468:	2b08      	cmp	r3, #8
 800146a:	d11c      	bne.n	80014a6 <HAL_RCC_OscConfig+0x196>
 800146c:	4b73      	ldr	r3, [pc, #460]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	2380      	movs	r3, #128	; 0x80
 8001472:	025b      	lsls	r3, r3, #9
 8001474:	4013      	ands	r3, r2
 8001476:	d116      	bne.n	80014a6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001478:	4b70      	ldr	r3, [pc, #448]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2202      	movs	r2, #2
 800147e:	4013      	ands	r3, r2
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x17e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e24b      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b6b      	ldr	r3, [pc, #428]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	22f8      	movs	r2, #248	; 0xf8
 8001494:	4393      	bics	r3, r2
 8001496:	0019      	movs	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	00da      	lsls	r2, r3, #3
 800149e:	4b67      	ldr	r3, [pc, #412]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a4:	e041      	b.n	800152a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d024      	beq.n	80014f8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ae:	4b63      	ldr	r3, [pc, #396]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b62      	ldr	r3, [pc, #392]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ba:	f7ff fcb3 	bl	8000e24 <HAL_GetTick>
 80014be:	0003      	movs	r3, r0
 80014c0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fcae 	bl	8000e24 <HAL_GetTick>
 80014c8:	0002      	movs	r2, r0
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e227      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d6:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2202      	movs	r2, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d0f1      	beq.n	80014c4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e0:	4b56      	ldr	r3, [pc, #344]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	22f8      	movs	r2, #248	; 0xf8
 80014e6:	4393      	bics	r3, r2
 80014e8:	0019      	movs	r1, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	00da      	lsls	r2, r3, #3
 80014f0:	4b52      	ldr	r3, [pc, #328]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	e018      	b.n	800152a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b4f      	ldr	r3, [pc, #316]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80014fe:	2101      	movs	r1, #1
 8001500:	438a      	bics	r2, r1
 8001502:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fc8e 	bl	8000e24 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800150e:	f7ff fc89 	bl	8000e24 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e202      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001520:	4b46      	ldr	r3, [pc, #280]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d1f1      	bne.n	800150e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2208      	movs	r2, #8
 8001530:	4013      	ands	r3, r2
 8001532:	d036      	beq.n	80015a2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	69db      	ldr	r3, [r3, #28]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d019      	beq.n	8001570 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153c:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800153e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001540:	4b3e      	ldr	r3, [pc, #248]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001542:	2101      	movs	r1, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001548:	f7ff fc6c 	bl	8000e24 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff fc67 	bl	8000e24 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e1e0      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001564:	4b35      	ldr	r3, [pc, #212]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d0f1      	beq.n	8001552 <HAL_RCC_OscConfig+0x242>
 800156e:	e018      	b.n	80015a2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001570:	4b32      	ldr	r3, [pc, #200]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001576:	2101      	movs	r1, #1
 8001578:	438a      	bics	r2, r1
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157c:	f7ff fc52 	bl	8000e24 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	e008      	b.n	8001598 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fc4d 	bl	8000e24 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e1c6      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001598:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	2202      	movs	r2, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f1      	bne.n	8001586 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2204      	movs	r2, #4
 80015a8:	4013      	ands	r3, r2
 80015aa:	d100      	bne.n	80015ae <HAL_RCC_OscConfig+0x29e>
 80015ac:	e0b4      	b.n	8001718 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ae:	201f      	movs	r0, #31
 80015b0:	183b      	adds	r3, r7, r0
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80015b8:	69da      	ldr	r2, [r3, #28]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	055b      	lsls	r3, r3, #21
 80015be:	4013      	ands	r3, r2
 80015c0:	d110      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80015c4:	69da      	ldr	r2, [r3, #28]
 80015c6:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80015c8:	2180      	movs	r1, #128	; 0x80
 80015ca:	0549      	lsls	r1, r1, #21
 80015cc:	430a      	orrs	r2, r1
 80015ce:	61da      	str	r2, [r3, #28]
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 80015d2:	69da      	ldr	r2, [r3, #28]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	055b      	lsls	r3, r3, #21
 80015d8:	4013      	ands	r3, r2
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015de:	183b      	adds	r3, r7, r0
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	d11a      	bne.n	8001626 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	0049      	lsls	r1, r1, #1
 80015fa:	430a      	orrs	r2, r1
 80015fc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fc11 	bl	8000e24 <HAL_GetTick>
 8001602:	0003      	movs	r3, r0
 8001604:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001608:	f7ff fc0c 	bl	8000e24 <HAL_GetTick>
 800160c:	0002      	movs	r2, r0
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e185      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b0b      	ldr	r3, [pc, #44]	; (8001648 <HAL_RCC_OscConfig+0x338>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	4013      	ands	r3, r2
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d10e      	bne.n	800164c <HAL_RCC_OscConfig+0x33c>
 800162e:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001630:	6a1a      	ldr	r2, [r3, #32]
 8001632:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_RCC_OscConfig+0x32c>)
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	621a      	str	r2, [r3, #32]
 800163a:	e035      	b.n	80016a8 <HAL_RCC_OscConfig+0x398>
 800163c:	40021000 	.word	0x40021000
 8001640:	fffeffff 	.word	0xfffeffff
 8001644:	fffbffff 	.word	0xfffbffff
 8001648:	40007000 	.word	0x40007000
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x35e>
 8001654:	4bb6      	ldr	r3, [pc, #728]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	4bb5      	ldr	r3, [pc, #724]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800165a:	2101      	movs	r1, #1
 800165c:	438a      	bics	r2, r1
 800165e:	621a      	str	r2, [r3, #32]
 8001660:	4bb3      	ldr	r3, [pc, #716]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	4bb2      	ldr	r3, [pc, #712]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001666:	2104      	movs	r1, #4
 8001668:	438a      	bics	r2, r1
 800166a:	621a      	str	r2, [r3, #32]
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x398>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	2b05      	cmp	r3, #5
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0x380>
 8001676:	4bae      	ldr	r3, [pc, #696]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001678:	6a1a      	ldr	r2, [r3, #32]
 800167a:	4bad      	ldr	r3, [pc, #692]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800167c:	2104      	movs	r1, #4
 800167e:	430a      	orrs	r2, r1
 8001680:	621a      	str	r2, [r3, #32]
 8001682:	4bab      	ldr	r3, [pc, #684]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001684:	6a1a      	ldr	r2, [r3, #32]
 8001686:	4baa      	ldr	r3, [pc, #680]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001688:	2101      	movs	r1, #1
 800168a:	430a      	orrs	r2, r1
 800168c:	621a      	str	r2, [r3, #32]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0x398>
 8001690:	4ba7      	ldr	r3, [pc, #668]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	4ba6      	ldr	r3, [pc, #664]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001696:	2101      	movs	r1, #1
 8001698:	438a      	bics	r2, r1
 800169a:	621a      	str	r2, [r3, #32]
 800169c:	4ba4      	ldr	r3, [pc, #656]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800169e:	6a1a      	ldr	r2, [r3, #32]
 80016a0:	4ba3      	ldr	r3, [pc, #652]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80016a2:	2104      	movs	r1, #4
 80016a4:	438a      	bics	r2, r1
 80016a6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d014      	beq.n	80016da <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fbb8 	bl	8000e24 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	e009      	b.n	80016ce <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff fbb3 	bl	8000e24 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a9b      	ldr	r2, [pc, #620]	; (8001934 <HAL_RCC_OscConfig+0x624>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e12b      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ce:	4b98      	ldr	r3, [pc, #608]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	2202      	movs	r2, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d0f0      	beq.n	80016ba <HAL_RCC_OscConfig+0x3aa>
 80016d8:	e013      	b.n	8001702 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016da:	f7ff fba3 	bl	8000e24 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e2:	e009      	b.n	80016f8 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016e4:	f7ff fb9e 	bl	8000e24 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	4a91      	ldr	r2, [pc, #580]	; (8001934 <HAL_RCC_OscConfig+0x624>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e116      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016f8:	4b8d      	ldr	r3, [pc, #564]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	2202      	movs	r2, #2
 80016fe:	4013      	ands	r3, r2
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001702:	231f      	movs	r3, #31
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d105      	bne.n	8001718 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800170c:	4b88      	ldr	r3, [pc, #544]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	4b87      	ldr	r3, [pc, #540]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001712:	4989      	ldr	r1, [pc, #548]	; (8001938 <HAL_RCC_OscConfig+0x628>)
 8001714:	400a      	ands	r2, r1
 8001716:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2210      	movs	r2, #16
 800171e:	4013      	ands	r3, r2
 8001720:	d063      	beq.n	80017ea <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d12a      	bne.n	8001780 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800172a:	4b81      	ldr	r3, [pc, #516]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800172c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172e:	4b80      	ldr	r3, [pc, #512]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001730:	2104      	movs	r1, #4
 8001732:	430a      	orrs	r2, r1
 8001734:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001736:	4b7e      	ldr	r3, [pc, #504]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800173a:	4b7d      	ldr	r3, [pc, #500]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800173c:	2101      	movs	r1, #1
 800173e:	430a      	orrs	r2, r1
 8001740:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001742:	f7ff fb6f 	bl	8000e24 <HAL_GetTick>
 8001746:	0003      	movs	r3, r0
 8001748:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800174c:	f7ff fb6a 	bl	8000e24 <HAL_GetTick>
 8001750:	0002      	movs	r2, r0
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e0e3      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800175e:	4b74      	ldr	r3, [pc, #464]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	2202      	movs	r2, #2
 8001764:	4013      	ands	r3, r2
 8001766:	d0f1      	beq.n	800174c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001768:	4b71      	ldr	r3, [pc, #452]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800176a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176c:	22f8      	movs	r2, #248	; 0xf8
 800176e:	4393      	bics	r3, r2
 8001770:	0019      	movs	r1, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	00da      	lsls	r2, r3, #3
 8001778:	4b6d      	ldr	r3, [pc, #436]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800177a:	430a      	orrs	r2, r1
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
 800177e:	e034      	b.n	80017ea <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	3305      	adds	r3, #5
 8001786:	d111      	bne.n	80017ac <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001788:	4b69      	ldr	r3, [pc, #420]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800178a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800178c:	4b68      	ldr	r3, [pc, #416]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800178e:	2104      	movs	r1, #4
 8001790:	438a      	bics	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001794:	4b66      	ldr	r3, [pc, #408]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001798:	22f8      	movs	r2, #248	; 0xf8
 800179a:	4393      	bics	r3, r2
 800179c:	0019      	movs	r1, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	00da      	lsls	r2, r3, #3
 80017a4:	4b62      	ldr	r3, [pc, #392]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
 80017aa:	e01e      	b.n	80017ea <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80017ac:	4b60      	ldr	r3, [pc, #384]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80017ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b0:	4b5f      	ldr	r3, [pc, #380]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80017b2:	2104      	movs	r1, #4
 80017b4:	430a      	orrs	r2, r1
 80017b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80017b8:	4b5d      	ldr	r3, [pc, #372]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80017ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017bc:	4b5c      	ldr	r3, [pc, #368]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80017be:	2101      	movs	r1, #1
 80017c0:	438a      	bics	r2, r1
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c4:	f7ff fb2e 	bl	8000e24 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80017ce:	f7ff fb29 	bl	8000e24 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e0a2      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80017e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e4:	2202      	movs	r2, #2
 80017e6:	4013      	ands	r3, r2
 80017e8:	d1f1      	bne.n	80017ce <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d100      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4e4>
 80017f2:	e097      	b.n	8001924 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f4:	4b4e      	ldr	r3, [pc, #312]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	220c      	movs	r2, #12
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b08      	cmp	r3, #8
 80017fe:	d100      	bne.n	8001802 <HAL_RCC_OscConfig+0x4f2>
 8001800:	e06b      	b.n	80018da <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	2b02      	cmp	r3, #2
 8001808:	d14c      	bne.n	80018a4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b48      	ldr	r3, [pc, #288]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001810:	494a      	ldr	r1, [pc, #296]	; (800193c <HAL_RCC_OscConfig+0x62c>)
 8001812:	400a      	ands	r2, r1
 8001814:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001816:	f7ff fb05 	bl	8000e24 <HAL_GetTick>
 800181a:	0003      	movs	r3, r0
 800181c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fb00 	bl	8000e24 <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e079      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001832:	4b3f      	ldr	r3, [pc, #252]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	049b      	lsls	r3, r3, #18
 800183a:	4013      	ands	r3, r2
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800183e:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001842:	220f      	movs	r2, #15
 8001844:	4393      	bics	r3, r2
 8001846:	0019      	movs	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800184e:	430a      	orrs	r2, r1
 8001850:	62da      	str	r2, [r3, #44]	; 0x2c
 8001852:	4b37      	ldr	r3, [pc, #220]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4a3a      	ldr	r2, [pc, #232]	; (8001940 <HAL_RCC_OscConfig+0x630>)
 8001858:	4013      	ands	r3, r2
 800185a:	0019      	movs	r1, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001864:	431a      	orrs	r2, r3
 8001866:	4b32      	ldr	r3, [pc, #200]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001868:	430a      	orrs	r2, r1
 800186a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b30      	ldr	r3, [pc, #192]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b2f      	ldr	r3, [pc, #188]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001872:	2180      	movs	r1, #128	; 0x80
 8001874:	0449      	lsls	r1, r1, #17
 8001876:	430a      	orrs	r2, r1
 8001878:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff fad3 	bl	8000e24 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff face 	bl	8000e24 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e047      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	049b      	lsls	r3, r3, #18
 800189e:	4013      	ands	r3, r2
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x574>
 80018a2:	e03f      	b.n	8001924 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b22      	ldr	r3, [pc, #136]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b21      	ldr	r3, [pc, #132]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80018aa:	4924      	ldr	r1, [pc, #144]	; (800193c <HAL_RCC_OscConfig+0x62c>)
 80018ac:	400a      	ands	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b0:	f7ff fab8 	bl	8000e24 <HAL_GetTick>
 80018b4:	0003      	movs	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b8:	e008      	b.n	80018cc <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff fab3 	bl	8000e24 <HAL_GetTick>
 80018be:	0002      	movs	r2, r0
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	1ad3      	subs	r3, r2, r3
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e02c      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	049b      	lsls	r3, r3, #18
 80018d4:	4013      	ands	r3, r2
 80018d6:	d1f0      	bne.n	80018ba <HAL_RCC_OscConfig+0x5aa>
 80018d8:	e024      	b.n	8001924 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e01f      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <HAL_RCC_OscConfig+0x620>)
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	025b      	lsls	r3, r3, #9
 80018f8:	401a      	ands	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fe:	429a      	cmp	r2, r3
 8001900:	d10e      	bne.n	8001920 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	220f      	movs	r2, #15
 8001906:	401a      	ands	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d107      	bne.n	8001920 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	23f0      	movs	r3, #240	; 0xf0
 8001914:	039b      	lsls	r3, r3, #14
 8001916:	401a      	ands	r2, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e000      	b.n	8001926 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	0018      	movs	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	b008      	add	sp, #32
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40021000 	.word	0x40021000
 8001934:	00001388 	.word	0x00001388
 8001938:	efffffff 	.word	0xefffffff
 800193c:	feffffff 	.word	0xfeffffff
 8001940:	ffc2ffff 	.word	0xffc2ffff

08001944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b3      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b5b      	ldr	r3, [pc, #364]	; (8001ac8 <HAL_RCC_ClockConfig+0x184>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2201      	movs	r2, #1
 800195e:	4013      	ands	r3, r2
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d911      	bls.n	800198a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b58      	ldr	r3, [pc, #352]	; (8001ac8 <HAL_RCC_ClockConfig+0x184>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2201      	movs	r2, #1
 800196c:	4393      	bics	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	4b55      	ldr	r3, [pc, #340]	; (8001ac8 <HAL_RCC_ClockConfig+0x184>)
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_ClockConfig+0x184>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2201      	movs	r2, #1
 800197e:	4013      	ands	r3, r2
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	429a      	cmp	r2, r3
 8001984:	d001      	beq.n	800198a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e09a      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2202      	movs	r2, #2
 8001990:	4013      	ands	r3, r2
 8001992:	d015      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2204      	movs	r2, #4
 800199a:	4013      	ands	r3, r2
 800199c:	d006      	beq.n	80019ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800199e:	4b4b      	ldr	r3, [pc, #300]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4b4a      	ldr	r3, [pc, #296]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 80019a4:	21e0      	movs	r1, #224	; 0xe0
 80019a6:	00c9      	lsls	r1, r1, #3
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ac:	4b47      	ldr	r3, [pc, #284]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	22f0      	movs	r2, #240	; 0xf0
 80019b2:	4393      	bics	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	4b44      	ldr	r3, [pc, #272]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 80019bc:	430a      	orrs	r2, r1
 80019be:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	d040      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b3e      	ldr	r3, [pc, #248]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	029b      	lsls	r3, r3, #10
 80019da:	4013      	ands	r3, r2
 80019dc:	d114      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06e      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	2380      	movs	r3, #128	; 0x80
 80019f0:	049b      	lsls	r3, r3, #18
 80019f2:	4013      	ands	r3, r2
 80019f4:	d108      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e062      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fa:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2202      	movs	r2, #2
 8001a00:	4013      	ands	r3, r2
 8001a02:	d101      	bne.n	8001a08 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e05b      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a08:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	4393      	bics	r3, r2
 8001a10:	0019      	movs	r1, r3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4b2d      	ldr	r3, [pc, #180]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a1c:	f7ff fa02 	bl	8000e24 <HAL_GetTick>
 8001a20:	0003      	movs	r3, r0
 8001a22:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a24:	e009      	b.n	8001a3a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a26:	f7ff f9fd 	bl	8000e24 <HAL_GetTick>
 8001a2a:	0002      	movs	r2, r0
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_RCC_ClockConfig+0x18c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e042      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	220c      	movs	r2, #12
 8001a40:	401a      	ands	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1ec      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_RCC_ClockConfig+0x184>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2201      	movs	r2, #1
 8001a52:	4013      	ands	r3, r2
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d211      	bcs.n	8001a7e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_RCC_ClockConfig+0x184>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_RCC_ClockConfig+0x184>)
 8001a66:	683a      	ldr	r2, [r7, #0]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6c:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_RCC_ClockConfig+0x184>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2201      	movs	r2, #1
 8001a72:	4013      	ands	r3, r2
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d001      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e020      	b.n	8001ac0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2204      	movs	r2, #4
 8001a84:	4013      	ands	r3, r2
 8001a86:	d009      	beq.n	8001a9c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	4a11      	ldr	r2, [pc, #68]	; (8001ad4 <HAL_RCC_ClockConfig+0x190>)
 8001a8e:	4013      	ands	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a9c:	f000 f820 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8001aa0:	0001      	movs	r1, r0
 8001aa2:	4b0a      	ldr	r3, [pc, #40]	; (8001acc <HAL_RCC_ClockConfig+0x188>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	220f      	movs	r2, #15
 8001aaa:	4013      	ands	r3, r2
 8001aac:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <HAL_RCC_ClockConfig+0x194>)
 8001aae:	5cd3      	ldrb	r3, [r2, r3]
 8001ab0:	000a      	movs	r2, r1
 8001ab2:	40da      	lsrs	r2, r3
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_RCC_ClockConfig+0x198>)
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ab8:	2003      	movs	r0, #3
 8001aba:	f7ff f96d 	bl	8000d98 <HAL_InitTick>
  
  return HAL_OK;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b004      	add	sp, #16
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40022000 	.word	0x40022000
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	00001388 	.word	0x00001388
 8001ad4:	fffff8ff 	.word	0xfffff8ff
 8001ad8:	08003bd8 	.word	0x08003bd8
 8001adc:	20000000 	.word	0x20000000

08001ae0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b08f      	sub	sp, #60	; 0x3c
 8001ae4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ae6:	2314      	movs	r3, #20
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	4a2b      	ldr	r2, [pc, #172]	; (8001b98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001aee:	c313      	stmia	r3!, {r0, r1, r4}
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4a29      	ldr	r2, [pc, #164]	; (8001b9c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001af8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001afa:	c313      	stmia	r3!, {r0, r1, r4}
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b04:	2300      	movs	r3, #0
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b14:	4b22      	ldr	r3, [pc, #136]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b04      	cmp	r3, #4
 8001b22:	d002      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x4a>
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	d003      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x50>
 8001b28:	e02d      	b.n	8001b86 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b2e:	e02d      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b32:	0c9b      	lsrs	r3, r3, #18
 8001b34:	220f      	movs	r2, #15
 8001b36:	4013      	ands	r3, r2
 8001b38:	2214      	movs	r2, #20
 8001b3a:	18ba      	adds	r2, r7, r2
 8001b3c:	5cd3      	ldrb	r3, [r2, r3]
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001b40:	4b17      	ldr	r3, [pc, #92]	; (8001ba0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	220f      	movs	r2, #15
 8001b46:	4013      	ands	r3, r2
 8001b48:	1d3a      	adds	r2, r7, #4
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
 8001b4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	025b      	lsls	r3, r3, #9
 8001b54:	4013      	ands	r3, r2
 8001b56:	d009      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b5a:	4812      	ldr	r0, [pc, #72]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b5c:	f7fe fadc 	bl	8000118 <__udivsi3>
 8001b60:	0003      	movs	r3, r0
 8001b62:	001a      	movs	r2, r3
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	4353      	muls	r3, r2
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6a:	e009      	b.n	8001b80 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b6e:	000a      	movs	r2, r1
 8001b70:	0152      	lsls	r2, r2, #5
 8001b72:	1a52      	subs	r2, r2, r1
 8001b74:	0193      	lsls	r3, r2, #6
 8001b76:	1a9b      	subs	r3, r3, r2
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	185b      	adds	r3, r3, r1
 8001b7c:	021b      	lsls	r3, r3, #8
 8001b7e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b84:	e002      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001b88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b8a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b8e:	0018      	movs	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	b00f      	add	sp, #60	; 0x3c
 8001b94:	bd90      	pop	{r4, r7, pc}
 8001b96:	46c0      	nop			; (mov r8, r8)
 8001b98:	08003bb8 	.word	0x08003bb8
 8001b9c:	08003bc8 	.word	0x08003bc8
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	007a1200 	.word	0x007a1200

08001ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bac:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001bae:	681b      	ldr	r3, [r3, #0]
}
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	20000000 	.word	0x20000000

08001bbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001bc0:	f7ff fff2 	bl	8001ba8 <HAL_RCC_GetHCLKFreq>
 8001bc4:	0001      	movs	r1, r0
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	2207      	movs	r2, #7
 8001bce:	4013      	ands	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bd2:	5cd3      	ldrb	r3, [r2, r3]
 8001bd4:	40d9      	lsrs	r1, r3
 8001bd6:	000b      	movs	r3, r1
}    
 8001bd8:	0018      	movs	r0, r3
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	46c0      	nop			; (mov r8, r8)
 8001be0:	40021000 	.word	0x40021000
 8001be4:	08003be8 	.word	0x08003be8

08001be8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	2380      	movs	r3, #128	; 0x80
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	4013      	ands	r3, r2
 8001c02:	d100      	bne.n	8001c06 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001c04:	e08e      	b.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001c06:	2017      	movs	r0, #23
 8001c08:	183b      	adds	r3, r7, r0
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0e:	4b57      	ldr	r3, [pc, #348]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c10:	69da      	ldr	r2, [r3, #28]
 8001c12:	2380      	movs	r3, #128	; 0x80
 8001c14:	055b      	lsls	r3, r3, #21
 8001c16:	4013      	ands	r3, r2
 8001c18:	d110      	bne.n	8001c3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b54      	ldr	r3, [pc, #336]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c1c:	69da      	ldr	r2, [r3, #28]
 8001c1e:	4b53      	ldr	r3, [pc, #332]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c20:	2180      	movs	r1, #128	; 0x80
 8001c22:	0549      	lsls	r1, r1, #21
 8001c24:	430a      	orrs	r2, r1
 8001c26:	61da      	str	r2, [r3, #28]
 8001c28:	4b50      	ldr	r3, [pc, #320]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c2a:	69da      	ldr	r2, [r3, #28]
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	055b      	lsls	r3, r3, #21
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c36:	183b      	adds	r3, r7, r0
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	4b4c      	ldr	r3, [pc, #304]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	2380      	movs	r3, #128	; 0x80
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d11a      	bne.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c48:	4b49      	ldr	r3, [pc, #292]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b48      	ldr	r3, [pc, #288]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c4e:	2180      	movs	r1, #128	; 0x80
 8001c50:	0049      	lsls	r1, r1, #1
 8001c52:	430a      	orrs	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f8e5 	bl	8000e24 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5e:	e008      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c60:	f7ff f8e0 	bl	8000e24 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e077      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b3f      	ldr	r3, [pc, #252]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c7e:	4b3b      	ldr	r3, [pc, #236]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001c80:	6a1a      	ldr	r2, [r3, #32]
 8001c82:	23c0      	movs	r3, #192	; 0xc0
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d034      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	23c0      	movs	r3, #192	; 0xc0
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d02c      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ca0:	4b32      	ldr	r3, [pc, #200]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001ca2:	6a1b      	ldr	r3, [r3, #32]
 8001ca4:	4a33      	ldr	r2, [pc, #204]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001caa:	4b30      	ldr	r3, [pc, #192]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cac:	6a1a      	ldr	r2, [r3, #32]
 8001cae:	4b2f      	ldr	r3, [pc, #188]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0249      	lsls	r1, r1, #9
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cb8:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cba:	6a1a      	ldr	r2, [r3, #32]
 8001cbc:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cbe:	492e      	ldr	r1, [pc, #184]	; (8001d78 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d013      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff f8a7 	bl	8000e24 <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	e009      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f8a2 	bl	8000e24 <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	4a25      	ldr	r2, [pc, #148]	; (8001d7c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e038      	b.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf0:	4b1e      	ldr	r3, [pc, #120]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cf2:	6a1b      	ldr	r3, [r3, #32]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a1d      	ldr	r2, [pc, #116]	; (8001d74 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	0019      	movs	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d0e:	2317      	movs	r3, #23
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d105      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d18:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d1a:	69da      	ldr	r2, [r3, #28]
 8001d1c:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d1e:	4918      	ldr	r1, [pc, #96]	; (8001d80 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d009      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d2e:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	2203      	movs	r2, #3
 8001d34:	4393      	bics	r3, r2
 8001d36:	0019      	movs	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2220      	movs	r2, #32
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d009      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d4c:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	2210      	movs	r2, #16
 8001d52:	4393      	bics	r3, r2
 8001d54:	0019      	movs	r1, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b006      	add	sp, #24
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40007000 	.word	0x40007000
 8001d74:	fffffcff 	.word	0xfffffcff
 8001d78:	fffeffff 	.word	0xfffeffff
 8001d7c:	00001388 	.word	0x00001388
 8001d80:	efffffff 	.word	0xefffffff

08001d84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e042      	b.n	8001e1c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	223d      	movs	r2, #61	; 0x3d
 8001d9a:	5c9b      	ldrb	r3, [r3, r2]
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d107      	bne.n	8001db2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	223c      	movs	r2, #60	; 0x3c
 8001da6:	2100      	movs	r1, #0
 8001da8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7fe fe6b 	bl	8000a88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	223d      	movs	r2, #61	; 0x3d
 8001db6:	2102      	movs	r1, #2
 8001db8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	0010      	movs	r0, r2
 8001dc6:	f000 fdc5 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2246      	movs	r2, #70	; 0x46
 8001dce:	2101      	movs	r1, #1
 8001dd0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	223e      	movs	r2, #62	; 0x3e
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	223f      	movs	r2, #63	; 0x3f
 8001dde:	2101      	movs	r1, #1
 8001de0:	5499      	strb	r1, [r3, r2]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2240      	movs	r2, #64	; 0x40
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2241      	movs	r2, #65	; 0x41
 8001dee:	2101      	movs	r1, #1
 8001df0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2242      	movs	r2, #66	; 0x42
 8001df6:	2101      	movs	r1, #1
 8001df8:	5499      	strb	r1, [r3, r2]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2243      	movs	r2, #67	; 0x43
 8001dfe:	2101      	movs	r1, #1
 8001e00:	5499      	strb	r1, [r3, r2]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2244      	movs	r2, #68	; 0x44
 8001e06:	2101      	movs	r1, #1
 8001e08:	5499      	strb	r1, [r3, r2]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2245      	movs	r2, #69	; 0x45
 8001e0e:	2101      	movs	r1, #1
 8001e10:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	223d      	movs	r2, #61	; 0x3d
 8001e16:	2101      	movs	r1, #1
 8001e18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	0018      	movs	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	b002      	add	sp, #8
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	223d      	movs	r2, #61	; 0x3d
 8001e30:	5c9b      	ldrb	r3, [r3, r2]
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d001      	beq.n	8001e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e030      	b.n	8001e9e <HAL_TIM_Base_Start_IT+0x7a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	223d      	movs	r2, #61	; 0x3d
 8001e40:	2102      	movs	r1, #2
 8001e42:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <HAL_TIM_Base_Start_IT+0x84>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d004      	beq.n	8001e68 <HAL_TIM_Base_Start_IT+0x44>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a12      	ldr	r2, [pc, #72]	; (8001eac <HAL_TIM_Base_Start_IT+0x88>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d111      	bne.n	8001e8c <HAL_TIM_Base_Start_IT+0x68>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2207      	movs	r2, #7
 8001e70:	4013      	ands	r3, r2
 8001e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d010      	beq.n	8001e9c <HAL_TIM_Base_Start_IT+0x78>
    {
      __HAL_TIM_ENABLE(htim);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2101      	movs	r1, #1
 8001e86:	430a      	orrs	r2, r1
 8001e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e8a:	e007      	b.n	8001e9c <HAL_TIM_Base_Start_IT+0x78>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40000400 	.word	0x40000400

08001eb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e042      	b.n	8001f48 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	223d      	movs	r2, #61	; 0x3d
 8001ec6:	5c9b      	ldrb	r3, [r3, r2]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	223c      	movs	r2, #60	; 0x3c
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f000 f839 	bl	8001f50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	223d      	movs	r2, #61	; 0x3d
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	0019      	movs	r1, r3
 8001ef0:	0010      	movs	r0, r2
 8001ef2:	f000 fd2f 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2246      	movs	r2, #70	; 0x46
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	223e      	movs	r2, #62	; 0x3e
 8001f02:	2101      	movs	r1, #1
 8001f04:	5499      	strb	r1, [r3, r2]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	223f      	movs	r2, #63	; 0x3f
 8001f0a:	2101      	movs	r1, #1
 8001f0c:	5499      	strb	r1, [r3, r2]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	2101      	movs	r1, #1
 8001f14:	5499      	strb	r1, [r3, r2]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2241      	movs	r2, #65	; 0x41
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2242      	movs	r2, #66	; 0x42
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2243      	movs	r2, #67	; 0x43
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	5499      	strb	r1, [r3, r2]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2244      	movs	r2, #68	; 0x44
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2245      	movs	r2, #69	; 0x45
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	223d      	movs	r2, #61	; 0x3d
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e042      	b.n	8001ff8 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	223d      	movs	r2, #61	; 0x3d
 8001f76:	5c9b      	ldrb	r3, [r3, r2]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d107      	bne.n	8001f8e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	223c      	movs	r2, #60	; 0x3c
 8001f82:	2100      	movs	r1, #0
 8001f84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	0018      	movs	r0, r3
 8001f8a:	f000 f839 	bl	8002000 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	223d      	movs	r2, #61	; 0x3d
 8001f92:	2102      	movs	r1, #2
 8001f94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	0010      	movs	r0, r2
 8001fa2:	f000 fcd7 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2246      	movs	r2, #70	; 0x46
 8001faa:	2101      	movs	r1, #1
 8001fac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	223e      	movs	r2, #62	; 0x3e
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	5499      	strb	r1, [r3, r2]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	223f      	movs	r2, #63	; 0x3f
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2241      	movs	r2, #65	; 0x41
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2242      	movs	r2, #66	; 0x42
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2243      	movs	r2, #67	; 0x43
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2244      	movs	r2, #68	; 0x44
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2245      	movs	r2, #69	; 0x45
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	223d      	movs	r2, #61	; 0x3d
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002008:	46c0      	nop			; (mov r8, r8)
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800201a:	230f      	movs	r3, #15
 800201c:	18fb      	adds	r3, r7, r3
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <HAL_TIM_IC_Start_IT+0x22>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	223e      	movs	r2, #62	; 0x3e
 800202c:	5c9b      	ldrb	r3, [r3, r2]
 800202e:	b2db      	uxtb	r3, r3
 8002030:	e013      	b.n	800205a <HAL_TIM_IC_Start_IT+0x4a>
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d104      	bne.n	8002042 <HAL_TIM_IC_Start_IT+0x32>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	223f      	movs	r2, #63	; 0x3f
 800203c:	5c9b      	ldrb	r3, [r3, r2]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	e00b      	b.n	800205a <HAL_TIM_IC_Start_IT+0x4a>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d104      	bne.n	8002052 <HAL_TIM_IC_Start_IT+0x42>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2240      	movs	r2, #64	; 0x40
 800204c:	5c9b      	ldrb	r3, [r3, r2]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	e003      	b.n	800205a <HAL_TIM_IC_Start_IT+0x4a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2241      	movs	r2, #65	; 0x41
 8002056:	5c9b      	ldrb	r3, [r3, r2]
 8002058:	b2db      	uxtb	r3, r3
 800205a:	220e      	movs	r2, #14
 800205c:	18ba      	adds	r2, r7, r2
 800205e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d104      	bne.n	8002070 <HAL_TIM_IC_Start_IT+0x60>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2242      	movs	r2, #66	; 0x42
 800206a:	5c9b      	ldrb	r3, [r3, r2]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	e013      	b.n	8002098 <HAL_TIM_IC_Start_IT+0x88>
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	2b04      	cmp	r3, #4
 8002074:	d104      	bne.n	8002080 <HAL_TIM_IC_Start_IT+0x70>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2243      	movs	r2, #67	; 0x43
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	e00b      	b.n	8002098 <HAL_TIM_IC_Start_IT+0x88>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d104      	bne.n	8002090 <HAL_TIM_IC_Start_IT+0x80>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2244      	movs	r2, #68	; 0x44
 800208a:	5c9b      	ldrb	r3, [r3, r2]
 800208c:	b2db      	uxtb	r3, r3
 800208e:	e003      	b.n	8002098 <HAL_TIM_IC_Start_IT+0x88>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2245      	movs	r2, #69	; 0x45
 8002094:	5c9b      	ldrb	r3, [r3, r2]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	210d      	movs	r1, #13
 800209a:	187a      	adds	r2, r7, r1
 800209c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800209e:	230e      	movs	r3, #14
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d103      	bne.n	80020b0 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d001      	beq.n	80020b4 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0a6      	b.n	8002202 <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d104      	bne.n	80020c4 <HAL_TIM_IC_Start_IT+0xb4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	223e      	movs	r2, #62	; 0x3e
 80020be:	2102      	movs	r1, #2
 80020c0:	5499      	strb	r1, [r3, r2]
 80020c2:	e013      	b.n	80020ec <HAL_TIM_IC_Start_IT+0xdc>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d104      	bne.n	80020d4 <HAL_TIM_IC_Start_IT+0xc4>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	223f      	movs	r2, #63	; 0x3f
 80020ce:	2102      	movs	r1, #2
 80020d0:	5499      	strb	r1, [r3, r2]
 80020d2:	e00b      	b.n	80020ec <HAL_TIM_IC_Start_IT+0xdc>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d104      	bne.n	80020e4 <HAL_TIM_IC_Start_IT+0xd4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2240      	movs	r2, #64	; 0x40
 80020de:	2102      	movs	r1, #2
 80020e0:	5499      	strb	r1, [r3, r2]
 80020e2:	e003      	b.n	80020ec <HAL_TIM_IC_Start_IT+0xdc>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2241      	movs	r2, #65	; 0x41
 80020e8:	2102      	movs	r1, #2
 80020ea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d104      	bne.n	80020fc <HAL_TIM_IC_Start_IT+0xec>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2242      	movs	r2, #66	; 0x42
 80020f6:	2102      	movs	r1, #2
 80020f8:	5499      	strb	r1, [r3, r2]
 80020fa:	e013      	b.n	8002124 <HAL_TIM_IC_Start_IT+0x114>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d104      	bne.n	800210c <HAL_TIM_IC_Start_IT+0xfc>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2243      	movs	r2, #67	; 0x43
 8002106:	2102      	movs	r1, #2
 8002108:	5499      	strb	r1, [r3, r2]
 800210a:	e00b      	b.n	8002124 <HAL_TIM_IC_Start_IT+0x114>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	2b08      	cmp	r3, #8
 8002110:	d104      	bne.n	800211c <HAL_TIM_IC_Start_IT+0x10c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2244      	movs	r2, #68	; 0x44
 8002116:	2102      	movs	r1, #2
 8002118:	5499      	strb	r1, [r3, r2]
 800211a:	e003      	b.n	8002124 <HAL_TIM_IC_Start_IT+0x114>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2245      	movs	r2, #69	; 0x45
 8002120:	2102      	movs	r1, #2
 8002122:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d02a      	beq.n	8002180 <HAL_TIM_IC_Start_IT+0x170>
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	d830      	bhi.n	8002192 <HAL_TIM_IC_Start_IT+0x182>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	2b08      	cmp	r3, #8
 8002134:	d01b      	beq.n	800216e <HAL_TIM_IC_Start_IT+0x15e>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d82a      	bhi.n	8002192 <HAL_TIM_IC_Start_IT+0x182>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d003      	beq.n	800214a <HAL_TIM_IC_Start_IT+0x13a>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d009      	beq.n	800215c <HAL_TIM_IC_Start_IT+0x14c>
 8002148:	e023      	b.n	8002192 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68da      	ldr	r2, [r3, #12]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2102      	movs	r1, #2
 8002156:	430a      	orrs	r2, r1
 8002158:	60da      	str	r2, [r3, #12]
      break;
 800215a:	e01f      	b.n	800219c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2104      	movs	r1, #4
 8002168:	430a      	orrs	r2, r1
 800216a:	60da      	str	r2, [r3, #12]
      break;
 800216c:	e016      	b.n	800219c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2108      	movs	r1, #8
 800217a:	430a      	orrs	r2, r1
 800217c:	60da      	str	r2, [r3, #12]
      break;
 800217e:	e00d      	b.n	800219c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2110      	movs	r1, #16
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]
      break;
 8002190:	e004      	b.n	800219c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8002192:	230f      	movs	r3, #15
 8002194:	18fb      	adds	r3, r7, r3
 8002196:	2201      	movs	r2, #1
 8002198:	701a      	strb	r2, [r3, #0]
      break;
 800219a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 800219c:	230f      	movs	r3, #15
 800219e:	18fb      	adds	r3, r7, r3
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d12a      	bne.n	80021fc <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	2201      	movs	r2, #1
 80021ae:	0018      	movs	r0, r3
 80021b0:	f000 ffd0 	bl	8003154 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a14      	ldr	r2, [pc, #80]	; (800220c <HAL_TIM_IC_Start_IT+0x1fc>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d004      	beq.n	80021c8 <HAL_TIM_IC_Start_IT+0x1b8>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a13      	ldr	r2, [pc, #76]	; (8002210 <HAL_TIM_IC_Start_IT+0x200>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d111      	bne.n	80021ec <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2207      	movs	r2, #7
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d010      	beq.n	80021fc <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2101      	movs	r1, #1
 80021e6:	430a      	orrs	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ea:	e007      	b.n	80021fc <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2101      	movs	r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80021fc:	230f      	movs	r3, #15
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	781b      	ldrb	r3, [r3, #0]
}
 8002202:	0018      	movs	r0, r3
 8002204:	46bd      	mov	sp, r7
 8002206:	b004      	add	sp, #16
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40000400 	.word	0x40000400

08002214 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	2202      	movs	r2, #2
 8002224:	4013      	ands	r3, r2
 8002226:	2b02      	cmp	r3, #2
 8002228:	d124      	bne.n	8002274 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	2202      	movs	r2, #2
 8002232:	4013      	ands	r3, r2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d11d      	bne.n	8002274 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2203      	movs	r2, #3
 800223e:	4252      	negs	r2, r2
 8002240:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2203      	movs	r2, #3
 8002250:	4013      	ands	r3, r2
 8002252:	d004      	beq.n	800225e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	0018      	movs	r0, r3
 8002258:	f7fd ffea 	bl	8000230 <HAL_TIM_IC_CaptureCallback>
 800225c:	e007      	b.n	800226e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	0018      	movs	r0, r3
 8002262:	f000 fb5f 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	0018      	movs	r0, r3
 800226a:	f000 fb63 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	2204      	movs	r2, #4
 800227c:	4013      	ands	r3, r2
 800227e:	2b04      	cmp	r3, #4
 8002280:	d125      	bne.n	80022ce <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2204      	movs	r2, #4
 800228a:	4013      	ands	r3, r2
 800228c:	2b04      	cmp	r3, #4
 800228e:	d11e      	bne.n	80022ce <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2205      	movs	r2, #5
 8002296:	4252      	negs	r2, r2
 8002298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	23c0      	movs	r3, #192	; 0xc0
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4013      	ands	r3, r2
 80022ac:	d004      	beq.n	80022b8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	0018      	movs	r0, r3
 80022b2:	f7fd ffbd 	bl	8000230 <HAL_TIM_IC_CaptureCallback>
 80022b6:	e007      	b.n	80022c8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	0018      	movs	r0, r3
 80022bc:	f000 fb32 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	0018      	movs	r0, r3
 80022c4:	f000 fb36 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	2208      	movs	r2, #8
 80022d6:	4013      	ands	r3, r2
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d124      	bne.n	8002326 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2208      	movs	r2, #8
 80022e4:	4013      	ands	r3, r2
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d11d      	bne.n	8002326 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2209      	movs	r2, #9
 80022f0:	4252      	negs	r2, r2
 80022f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2204      	movs	r2, #4
 80022f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	2203      	movs	r2, #3
 8002302:	4013      	ands	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	0018      	movs	r0, r3
 800230a:	f7fd ff91 	bl	8000230 <HAL_TIM_IC_CaptureCallback>
 800230e:	e007      	b.n	8002320 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	0018      	movs	r0, r3
 8002314:	f000 fb06 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	0018      	movs	r0, r3
 800231c:	f000 fb0a 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2210      	movs	r2, #16
 800232e:	4013      	ands	r3, r2
 8002330:	2b10      	cmp	r3, #16
 8002332:	d125      	bne.n	8002380 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2210      	movs	r2, #16
 800233c:	4013      	ands	r3, r2
 800233e:	2b10      	cmp	r3, #16
 8002340:	d11e      	bne.n	8002380 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2211      	movs	r2, #17
 8002348:	4252      	negs	r2, r2
 800234a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2208      	movs	r2, #8
 8002350:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	23c0      	movs	r3, #192	; 0xc0
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4013      	ands	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0018      	movs	r0, r3
 8002364:	f7fd ff64 	bl	8000230 <HAL_TIM_IC_CaptureCallback>
 8002368:	e007      	b.n	800237a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 fad9 	bl	8002924 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	0018      	movs	r0, r3
 8002376:	f000 fadd 	bl	8002934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	2201      	movs	r2, #1
 8002388:	4013      	ands	r3, r2
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10f      	bne.n	80023ae <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	4013      	ands	r3, r2
 8002398:	2b01      	cmp	r3, #1
 800239a:	d108      	bne.n	80023ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2202      	movs	r2, #2
 80023a2:	4252      	negs	r2, r2
 80023a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7fd ff9f 	bl	80002ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2280      	movs	r2, #128	; 0x80
 80023b6:	4013      	ands	r3, r2
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d10f      	bne.n	80023dc <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2280      	movs	r2, #128	; 0x80
 80023c4:	4013      	ands	r3, r2
 80023c6:	2b80      	cmp	r3, #128	; 0x80
 80023c8:	d108      	bne.n	80023dc <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2281      	movs	r2, #129	; 0x81
 80023d0:	4252      	negs	r2, r2
 80023d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 ff98 	bl	800330c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2240      	movs	r2, #64	; 0x40
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b40      	cmp	r3, #64	; 0x40
 80023e8:	d10f      	bne.n	800240a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2240      	movs	r2, #64	; 0x40
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b40      	cmp	r3, #64	; 0x40
 80023f6:	d108      	bne.n	800240a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2241      	movs	r2, #65	; 0x41
 80023fe:	4252      	negs	r2, r2
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 fa9d 	bl	8002944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2220      	movs	r2, #32
 8002412:	4013      	ands	r3, r2
 8002414:	2b20      	cmp	r3, #32
 8002416:	d10f      	bne.n	8002438 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	2220      	movs	r2, #32
 8002420:	4013      	ands	r3, r2
 8002422:	2b20      	cmp	r3, #32
 8002424:	d108      	bne.n	8002438 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2221      	movs	r2, #33	; 0x21
 800242c:	4252      	negs	r2, r2
 800242e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	0018      	movs	r0, r3
 8002434:	f000 ff62 	bl	80032fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b002      	add	sp, #8
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800244c:	2317      	movs	r3, #23
 800244e:	18fb      	adds	r3, r7, r3
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	223c      	movs	r2, #60	; 0x3c
 8002458:	5c9b      	ldrb	r3, [r3, r2]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_TIM_IC_ConfigChannel+0x22>
 800245e:	2302      	movs	r3, #2
 8002460:	e08c      	b.n	800257c <HAL_TIM_IC_ConfigChannel+0x13c>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	223c      	movs	r2, #60	; 0x3c
 8002466:	2101      	movs	r1, #1
 8002468:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11b      	bne.n	80024a8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	6819      	ldr	r1, [r3, #0]
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f000 fcb4 	bl	8002dec <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699a      	ldr	r2, [r3, #24]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	210c      	movs	r1, #12
 8002490:	438a      	bics	r2, r1
 8002492:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6999      	ldr	r1, [r3, #24]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	619a      	str	r2, [r3, #24]
 80024a6:	e062      	b.n	800256e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	d11c      	bne.n	80024e8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	6819      	ldr	r1, [r3, #0]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f000 fd15 	bl	8002eec <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	699a      	ldr	r2, [r3, #24]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	492d      	ldr	r1, [pc, #180]	; (8002584 <HAL_TIM_IC_ConfigChannel+0x144>)
 80024ce:	400a      	ands	r2, r1
 80024d0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6999      	ldr	r1, [r3, #24]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	021a      	lsls	r2, r3, #8
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	619a      	str	r2, [r3, #24]
 80024e6:	e042      	b.n	800256e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d11b      	bne.n	8002526 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6818      	ldr	r0, [r3, #0]
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f000 fd69 	bl	8002fd4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69da      	ldr	r2, [r3, #28]
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	210c      	movs	r1, #12
 800250e:	438a      	bics	r2, r1
 8002510:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	69d9      	ldr	r1, [r3, #28]
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
 8002524:	e023      	b.n	800256e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b0c      	cmp	r3, #12
 800252a:	d11c      	bne.n	8002566 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6818      	ldr	r0, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	6819      	ldr	r1, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f000 fd8a 	bl	8003054 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	490e      	ldr	r1, [pc, #56]	; (8002584 <HAL_TIM_IC_ConfigChannel+0x144>)
 800254c:	400a      	ands	r2, r1
 800254e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	69d9      	ldr	r1, [r3, #28]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	021a      	lsls	r2, r3, #8
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	61da      	str	r2, [r3, #28]
 8002564:	e003      	b.n	800256e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002566:	2317      	movs	r3, #23
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2201      	movs	r2, #1
 800256c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	223c      	movs	r2, #60	; 0x3c
 8002572:	2100      	movs	r1, #0
 8002574:	5499      	strb	r1, [r3, r2]

  return status;
 8002576:	2317      	movs	r3, #23
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	781b      	ldrb	r3, [r3, #0]
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b006      	add	sp, #24
 8002582:	bd80      	pop	{r7, pc}
 8002584:	fffff3ff 	.word	0xfffff3ff

08002588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	2317      	movs	r3, #23
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	223c      	movs	r2, #60	; 0x3c
 80025a0:	5c9b      	ldrb	r3, [r3, r2]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d101      	bne.n	80025aa <HAL_TIM_PWM_ConfigChannel+0x22>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e0ad      	b.n	8002706 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	223c      	movs	r2, #60	; 0x3c
 80025ae:	2101      	movs	r1, #1
 80025b0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	d100      	bne.n	80025ba <HAL_TIM_PWM_ConfigChannel+0x32>
 80025b8:	e076      	b.n	80026a8 <HAL_TIM_PWM_ConfigChannel+0x120>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d900      	bls.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x3a>
 80025c0:	e095      	b.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d04e      	beq.n	8002666 <HAL_TIM_PWM_ConfigChannel+0xde>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d900      	bls.n	80025d0 <HAL_TIM_PWM_ConfigChannel+0x48>
 80025ce:	e08e      	b.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x166>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_TIM_PWM_ConfigChannel+0x56>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b04      	cmp	r3, #4
 80025da:	d021      	beq.n	8002620 <HAL_TIM_PWM_ConfigChannel+0x98>
 80025dc:	e087      	b.n	80026ee <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	0011      	movs	r1, r2
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 fa20 	bl	8002a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2108      	movs	r1, #8
 80025f8:	430a      	orrs	r2, r1
 80025fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2104      	movs	r1, #4
 8002608:	438a      	bics	r2, r1
 800260a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6999      	ldr	r1, [r3, #24]
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	691a      	ldr	r2, [r3, #16]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	619a      	str	r2, [r3, #24]
      break;
 800261e:	e06b      	b.n	80026f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	0011      	movs	r1, r2
 8002628:	0018      	movs	r0, r3
 800262a:	f000 fa7d 	bl	8002b28 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	0109      	lsls	r1, r1, #4
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699a      	ldr	r2, [r3, #24]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4931      	ldr	r1, [pc, #196]	; (8002710 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800264c:	400a      	ands	r2, r1
 800264e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6999      	ldr	r1, [r3, #24]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	021a      	lsls	r2, r3, #8
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	430a      	orrs	r2, r1
 8002662:	619a      	str	r2, [r3, #24]
      break;
 8002664:	e048      	b.n	80026f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	0011      	movs	r1, r2
 800266e:	0018      	movs	r0, r3
 8002670:	f000 fad8 	bl	8002c24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	69da      	ldr	r2, [r3, #28]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2108      	movs	r1, #8
 8002680:	430a      	orrs	r2, r1
 8002682:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69da      	ldr	r2, [r3, #28]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2104      	movs	r1, #4
 8002690:	438a      	bics	r2, r1
 8002692:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69d9      	ldr	r1, [r3, #28]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	61da      	str	r2, [r3, #28]
      break;
 80026a6:	e027      	b.n	80026f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	0011      	movs	r1, r2
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 fb37 	bl	8002d24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2180      	movs	r1, #128	; 0x80
 80026c2:	0109      	lsls	r1, r1, #4
 80026c4:	430a      	orrs	r2, r1
 80026c6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	490f      	ldr	r1, [pc, #60]	; (8002710 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80026d4:	400a      	ands	r2, r1
 80026d6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69d9      	ldr	r1, [r3, #28]
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	021a      	lsls	r2, r3, #8
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	430a      	orrs	r2, r1
 80026ea:	61da      	str	r2, [r3, #28]
      break;
 80026ec:	e004      	b.n	80026f8 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80026ee:	2317      	movs	r3, #23
 80026f0:	18fb      	adds	r3, r7, r3
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
      break;
 80026f6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	223c      	movs	r2, #60	; 0x3c
 80026fc:	2100      	movs	r1, #0
 80026fe:	5499      	strb	r1, [r3, r2]

  return status;
 8002700:	2317      	movs	r3, #23
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	781b      	ldrb	r3, [r3, #0]
}
 8002706:	0018      	movs	r0, r3
 8002708:	46bd      	mov	sp, r7
 800270a:	b006      	add	sp, #24
 800270c:	bd80      	pop	{r7, pc}
 800270e:	46c0      	nop			; (mov r8, r8)
 8002710:	fffffbff 	.word	0xfffffbff

08002714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271e:	230f      	movs	r3, #15
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	223c      	movs	r2, #60	; 0x3c
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_TIM_ConfigClockSource+0x20>
 8002730:	2302      	movs	r3, #2
 8002732:	e0bc      	b.n	80028ae <HAL_TIM_ConfigClockSource+0x19a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	223c      	movs	r2, #60	; 0x3c
 8002738:	2101      	movs	r1, #1
 800273a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	223d      	movs	r2, #61	; 0x3d
 8002740:	2102      	movs	r1, #2
 8002742:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2277      	movs	r2, #119	; 0x77
 8002750:	4393      	bics	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002758:	4013      	ands	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	2280      	movs	r2, #128	; 0x80
 800276a:	0192      	lsls	r2, r2, #6
 800276c:	4293      	cmp	r3, r2
 800276e:	d040      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0xde>
 8002770:	2280      	movs	r2, #128	; 0x80
 8002772:	0192      	lsls	r2, r2, #6
 8002774:	4293      	cmp	r3, r2
 8002776:	d900      	bls.n	800277a <HAL_TIM_ConfigClockSource+0x66>
 8002778:	e088      	b.n	800288c <HAL_TIM_ConfigClockSource+0x178>
 800277a:	2280      	movs	r2, #128	; 0x80
 800277c:	0152      	lsls	r2, r2, #5
 800277e:	4293      	cmp	r3, r2
 8002780:	d100      	bne.n	8002784 <HAL_TIM_ConfigClockSource+0x70>
 8002782:	e088      	b.n	8002896 <HAL_TIM_ConfigClockSource+0x182>
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	0152      	lsls	r2, r2, #5
 8002788:	4293      	cmp	r3, r2
 800278a:	d900      	bls.n	800278e <HAL_TIM_ConfigClockSource+0x7a>
 800278c:	e07e      	b.n	800288c <HAL_TIM_ConfigClockSource+0x178>
 800278e:	2b70      	cmp	r3, #112	; 0x70
 8002790:	d018      	beq.n	80027c4 <HAL_TIM_ConfigClockSource+0xb0>
 8002792:	d900      	bls.n	8002796 <HAL_TIM_ConfigClockSource+0x82>
 8002794:	e07a      	b.n	800288c <HAL_TIM_ConfigClockSource+0x178>
 8002796:	2b60      	cmp	r3, #96	; 0x60
 8002798:	d04f      	beq.n	800283a <HAL_TIM_ConfigClockSource+0x126>
 800279a:	d900      	bls.n	800279e <HAL_TIM_ConfigClockSource+0x8a>
 800279c:	e076      	b.n	800288c <HAL_TIM_ConfigClockSource+0x178>
 800279e:	2b50      	cmp	r3, #80	; 0x50
 80027a0:	d03b      	beq.n	800281a <HAL_TIM_ConfigClockSource+0x106>
 80027a2:	d900      	bls.n	80027a6 <HAL_TIM_ConfigClockSource+0x92>
 80027a4:	e072      	b.n	800288c <HAL_TIM_ConfigClockSource+0x178>
 80027a6:	2b40      	cmp	r3, #64	; 0x40
 80027a8:	d057      	beq.n	800285a <HAL_TIM_ConfigClockSource+0x146>
 80027aa:	d900      	bls.n	80027ae <HAL_TIM_ConfigClockSource+0x9a>
 80027ac:	e06e      	b.n	800288c <HAL_TIM_ConfigClockSource+0x178>
 80027ae:	2b30      	cmp	r3, #48	; 0x30
 80027b0:	d063      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x166>
 80027b2:	d86b      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x178>
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	d060      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x166>
 80027b8:	d868      	bhi.n	800288c <HAL_TIM_ConfigClockSource+0x178>
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d05d      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x166>
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d05b      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x166>
 80027c2:	e063      	b.n	800288c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6818      	ldr	r0, [r3, #0]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	6899      	ldr	r1, [r3, #8]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f000 fc9e 	bl	8003114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2277      	movs	r2, #119	; 0x77
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	609a      	str	r2, [r3, #8]
      break;
 80027f0:	e052      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6818      	ldr	r0, [r3, #0]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	6899      	ldr	r1, [r3, #8]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685a      	ldr	r2, [r3, #4]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f000 fc87 	bl	8003114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689a      	ldr	r2, [r3, #8]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2180      	movs	r1, #128	; 0x80
 8002812:	01c9      	lsls	r1, r1, #7
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
      break;
 8002818:	e03e      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	6859      	ldr	r1, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	001a      	movs	r2, r3
 8002828:	f000 fb32 	bl	8002e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2150      	movs	r1, #80	; 0x50
 8002832:	0018      	movs	r0, r3
 8002834:	f000 fc54 	bl	80030e0 <TIM_ITRx_SetConfig>
      break;
 8002838:	e02e      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	6859      	ldr	r1, [r3, #4]
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	001a      	movs	r2, r3
 8002848:	f000 fb92 	bl	8002f70 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2160      	movs	r1, #96	; 0x60
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fc44 	bl	80030e0 <TIM_ITRx_SetConfig>
      break;
 8002858:	e01e      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	001a      	movs	r2, r3
 8002868:	f000 fb12 	bl	8002e90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2140      	movs	r1, #64	; 0x40
 8002872:	0018      	movs	r0, r3
 8002874:	f000 fc34 	bl	80030e0 <TIM_ITRx_SetConfig>
      break;
 8002878:	e00e      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0019      	movs	r1, r3
 8002884:	0010      	movs	r0, r2
 8002886:	f000 fc2b 	bl	80030e0 <TIM_ITRx_SetConfig>
      break;
 800288a:	e005      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800288c:	230f      	movs	r3, #15
 800288e:	18fb      	adds	r3, r7, r3
 8002890:	2201      	movs	r2, #1
 8002892:	701a      	strb	r2, [r3, #0]
      break;
 8002894:	e000      	b.n	8002898 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002896:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	223d      	movs	r2, #61	; 0x3d
 800289c:	2101      	movs	r1, #1
 800289e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	223c      	movs	r2, #60	; 0x3c
 80028a4:	2100      	movs	r1, #0
 80028a6:	5499      	strb	r1, [r3, r2]

  return status;
 80028a8:	230f      	movs	r3, #15
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	781b      	ldrb	r3, [r3, #0]
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b004      	add	sp, #16
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	ffff00ff 	.word	0xffff00ff

080028bc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b0c      	cmp	r3, #12
 80028ce:	d01e      	beq.n	800290e <HAL_TIM_ReadCapturedValue+0x52>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d820      	bhi.n	8002918 <HAL_TIM_ReadCapturedValue+0x5c>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b08      	cmp	r3, #8
 80028da:	d013      	beq.n	8002904 <HAL_TIM_ReadCapturedValue+0x48>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b08      	cmp	r3, #8
 80028e0:	d81a      	bhi.n	8002918 <HAL_TIM_ReadCapturedValue+0x5c>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_TIM_ReadCapturedValue+0x34>
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b04      	cmp	r3, #4
 80028ec:	d005      	beq.n	80028fa <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80028ee:	e013      	b.n	8002918 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028f6:	60fb      	str	r3, [r7, #12]
      break;
 80028f8:	e00f      	b.n	800291a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002900:	60fb      	str	r3, [r7, #12]
      break;
 8002902:	e00a      	b.n	800291a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800290a:	60fb      	str	r3, [r7, #12]
      break;
 800290c:	e005      	b.n	800291a <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	60fb      	str	r3, [r7, #12]
      break;
 8002916:	e000      	b.n	800291a <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002918:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 800291a:	68fb      	ldr	r3, [r7, #12]
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}

08002924 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b002      	add	sp, #8
 8002952:	bd80      	pop	{r7, pc}

08002954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <TIM_Base_SetConfig+0xc0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0x20>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <TIM_Base_SetConfig+0xc4>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d108      	bne.n	8002986 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2270      	movs	r2, #112	; 0x70
 8002978:	4393      	bics	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <TIM_Base_SetConfig+0xc0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00f      	beq.n	80029ae <TIM_Base_SetConfig+0x5a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <TIM_Base_SetConfig+0xc4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00b      	beq.n	80029ae <TIM_Base_SetConfig+0x5a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <TIM_Base_SetConfig+0xc8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <TIM_Base_SetConfig+0x5a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <TIM_Base_SetConfig+0xcc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <TIM_Base_SetConfig+0x5a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <TIM_Base_SetConfig+0xd0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d108      	bne.n	80029c0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <TIM_Base_SetConfig+0xd4>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	4393      	bics	r3, r2
 80029c6:	001a      	movs	r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689a      	ldr	r2, [r3, #8]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <TIM_Base_SetConfig+0xc0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <TIM_Base_SetConfig+0xaa>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a0b      	ldr	r2, [pc, #44]	; (8002a20 <TIM_Base_SetConfig+0xcc>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <TIM_Base_SetConfig+0xaa>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a0a      	ldr	r2, [pc, #40]	; (8002a24 <TIM_Base_SetConfig+0xd0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d103      	bne.n	8002a06 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	615a      	str	r2, [r3, #20]
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40002000 	.word	0x40002000
 8002a20:	40014400 	.word	0x40014400
 8002a24:	40014800 	.word	0x40014800
 8002a28:	fffffcff 	.word	0xfffffcff

08002a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4393      	bics	r3, r2
 8002a3e:	001a      	movs	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2270      	movs	r2, #112	; 0x70
 8002a5a:	4393      	bics	r3, r2
 8002a5c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2203      	movs	r2, #3
 8002a62:	4393      	bics	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2202      	movs	r2, #2
 8002a74:	4393      	bics	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a23      	ldr	r2, [pc, #140]	; (8002b14 <TIM_OC1_SetConfig+0xe8>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d007      	beq.n	8002a9a <TIM_OC1_SetConfig+0x6e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <TIM_OC1_SetConfig+0xec>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d003      	beq.n	8002a9a <TIM_OC1_SetConfig+0x6e>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a21      	ldr	r2, [pc, #132]	; (8002b1c <TIM_OC1_SetConfig+0xf0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10c      	bne.n	8002ab4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	4393      	bics	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2204      	movs	r2, #4
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <TIM_OC1_SetConfig+0xe8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <TIM_OC1_SetConfig+0xa0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <TIM_OC1_SetConfig+0xec>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d003      	beq.n	8002acc <TIM_OC1_SetConfig+0xa0>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <TIM_OC1_SetConfig+0xf0>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d111      	bne.n	8002af0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <TIM_OC1_SetConfig+0xf4>)
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4a13      	ldr	r2, [pc, #76]	; (8002b24 <TIM_OC1_SetConfig+0xf8>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	46c0      	nop			; (mov r8, r8)
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	b006      	add	sp, #24
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	40012c00 	.word	0x40012c00
 8002b18:	40014400 	.word	0x40014400
 8002b1c:	40014800 	.word	0x40014800
 8002b20:	fffffeff 	.word	0xfffffeff
 8002b24:	fffffdff 	.word	0xfffffdff

08002b28 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	2210      	movs	r2, #16
 8002b38:	4393      	bics	r3, r2
 8002b3a:	001a      	movs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4a2c      	ldr	r2, [pc, #176]	; (8002c08 <TIM_OC2_SetConfig+0xe0>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4a2b      	ldr	r2, [pc, #172]	; (8002c0c <TIM_OC2_SetConfig+0xe4>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	2220      	movs	r2, #32
 8002b72:	4393      	bics	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a22      	ldr	r2, [pc, #136]	; (8002c10 <TIM_OC2_SetConfig+0xe8>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d10d      	bne.n	8002ba6 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2280      	movs	r2, #128	; 0x80
 8002b8e:	4393      	bics	r3, r2
 8002b90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2240      	movs	r2, #64	; 0x40
 8002ba2:	4393      	bics	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <TIM_OC2_SetConfig+0xe8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <TIM_OC2_SetConfig+0x96>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a18      	ldr	r2, [pc, #96]	; (8002c14 <TIM_OC2_SetConfig+0xec>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <TIM_OC2_SetConfig+0x96>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <TIM_OC2_SetConfig+0xf0>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d113      	bne.n	8002be6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	4a16      	ldr	r2, [pc, #88]	; (8002c1c <TIM_OC2_SetConfig+0xf4>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4a15      	ldr	r2, [pc, #84]	; (8002c20 <TIM_OC2_SetConfig+0xf8>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	621a      	str	r2, [r3, #32]
}
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	46bd      	mov	sp, r7
 8002c04:	b006      	add	sp, #24
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	ffff8fff 	.word	0xffff8fff
 8002c0c:	fffffcff 	.word	0xfffffcff
 8002c10:	40012c00 	.word	0x40012c00
 8002c14:	40014400 	.word	0x40014400
 8002c18:	40014800 	.word	0x40014800
 8002c1c:	fffffbff 	.word	0xfffffbff
 8002c20:	fffff7ff 	.word	0xfffff7ff

08002c24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b086      	sub	sp, #24
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	4a33      	ldr	r2, [pc, #204]	; (8002d00 <TIM_OC3_SetConfig+0xdc>)
 8002c34:	401a      	ands	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2270      	movs	r2, #112	; 0x70
 8002c50:	4393      	bics	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2203      	movs	r2, #3
 8002c58:	4393      	bics	r3, r2
 8002c5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	4a26      	ldr	r2, [pc, #152]	; (8002d04 <TIM_OC3_SetConfig+0xe0>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a22      	ldr	r2, [pc, #136]	; (8002d08 <TIM_OC3_SetConfig+0xe4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10d      	bne.n	8002c9e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <TIM_OC3_SetConfig+0xe8>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <TIM_OC3_SetConfig+0xec>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a19      	ldr	r2, [pc, #100]	; (8002d08 <TIM_OC3_SetConfig+0xe4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d007      	beq.n	8002cb6 <TIM_OC3_SetConfig+0x92>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <TIM_OC3_SetConfig+0xf0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_OC3_SetConfig+0x92>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a19      	ldr	r2, [pc, #100]	; (8002d18 <TIM_OC3_SetConfig+0xf4>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d113      	bne.n	8002cde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <TIM_OC3_SetConfig+0xf8>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4a17      	ldr	r2, [pc, #92]	; (8002d20 <TIM_OC3_SetConfig+0xfc>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	621a      	str	r2, [r3, #32]
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	b006      	add	sp, #24
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	fffffeff 	.word	0xfffffeff
 8002d04:	fffffdff 	.word	0xfffffdff
 8002d08:	40012c00 	.word	0x40012c00
 8002d0c:	fffff7ff 	.word	0xfffff7ff
 8002d10:	fffffbff 	.word	0xfffffbff
 8002d14:	40014400 	.word	0x40014400
 8002d18:	40014800 	.word	0x40014800
 8002d1c:	ffffefff 	.word	0xffffefff
 8002d20:	ffffdfff 	.word	0xffffdfff

08002d24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a26      	ldr	r2, [pc, #152]	; (8002dcc <TIM_OC4_SetConfig+0xa8>)
 8002d34:	401a      	ands	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <TIM_OC4_SetConfig+0xac>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	4a1f      	ldr	r2, [pc, #124]	; (8002dd4 <TIM_OC4_SetConfig+0xb0>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	4a1b      	ldr	r2, [pc, #108]	; (8002dd8 <TIM_OC4_SetConfig+0xb4>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	031b      	lsls	r3, r3, #12
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a17      	ldr	r2, [pc, #92]	; (8002ddc <TIM_OC4_SetConfig+0xb8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d007      	beq.n	8002d94 <TIM_OC4_SetConfig+0x70>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4a16      	ldr	r2, [pc, #88]	; (8002de0 <TIM_OC4_SetConfig+0xbc>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d003      	beq.n	8002d94 <TIM_OC4_SetConfig+0x70>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a15      	ldr	r2, [pc, #84]	; (8002de4 <TIM_OC4_SetConfig+0xc0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d109      	bne.n	8002da8 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <TIM_OC4_SetConfig+0xc4>)
 8002d98:	4013      	ands	r3, r2
 8002d9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	019b      	lsls	r3, r3, #6
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	621a      	str	r2, [r3, #32]
}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	b006      	add	sp, #24
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	ffffefff 	.word	0xffffefff
 8002dd0:	ffff8fff 	.word	0xffff8fff
 8002dd4:	fffffcff 	.word	0xfffffcff
 8002dd8:	ffffdfff 	.word	0xffffdfff
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40014400 	.word	0x40014400
 8002de4:	40014800 	.word	0x40014800
 8002de8:	ffffbfff 	.word	0xffffbfff

08002dec <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
 8002df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	4393      	bics	r3, r2
 8002e02:	001a      	movs	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6a1b      	ldr	r3, [r3, #32]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <TIM_TI1_SetConfig+0x9c>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d003      	beq.n	8002e24 <TIM_TI1_SetConfig+0x38>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a1b      	ldr	r2, [pc, #108]	; (8002e8c <TIM_TI1_SetConfig+0xa0>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d101      	bne.n	8002e28 <TIM_TI1_SetConfig+0x3c>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <TIM_TI1_SetConfig+0x3e>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d008      	beq.n	8002e40 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	2203      	movs	r2, #3
 8002e32:	4393      	bics	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
 8002e3e:	e003      	b.n	8002e48 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	2201      	movs	r2, #1
 8002e44:	4313      	orrs	r3, r2
 8002e46:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	22f0      	movs	r2, #240	; 0xf0
 8002e4c:	4393      	bics	r3, r2
 8002e4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	22ff      	movs	r2, #255	; 0xff
 8002e56:	4013      	ands	r3, r2
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	220a      	movs	r2, #10
 8002e62:	4393      	bics	r3, r2
 8002e64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	220a      	movs	r2, #10
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	621a      	str	r2, [r3, #32]
}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	46bd      	mov	sp, r7
 8002e82:	b006      	add	sp, #24
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	40000400 	.word	0x40000400

08002e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a1b      	ldr	r3, [r3, #32]
 8002ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4393      	bics	r3, r2
 8002eaa:	001a      	movs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	22f0      	movs	r2, #240	; 0xf0
 8002eba:	4393      	bics	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	220a      	movs	r2, #10
 8002ecc:	4393      	bics	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	621a      	str	r2, [r3, #32]
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b006      	add	sp, #24
 8002eea:	bd80      	pop	{r7, pc}

08002eec <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
 8002ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	2210      	movs	r2, #16
 8002f00:	4393      	bics	r3, r2
 8002f02:	001a      	movs	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	4a14      	ldr	r2, [pc, #80]	; (8002f68 <TIM_TI2_SetConfig+0x7c>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	021b      	lsls	r3, r3, #8
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4a10      	ldr	r2, [pc, #64]	; (8002f6c <TIM_TI2_SetConfig+0x80>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	031b      	lsls	r3, r3, #12
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	22a0      	movs	r2, #160	; 0xa0
 8002f40:	4393      	bics	r3, r2
 8002f42:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	011b      	lsls	r3, r3, #4
 8002f48:	22a0      	movs	r2, #160	; 0xa0
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b006      	add	sp, #24
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	fffffcff 	.word	0xfffffcff
 8002f6c:	ffff0fff 	.word	0xffff0fff

08002f70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	2210      	movs	r2, #16
 8002f82:	4393      	bics	r3, r2
 8002f84:	001a      	movs	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	4a0d      	ldr	r2, [pc, #52]	; (8002fd0 <TIM_TI2_ConfigInputStage+0x60>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	031b      	lsls	r3, r3, #12
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	22a0      	movs	r2, #160	; 0xa0
 8002fac:	4393      	bics	r3, r2
 8002fae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	621a      	str	r2, [r3, #32]
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b006      	add	sp, #24
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	ffff0fff 	.word	0xffff0fff

08002fd4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	4a19      	ldr	r2, [pc, #100]	; (800304c <TIM_TI3_SetConfig+0x78>)
 8002fe8:	401a      	ands	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2203      	movs	r2, #3
 8002ffe:	4393      	bics	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	22f0      	movs	r2, #240	; 0xf0
 800300e:	4393      	bics	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	22ff      	movs	r2, #255	; 0xff
 8003018:	4013      	ands	r3, r2
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	4313      	orrs	r3, r2
 800301e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <TIM_TI3_SetConfig+0x7c>)
 8003024:	4013      	ands	r3, r2
 8003026:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	021a      	lsls	r2, r3, #8
 800302c:	23a0      	movs	r3, #160	; 0xa0
 800302e:	011b      	lsls	r3, r3, #4
 8003030:	4013      	ands	r3, r2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	621a      	str	r2, [r3, #32]
}
 8003044:	46c0      	nop			; (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b006      	add	sp, #24
 800304a:	bd80      	pop	{r7, pc}
 800304c:	fffffeff 	.word	0xfffffeff
 8003050:	fffff5ff 	.word	0xfffff5ff

08003054 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	4a1a      	ldr	r2, [pc, #104]	; (80030d0 <TIM_TI4_SetConfig+0x7c>)
 8003068:	401a      	ands	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <TIM_TI4_SetConfig+0x80>)
 800307e:	4013      	ands	r3, r2
 8003080:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	021b      	lsls	r3, r3, #8
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	4313      	orrs	r3, r2
 800308a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	4a12      	ldr	r2, [pc, #72]	; (80030d8 <TIM_TI4_SetConfig+0x84>)
 8003090:	4013      	ands	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	031b      	lsls	r3, r3, #12
 8003098:	041b      	lsls	r3, r3, #16
 800309a:	0c1b      	lsrs	r3, r3, #16
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	4313      	orrs	r3, r2
 80030a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4a0d      	ldr	r2, [pc, #52]	; (80030dc <TIM_TI4_SetConfig+0x88>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	031a      	lsls	r2, r3, #12
 80030ae:	23a0      	movs	r3, #160	; 0xa0
 80030b0:	021b      	lsls	r3, r3, #8
 80030b2:	4013      	ands	r3, r2
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	621a      	str	r2, [r3, #32]
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b006      	add	sp, #24
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	46c0      	nop			; (mov r8, r8)
 80030d0:	ffffefff 	.word	0xffffefff
 80030d4:	fffffcff 	.word	0xfffffcff
 80030d8:	ffff0fff 	.word	0xffff0fff
 80030dc:	ffff5fff 	.word	0xffff5fff

080030e0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2270      	movs	r2, #112	; 0x70
 80030f4:	4393      	bics	r3, r2
 80030f6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	2207      	movs	r2, #7
 8003100:	4313      	orrs	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	609a      	str	r2, [r3, #8]
}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	46bd      	mov	sp, r7
 800310e:	b004      	add	sp, #16
 8003110:	bd80      	pop	{r7, pc}
	...

08003114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
 8003120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	4a09      	ldr	r2, [pc, #36]	; (8003150 <TIM_ETR_SetConfig+0x3c>)
 800312c:	4013      	ands	r3, r2
 800312e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	021a      	lsls	r2, r3, #8
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	431a      	orrs	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	609a      	str	r2, [r3, #8]
}
 8003148:	46c0      	nop			; (mov r8, r8)
 800314a:	46bd      	mov	sp, r7
 800314c:	b006      	add	sp, #24
 800314e:	bd80      	pop	{r7, pc}
 8003150:	ffff00ff 	.word	0xffff00ff

08003154 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	221f      	movs	r2, #31
 8003164:	4013      	ands	r3, r2
 8003166:	2201      	movs	r2, #1
 8003168:	409a      	lsls	r2, r3
 800316a:	0013      	movs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6a1b      	ldr	r3, [r3, #32]
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	43d2      	mvns	r2, r2
 8003176:	401a      	ands	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	211f      	movs	r1, #31
 8003184:	400b      	ands	r3, r1
 8003186:	6879      	ldr	r1, [r7, #4]
 8003188:	4099      	lsls	r1, r3
 800318a:	000b      	movs	r3, r1
 800318c:	431a      	orrs	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	621a      	str	r2, [r3, #32]
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b006      	add	sp, #24
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	223c      	movs	r2, #60	; 0x3c
 80031aa:	5c9b      	ldrb	r3, [r3, r2]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e03c      	b.n	800322e <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	223c      	movs	r2, #60	; 0x3c
 80031b8:	2101      	movs	r1, #1
 80031ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	223d      	movs	r2, #61	; 0x3d
 80031c0:	2102      	movs	r1, #2
 80031c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2270      	movs	r2, #112	; 0x70
 80031d8:	4393      	bics	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a11      	ldr	r2, [pc, #68]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a0f      	ldr	r2, [pc, #60]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d10c      	bne.n	800321c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	2280      	movs	r2, #128	; 0x80
 8003206:	4393      	bics	r3, r2
 8003208:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	4313      	orrs	r3, r2
 8003212:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	223d      	movs	r2, #61	; 0x3d
 8003220:	2101      	movs	r1, #1
 8003222:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	223c      	movs	r2, #60	; 0x3c
 8003228:	2100      	movs	r1, #0
 800322a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b004      	add	sp, #16
 8003234:	bd80      	pop	{r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40000400 	.word	0x40000400

08003240 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800324a:	2300      	movs	r3, #0
 800324c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	223c      	movs	r2, #60	; 0x3c
 8003252:	5c9b      	ldrb	r3, [r3, r2]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003258:	2302      	movs	r3, #2
 800325a:	e03e      	b.n	80032da <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	223c      	movs	r2, #60	; 0x3c
 8003260:	2101      	movs	r1, #1
 8003262:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	22ff      	movs	r2, #255	; 0xff
 8003268:	4393      	bics	r3, r2
 800326a:	001a      	movs	r2, r3
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4313      	orrs	r3, r2
 8003272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a1b      	ldr	r2, [pc, #108]	; (80032e4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8003278:	401a      	ands	r2, r3
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	4313      	orrs	r3, r2
 8003280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8003286:	401a      	ands	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a16      	ldr	r2, [pc, #88]	; (80032ec <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8003294:	401a      	ands	r2, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4a13      	ldr	r2, [pc, #76]	; (80032f0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80032a2:	401a      	ands	r2, r3
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a11      	ldr	r2, [pc, #68]	; (80032f4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80032b0:	401a      	ands	r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a0e      	ldr	r2, [pc, #56]	; (80032f8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 80032be:	401a      	ands	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	223c      	movs	r2, #60	; 0x3c
 80032d4:	2100      	movs	r1, #0
 80032d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b004      	add	sp, #16
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	fffffcff 	.word	0xfffffcff
 80032e8:	fffffbff 	.word	0xfffffbff
 80032ec:	fffff7ff 	.word	0xfffff7ff
 80032f0:	ffffefff 	.word	0xffffefff
 80032f4:	ffffdfff 	.word	0xffffdfff
 80032f8:	ffffbfff 	.word	0xffffbfff

080032fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	b002      	add	sp, #8
 800330a:	bd80      	pop	{r7, pc}

0800330c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	b002      	add	sp, #8
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e044      	b.n	80033b8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2274      	movs	r2, #116	; 0x74
 800333a:	2100      	movs	r1, #0
 800333c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0018      	movs	r0, r3
 8003342:	f7fd fc69 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2224      	movs	r2, #36	; 0x24
 800334a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2101      	movs	r1, #1
 8003358:	438a      	bics	r2, r1
 800335a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	0018      	movs	r0, r3
 8003360:	f000 f8da 	bl	8003518 <UART_SetConfig>
 8003364:	0003      	movs	r3, r0
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e024      	b.n	80033b8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0018      	movs	r0, r3
 800337a:	f000 f9f7 	bl	800376c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	490d      	ldr	r1, [pc, #52]	; (80033c0 <HAL_UART_Init+0xa4>)
 800338a:	400a      	ands	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2108      	movs	r1, #8
 800339a:	438a      	bics	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	430a      	orrs	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 fa8f 	bl	80038d4 <UART_CheckIdleState>
 80033b6:	0003      	movs	r3, r0
}
 80033b8:	0018      	movs	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	b002      	add	sp, #8
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	fffff7ff 	.word	0xfffff7ff

080033c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	; 0x28
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	603b      	str	r3, [r7, #0]
 80033d0:	1dbb      	adds	r3, r7, #6
 80033d2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d000      	beq.n	80033de <HAL_UART_Transmit+0x1a>
 80033dc:	e096      	b.n	800350c <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_UART_Transmit+0x28>
 80033e4:	1dbb      	adds	r3, r7, #6
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e08e      	b.n	800350e <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	015b      	lsls	r3, r3, #5
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d109      	bne.n	8003410 <HAL_UART_Transmit+0x4c>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d105      	bne.n	8003410 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2201      	movs	r2, #1
 8003408:	4013      	ands	r3, r2
 800340a:	d001      	beq.n	8003410 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e07e      	b.n	800350e <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2274      	movs	r2, #116	; 0x74
 8003414:	5c9b      	ldrb	r3, [r3, r2]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_UART_Transmit+0x5a>
 800341a:	2302      	movs	r3, #2
 800341c:	e077      	b.n	800350e <HAL_UART_Transmit+0x14a>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2274      	movs	r2, #116	; 0x74
 8003422:	2101      	movs	r1, #1
 8003424:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2280      	movs	r2, #128	; 0x80
 800342a:	2100      	movs	r1, #0
 800342c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2221      	movs	r2, #33	; 0x21
 8003432:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003434:	f7fd fcf6 	bl	8000e24 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	1dba      	adds	r2, r7, #6
 8003440:	2150      	movs	r1, #80	; 0x50
 8003442:	8812      	ldrh	r2, [r2, #0]
 8003444:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1dba      	adds	r2, r7, #6
 800344a:	2152      	movs	r1, #82	; 0x52
 800344c:	8812      	ldrh	r2, [r2, #0]
 800344e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	015b      	lsls	r3, r3, #5
 8003458:	429a      	cmp	r2, r3
 800345a:	d108      	bne.n	800346e <HAL_UART_Transmit+0xaa>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e003      	b.n	8003476 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2274      	movs	r2, #116	; 0x74
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800347e:	e02d      	b.n	80034dc <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	0013      	movs	r3, r2
 800348a:	2200      	movs	r2, #0
 800348c:	2180      	movs	r1, #128	; 0x80
 800348e:	f000 fa69 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 8003492:	1e03      	subs	r3, r0, #0
 8003494:	d001      	beq.n	800349a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e039      	b.n	800350e <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10b      	bne.n	80034b8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	881a      	ldrh	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	05d2      	lsls	r2, r2, #23
 80034aa:	0dd2      	lsrs	r2, r2, #23
 80034ac:	b292      	uxth	r2, r2
 80034ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	3302      	adds	r3, #2
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	e008      	b.n	80034ca <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	781a      	ldrb	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	b292      	uxth	r2, r2
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3301      	adds	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2252      	movs	r2, #82	; 0x52
 80034ce:	5a9b      	ldrh	r3, [r3, r2]
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b299      	uxth	r1, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2252      	movs	r2, #82	; 0x52
 80034da:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2252      	movs	r2, #82	; 0x52
 80034e0:	5a9b      	ldrh	r3, [r3, r2]
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1cb      	bne.n	8003480 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	0013      	movs	r3, r2
 80034f2:	2200      	movs	r2, #0
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	f000 fa35 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e005      	b.n	800350e <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003508:	2300      	movs	r3, #0
 800350a:	e000      	b.n	800350e <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 800350c:	2302      	movs	r3, #2
  }
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b008      	add	sp, #32
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b088      	sub	sp, #32
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003520:	231e      	movs	r3, #30
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	431a      	orrs	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a84      	ldr	r2, [pc, #528]	; (8003758 <UART_SetConfig+0x240>)
 8003548:	4013      	ands	r3, r2
 800354a:	0019      	movs	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	430a      	orrs	r2, r1
 8003554:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	4a7f      	ldr	r2, [pc, #508]	; (800375c <UART_SetConfig+0x244>)
 800355e:	4013      	ands	r3, r2
 8003560:	0019      	movs	r1, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	4a76      	ldr	r2, [pc, #472]	; (8003760 <UART_SetConfig+0x248>)
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	430a      	orrs	r2, r1
 8003592:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003594:	4b73      	ldr	r3, [pc, #460]	; (8003764 <UART_SetConfig+0x24c>)
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	2203      	movs	r2, #3
 800359a:	4013      	ands	r3, r2
 800359c:	2b03      	cmp	r3, #3
 800359e:	d00d      	beq.n	80035bc <UART_SetConfig+0xa4>
 80035a0:	d81b      	bhi.n	80035da <UART_SetConfig+0xc2>
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d014      	beq.n	80035d0 <UART_SetConfig+0xb8>
 80035a6:	d818      	bhi.n	80035da <UART_SetConfig+0xc2>
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <UART_SetConfig+0x9a>
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d00a      	beq.n	80035c6 <UART_SetConfig+0xae>
 80035b0:	e013      	b.n	80035da <UART_SetConfig+0xc2>
 80035b2:	231f      	movs	r3, #31
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
 80035ba:	e012      	b.n	80035e2 <UART_SetConfig+0xca>
 80035bc:	231f      	movs	r3, #31
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	2202      	movs	r2, #2
 80035c2:	701a      	strb	r2, [r3, #0]
 80035c4:	e00d      	b.n	80035e2 <UART_SetConfig+0xca>
 80035c6:	231f      	movs	r3, #31
 80035c8:	18fb      	adds	r3, r7, r3
 80035ca:	2204      	movs	r2, #4
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e008      	b.n	80035e2 <UART_SetConfig+0xca>
 80035d0:	231f      	movs	r3, #31
 80035d2:	18fb      	adds	r3, r7, r3
 80035d4:	2208      	movs	r2, #8
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e003      	b.n	80035e2 <UART_SetConfig+0xca>
 80035da:	231f      	movs	r3, #31
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	2210      	movs	r2, #16
 80035e0:	701a      	strb	r2, [r3, #0]
 80035e2:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	2380      	movs	r3, #128	; 0x80
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d15d      	bne.n	80036ac <UART_SetConfig+0x194>
  {
    switch (clocksource)
 80035f0:	231f      	movs	r3, #31
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d015      	beq.n	8003626 <UART_SetConfig+0x10e>
 80035fa:	dc18      	bgt.n	800362e <UART_SetConfig+0x116>
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d00d      	beq.n	800361c <UART_SetConfig+0x104>
 8003600:	dc15      	bgt.n	800362e <UART_SetConfig+0x116>
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <UART_SetConfig+0xf4>
 8003606:	2b02      	cmp	r3, #2
 8003608:	d005      	beq.n	8003616 <UART_SetConfig+0xfe>
 800360a:	e010      	b.n	800362e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360c:	f7fe fad6 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 8003610:	0003      	movs	r3, r0
 8003612:	61bb      	str	r3, [r7, #24]
        break;
 8003614:	e012      	b.n	800363c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003616:	4b54      	ldr	r3, [pc, #336]	; (8003768 <UART_SetConfig+0x250>)
 8003618:	61bb      	str	r3, [r7, #24]
        break;
 800361a:	e00f      	b.n	800363c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361c:	f7fe fa60 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 8003620:	0003      	movs	r3, r0
 8003622:	61bb      	str	r3, [r7, #24]
        break;
 8003624:	e00a      	b.n	800363c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	021b      	lsls	r3, r3, #8
 800362a:	61bb      	str	r3, [r7, #24]
        break;
 800362c:	e006      	b.n	800363c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003632:	231e      	movs	r3, #30
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
        break;
 800363a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d100      	bne.n	8003644 <UART_SetConfig+0x12c>
 8003642:	e07b      	b.n	800373c <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003644:	69bb      	ldr	r3, [r7, #24]
 8003646:	005a      	lsls	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	18d2      	adds	r2, r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	0019      	movs	r1, r3
 8003656:	0010      	movs	r0, r2
 8003658:	f7fc fd5e 	bl	8000118 <__udivsi3>
 800365c:	0003      	movs	r3, r0
 800365e:	b29b      	uxth	r3, r3
 8003660:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b0f      	cmp	r3, #15
 8003666:	d91c      	bls.n	80036a2 <UART_SetConfig+0x18a>
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	2380      	movs	r3, #128	; 0x80
 800366c:	025b      	lsls	r3, r3, #9
 800366e:	429a      	cmp	r2, r3
 8003670:	d217      	bcs.n	80036a2 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	b29a      	uxth	r2, r3
 8003676:	200e      	movs	r0, #14
 8003678:	183b      	adds	r3, r7, r0
 800367a:	210f      	movs	r1, #15
 800367c:	438a      	bics	r2, r1
 800367e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	085b      	lsrs	r3, r3, #1
 8003684:	b29b      	uxth	r3, r3
 8003686:	2207      	movs	r2, #7
 8003688:	4013      	ands	r3, r2
 800368a:	b299      	uxth	r1, r3
 800368c:	183b      	adds	r3, r7, r0
 800368e:	183a      	adds	r2, r7, r0
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	183a      	adds	r2, r7, r0
 800369c:	8812      	ldrh	r2, [r2, #0]
 800369e:	60da      	str	r2, [r3, #12]
 80036a0:	e04c      	b.n	800373c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 80036a2:	231e      	movs	r3, #30
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
 80036aa:	e047      	b.n	800373c <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ac:	231f      	movs	r3, #31
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b08      	cmp	r3, #8
 80036b4:	d015      	beq.n	80036e2 <UART_SetConfig+0x1ca>
 80036b6:	dc18      	bgt.n	80036ea <UART_SetConfig+0x1d2>
 80036b8:	2b04      	cmp	r3, #4
 80036ba:	d00d      	beq.n	80036d8 <UART_SetConfig+0x1c0>
 80036bc:	dc15      	bgt.n	80036ea <UART_SetConfig+0x1d2>
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d002      	beq.n	80036c8 <UART_SetConfig+0x1b0>
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d005      	beq.n	80036d2 <UART_SetConfig+0x1ba>
 80036c6:	e010      	b.n	80036ea <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c8:	f7fe fa78 	bl	8001bbc <HAL_RCC_GetPCLK1Freq>
 80036cc:	0003      	movs	r3, r0
 80036ce:	61bb      	str	r3, [r7, #24]
        break;
 80036d0:	e012      	b.n	80036f8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036d2:	4b25      	ldr	r3, [pc, #148]	; (8003768 <UART_SetConfig+0x250>)
 80036d4:	61bb      	str	r3, [r7, #24]
        break;
 80036d6:	e00f      	b.n	80036f8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036d8:	f7fe fa02 	bl	8001ae0 <HAL_RCC_GetSysClockFreq>
 80036dc:	0003      	movs	r3, r0
 80036de:	61bb      	str	r3, [r7, #24]
        break;
 80036e0:	e00a      	b.n	80036f8 <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e2:	2380      	movs	r3, #128	; 0x80
 80036e4:	021b      	lsls	r3, r3, #8
 80036e6:	61bb      	str	r3, [r7, #24]
        break;
 80036e8:	e006      	b.n	80036f8 <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036ee:	231e      	movs	r3, #30
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	2201      	movs	r2, #1
 80036f4:	701a      	strb	r2, [r3, #0]
        break;
 80036f6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01e      	beq.n	800373c <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	085a      	lsrs	r2, r3, #1
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	18d2      	adds	r2, r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	0019      	movs	r1, r3
 800370e:	0010      	movs	r0, r2
 8003710:	f7fc fd02 	bl	8000118 <__udivsi3>
 8003714:	0003      	movs	r3, r0
 8003716:	b29b      	uxth	r3, r3
 8003718:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b0f      	cmp	r3, #15
 800371e:	d909      	bls.n	8003734 <UART_SetConfig+0x21c>
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	025b      	lsls	r3, r3, #9
 8003726:	429a      	cmp	r2, r3
 8003728:	d204      	bcs.n	8003734 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	e003      	b.n	800373c <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003734:	231e      	movs	r3, #30
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2201      	movs	r2, #1
 800373a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003748:	231e      	movs	r3, #30
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	781b      	ldrb	r3, [r3, #0]
}
 800374e:	0018      	movs	r0, r3
 8003750:	46bd      	mov	sp, r7
 8003752:	b008      	add	sp, #32
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	ffff69f3 	.word	0xffff69f3
 800375c:	ffffcfff 	.word	0xffffcfff
 8003760:	fffff4ff 	.word	0xfffff4ff
 8003764:	40021000 	.word	0x40021000
 8003768:	007a1200 	.word	0x007a1200

0800376c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	2201      	movs	r2, #1
 800377a:	4013      	ands	r3, r2
 800377c:	d00b      	beq.n	8003796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	4a4a      	ldr	r2, [pc, #296]	; (80038b0 <UART_AdvFeatureConfig+0x144>)
 8003786:	4013      	ands	r3, r2
 8003788:	0019      	movs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2202      	movs	r2, #2
 800379c:	4013      	ands	r3, r2
 800379e:	d00b      	beq.n	80037b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a43      	ldr	r2, [pc, #268]	; (80038b4 <UART_AdvFeatureConfig+0x148>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	0019      	movs	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	2204      	movs	r2, #4
 80037be:	4013      	ands	r3, r2
 80037c0:	d00b      	beq.n	80037da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	4a3b      	ldr	r2, [pc, #236]	; (80038b8 <UART_AdvFeatureConfig+0x14c>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037de:	2208      	movs	r2, #8
 80037e0:	4013      	ands	r3, r2
 80037e2:	d00b      	beq.n	80037fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4a34      	ldr	r2, [pc, #208]	; (80038bc <UART_AdvFeatureConfig+0x150>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003800:	2210      	movs	r2, #16
 8003802:	4013      	ands	r3, r2
 8003804:	d00b      	beq.n	800381e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	4a2c      	ldr	r2, [pc, #176]	; (80038c0 <UART_AdvFeatureConfig+0x154>)
 800380e:	4013      	ands	r3, r2
 8003810:	0019      	movs	r1, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2220      	movs	r2, #32
 8003824:	4013      	ands	r3, r2
 8003826:	d00b      	beq.n	8003840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4a25      	ldr	r2, [pc, #148]	; (80038c4 <UART_AdvFeatureConfig+0x158>)
 8003830:	4013      	ands	r3, r2
 8003832:	0019      	movs	r1, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	2240      	movs	r2, #64	; 0x40
 8003846:	4013      	ands	r3, r2
 8003848:	d01d      	beq.n	8003886 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	4a1d      	ldr	r2, [pc, #116]	; (80038c8 <UART_AdvFeatureConfig+0x15c>)
 8003852:	4013      	ands	r3, r2
 8003854:	0019      	movs	r1, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003866:	2380      	movs	r3, #128	; 0x80
 8003868:	035b      	lsls	r3, r3, #13
 800386a:	429a      	cmp	r2, r3
 800386c:	d10b      	bne.n	8003886 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <UART_AdvFeatureConfig+0x160>)
 8003876:	4013      	ands	r3, r2
 8003878:	0019      	movs	r1, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2280      	movs	r2, #128	; 0x80
 800388c:	4013      	ands	r3, r2
 800388e:	d00b      	beq.n	80038a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	4a0e      	ldr	r2, [pc, #56]	; (80038d0 <UART_AdvFeatureConfig+0x164>)
 8003898:	4013      	ands	r3, r2
 800389a:	0019      	movs	r1, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	605a      	str	r2, [r3, #4]
  }
}
 80038a8:	46c0      	nop			; (mov r8, r8)
 80038aa:	46bd      	mov	sp, r7
 80038ac:	b002      	add	sp, #8
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	fffdffff 	.word	0xfffdffff
 80038b4:	fffeffff 	.word	0xfffeffff
 80038b8:	fffbffff 	.word	0xfffbffff
 80038bc:	ffff7fff 	.word	0xffff7fff
 80038c0:	ffffefff 	.word	0xffffefff
 80038c4:	ffffdfff 	.word	0xffffdfff
 80038c8:	ffefffff 	.word	0xffefffff
 80038cc:	ff9fffff 	.word	0xff9fffff
 80038d0:	fff7ffff 	.word	0xfff7ffff

080038d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af02      	add	r7, sp, #8
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2280      	movs	r2, #128	; 0x80
 80038e0:	2100      	movs	r1, #0
 80038e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038e4:	f7fd fa9e 	bl	8000e24 <HAL_GetTick>
 80038e8:	0003      	movs	r3, r0
 80038ea:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2208      	movs	r2, #8
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d10c      	bne.n	8003914 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2280      	movs	r2, #128	; 0x80
 80038fe:	0391      	lsls	r1, r2, #14
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	4a17      	ldr	r2, [pc, #92]	; (8003960 <UART_CheckIdleState+0x8c>)
 8003904:	9200      	str	r2, [sp, #0]
 8003906:	2200      	movs	r2, #0
 8003908:	f000 f82c 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d001      	beq.n	8003914 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e021      	b.n	8003958 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2204      	movs	r2, #4
 800391c:	4013      	ands	r3, r2
 800391e:	2b04      	cmp	r3, #4
 8003920:	d10c      	bne.n	800393c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2280      	movs	r2, #128	; 0x80
 8003926:	03d1      	lsls	r1, r2, #15
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	4a0d      	ldr	r2, [pc, #52]	; (8003960 <UART_CheckIdleState+0x8c>)
 800392c:	9200      	str	r2, [sp, #0]
 800392e:	2200      	movs	r2, #0
 8003930:	f000 f818 	bl	8003964 <UART_WaitOnFlagUntilTimeout>
 8003934:	1e03      	subs	r3, r0, #0
 8003936:	d001      	beq.n	800393c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e00d      	b.n	8003958 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2220      	movs	r2, #32
 8003946:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2274      	movs	r2, #116	; 0x74
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003956:	2300      	movs	r3, #0
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	01ffffff 	.word	0x01ffffff

08003964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b094      	sub	sp, #80	; 0x50
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	603b      	str	r3, [r7, #0]
 8003970:	1dfb      	adds	r3, r7, #7
 8003972:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003974:	e0a3      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003978:	3301      	adds	r3, #1
 800397a:	d100      	bne.n	800397e <UART_WaitOnFlagUntilTimeout+0x1a>
 800397c:	e09f      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800397e:	f7fd fa51 	bl	8000e24 <HAL_GetTick>
 8003982:	0002      	movs	r2, r0
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800398a:	429a      	cmp	r2, r3
 800398c:	d302      	bcc.n	8003994 <UART_WaitOnFlagUntilTimeout+0x30>
 800398e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003990:	2b00      	cmp	r3, #0
 8003992:	d13d      	bne.n	8003a10 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003994:	f3ef 8310 	mrs	r3, PRIMASK
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800399a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800399c:	647b      	str	r3, [r7, #68]	; 0x44
 800399e:	2301      	movs	r3, #1
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			; (mov r8, r8)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	494c      	ldr	r1, [pc, #304]	; (8003ae8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80039b6:	400a      	ands	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c6:	f3ef 8310 	mrs	r3, PRIMASK
 80039ca:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ce:	643b      	str	r3, [r7, #64]	; 0x40
 80039d0:	2301      	movs	r3, #1
 80039d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			; (mov r8, r8)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2101      	movs	r1, #1
 80039e8:	438a      	bics	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f2:	f383 8810 	msr	PRIMASK, r3
}
 80039f6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2274      	movs	r2, #116	; 0x74
 8003a08:	2100      	movs	r1, #0
 8003a0a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e067      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2204      	movs	r2, #4
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d050      	beq.n	8003abe <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	401a      	ands	r2, r3
 8003a28:	2380      	movs	r3, #128	; 0x80
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d146      	bne.n	8003abe <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2280      	movs	r2, #128	; 0x80
 8003a36:	0112      	lsls	r2, r2, #4
 8003a38:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a3e:	613b      	str	r3, [r7, #16]
  return(result);
 8003a40:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a44:	2301      	movs	r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f383 8810 	msr	PRIMASK, r3
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4923      	ldr	r1, [pc, #140]	; (8003ae8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a5c:	400a      	ands	r2, r1
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	f383 8810 	msr	PRIMASK, r3
}
 8003a6a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a70:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a72:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a74:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a76:	2301      	movs	r3, #1
 8003a78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	f383 8810 	msr	PRIMASK, r3
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	438a      	bics	r2, r1
 8003a90:	609a      	str	r2, [r3, #8]
 8003a92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a94:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	f383 8810 	msr	PRIMASK, r3
}
 8003a9c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	2120      	movs	r1, #32
 8003ab0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	2274      	movs	r2, #116	; 0x74
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e010      	b.n	8003ae0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	69db      	ldr	r3, [r3, #28]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	425a      	negs	r2, r3
 8003ace:	4153      	adcs	r3, r2
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	1dfb      	adds	r3, r7, #7
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d100      	bne.n	8003ade <UART_WaitOnFlagUntilTimeout+0x17a>
 8003adc:	e74b      	b.n	8003976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b014      	add	sp, #80	; 0x50
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	fffffe5f 	.word	0xfffffe5f

08003aec <__libc_init_array>:
 8003aec:	b570      	push	{r4, r5, r6, lr}
 8003aee:	2600      	movs	r6, #0
 8003af0:	4d0c      	ldr	r5, [pc, #48]	; (8003b24 <__libc_init_array+0x38>)
 8003af2:	4c0d      	ldr	r4, [pc, #52]	; (8003b28 <__libc_init_array+0x3c>)
 8003af4:	1b64      	subs	r4, r4, r5
 8003af6:	10a4      	asrs	r4, r4, #2
 8003af8:	42a6      	cmp	r6, r4
 8003afa:	d109      	bne.n	8003b10 <__libc_init_array+0x24>
 8003afc:	2600      	movs	r6, #0
 8003afe:	f000 f821 	bl	8003b44 <_init>
 8003b02:	4d0a      	ldr	r5, [pc, #40]	; (8003b2c <__libc_init_array+0x40>)
 8003b04:	4c0a      	ldr	r4, [pc, #40]	; (8003b30 <__libc_init_array+0x44>)
 8003b06:	1b64      	subs	r4, r4, r5
 8003b08:	10a4      	asrs	r4, r4, #2
 8003b0a:	42a6      	cmp	r6, r4
 8003b0c:	d105      	bne.n	8003b1a <__libc_init_array+0x2e>
 8003b0e:	bd70      	pop	{r4, r5, r6, pc}
 8003b10:	00b3      	lsls	r3, r6, #2
 8003b12:	58eb      	ldr	r3, [r5, r3]
 8003b14:	4798      	blx	r3
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7ee      	b.n	8003af8 <__libc_init_array+0xc>
 8003b1a:	00b3      	lsls	r3, r6, #2
 8003b1c:	58eb      	ldr	r3, [r5, r3]
 8003b1e:	4798      	blx	r3
 8003b20:	3601      	adds	r6, #1
 8003b22:	e7f2      	b.n	8003b0a <__libc_init_array+0x1e>
 8003b24:	08003bf0 	.word	0x08003bf0
 8003b28:	08003bf0 	.word	0x08003bf0
 8003b2c:	08003bf0 	.word	0x08003bf0
 8003b30:	08003bf4 	.word	0x08003bf4

08003b34 <memset>:
 8003b34:	0003      	movs	r3, r0
 8003b36:	1882      	adds	r2, r0, r2
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d100      	bne.n	8003b3e <memset+0xa>
 8003b3c:	4770      	bx	lr
 8003b3e:	7019      	strb	r1, [r3, #0]
 8003b40:	3301      	adds	r3, #1
 8003b42:	e7f9      	b.n	8003b38 <memset+0x4>

08003b44 <_init>:
 8003b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4a:	bc08      	pop	{r3}
 8003b4c:	469e      	mov	lr, r3
 8003b4e:	4770      	bx	lr

08003b50 <_fini>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b56:	bc08      	pop	{r3}
 8003b58:	469e      	mov	lr, r3
 8003b5a:	4770      	bx	lr
