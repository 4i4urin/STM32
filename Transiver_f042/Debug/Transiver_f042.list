
Transiver_f042.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f8c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0800304c  0800304c  0001304c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a8c  08003a8c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a8c  08003a8c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a8c  08003a8c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a8c  08003a8c  00013a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08003aa0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08003aa0  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c6eb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001798  00000000  00000000  0002c71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0002deb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  0002e9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001853c  00000000  00000000  0002f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c971  00000000  00000000  0004798c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090511  00000000  00000000  000542fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e480e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002850  00000000  00000000  000e4864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003034 	.word	0x08003034

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003034 	.word	0x08003034

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <dec_to_bin>:
/* USER CODE BEGIN PFP */

void togglepin(uint8_t value);
void delay(int delay);

void dec_to_bin(char ch) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	701a      	strb	r2, [r3, #0]
	for (char div = 128; div > 0; div /= 2) {
 800023c:	230f      	movs	r3, #15
 800023e:	18fb      	adds	r3, r7, r3
 8000240:	2280      	movs	r2, #128	; 0x80
 8000242:	701a      	strb	r2, [r3, #0]
 8000244:	e01a      	b.n	800027c <dec_to_bin+0x4c>
		if (ch >= div) {    // 1
 8000246:	1dfa      	adds	r2, r7, #7
 8000248:	200f      	movs	r0, #15
 800024a:	183b      	adds	r3, r7, r0
 800024c:	7812      	ldrb	r2, [r2, #0]
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	429a      	cmp	r2, r3
 8000252:	d30a      	bcc.n	800026a <dec_to_bin+0x3a>
			ch -= div;
 8000254:	1dfb      	adds	r3, r7, #7
 8000256:	1df9      	adds	r1, r7, #7
 8000258:	183a      	adds	r2, r7, r0
 800025a:	7809      	ldrb	r1, [r1, #0]
 800025c:	7812      	ldrb	r2, [r2, #0]
 800025e:	1a8a      	subs	r2, r1, r2
 8000260:	701a      	strb	r2, [r3, #0]
			togglepin(1);
 8000262:	2001      	movs	r0, #1
 8000264:	f000 f83a 	bl	80002dc <togglepin>
 8000268:	e002      	b.n	8000270 <dec_to_bin+0x40>
		} else
			togglepin(0);
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f836 	bl	80002dc <togglepin>
	for (char div = 128; div > 0; div /= 2) {
 8000270:	220f      	movs	r2, #15
 8000272:	18bb      	adds	r3, r7, r2
 8000274:	18ba      	adds	r2, r7, r2
 8000276:	7812      	ldrb	r2, [r2, #0]
 8000278:	0852      	lsrs	r2, r2, #1
 800027a:	701a      	strb	r2, [r3, #0]
 800027c:	230f      	movs	r3, #15
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	2b00      	cmp	r3, #0
 8000284:	d1df      	bne.n	8000246 <dec_to_bin+0x16>
	}
	delay(T);
 8000286:	4b04      	ldr	r3, [pc, #16]	; (8000298 <dec_to_bin+0x68>)
 8000288:	0018      	movs	r0, r3
 800028a:	f000 f807 	bl	800029c <delay>
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	b004      	add	sp, #16
 8000294:	bd80      	pop	{r7, pc}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	0000ea60 	.word	0x0000ea60

0800029c <delay>:

// This function provides delay (in 20 nanoseconds)
void delay(int delay) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	if (delay > 0xFFFF)
 80002a4:	687a      	ldr	r2, [r7, #4]
 80002a6:	2380      	movs	r3, #128	; 0x80
 80002a8:	025b      	lsls	r3, r3, #9
 80002aa:	429a      	cmp	r2, r3
 80002ac:	db01      	blt.n	80002b2 <delay+0x16>
		delay = 0xFFFF;
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <delay+0x38>)
 80002b0:	607b      	str	r3, [r7, #4]
	(&htim2)->Instance->CNT = 0;
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <delay+0x3c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	2200      	movs	r2, #0
 80002b8:	625a      	str	r2, [r3, #36]	; 0x24
	while ((&htim2)->Instance->CNT < delay)
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <delay+0x3c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d3f9      	bcc.n	80002bc <delay+0x20>
		;
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b002      	add	sp, #8
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	0000ffff 	.word	0x0000ffff
 80002d8:	20000070 	.word	0x20000070

080002dc <togglepin>:

void togglepin(uint8_t value) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	0002      	movs	r2, r0
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	701a      	strb	r2, [r3, #0]
	//	turning off pin
	TIM1->CCR2 = 0;
 80002e8:	4b19      	ldr	r3, [pc, #100]	; (8000350 <togglepin+0x74>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CNT = COUNTER;
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <togglepin+0x74>)
 80002f0:	22fa      	movs	r2, #250	; 0xfa
 80002f2:	0092      	lsls	r2, r2, #2
 80002f4:	625a      	str	r2, [r3, #36]	; 0x24
	if (value == 1) {
 80002f6:	1dfb      	adds	r3, r7, #7
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2b01      	cmp	r3, #1
 80002fc:	d10f      	bne.n	800031e <togglepin+0x42>
		delay(T * 0.8);
 80002fe:	4b15      	ldr	r3, [pc, #84]	; (8000354 <togglepin+0x78>)
 8000300:	0018      	movs	r0, r3
 8000302:	f7ff ffcb 	bl	800029c <delay>
		//	turning on pin
		TIM1->CCR2 = COUNTER + 1;
 8000306:	4b12      	ldr	r3, [pc, #72]	; (8000350 <togglepin+0x74>)
 8000308:	4a13      	ldr	r2, [pc, #76]	; (8000358 <togglepin+0x7c>)
 800030a:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CNT = COUNTER;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <togglepin+0x74>)
 800030e:	22fa      	movs	r2, #250	; 0xfa
 8000310:	0092      	lsls	r2, r2, #2
 8000312:	625a      	str	r2, [r3, #36]	; 0x24
		delay(T * 0.2);
 8000314:	4b11      	ldr	r3, [pc, #68]	; (800035c <togglepin+0x80>)
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ffc0 	bl	800029c <delay>
 800031c:	e014      	b.n	8000348 <togglepin+0x6c>
//		char c = '1';
//		HAL_UART_Transmit(&huart2, &c, 1, -1);
	} else if (value == 0) {
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d10f      	bne.n	8000346 <togglepin+0x6a>
		delay(T * 0.2);
 8000326:	4b0d      	ldr	r3, [pc, #52]	; (800035c <togglepin+0x80>)
 8000328:	0018      	movs	r0, r3
 800032a:	f7ff ffb7 	bl	800029c <delay>
		//	turning on pin
		TIM1->CCR2 = COUNTER + 1;
 800032e:	4b08      	ldr	r3, [pc, #32]	; (8000350 <togglepin+0x74>)
 8000330:	4a09      	ldr	r2, [pc, #36]	; (8000358 <togglepin+0x7c>)
 8000332:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CNT = COUNTER;
 8000334:	4b06      	ldr	r3, [pc, #24]	; (8000350 <togglepin+0x74>)
 8000336:	22fa      	movs	r2, #250	; 0xfa
 8000338:	0092      	lsls	r2, r2, #2
 800033a:	625a      	str	r2, [r3, #36]	; 0x24
		delay(T * 0.8);
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <togglepin+0x78>)
 800033e:	0018      	movs	r0, r3
 8000340:	f7ff ffac 	bl	800029c <delay>
 8000344:	e000      	b.n	8000348 <togglepin+0x6c>
//		char c = '0';
//		HAL_UART_Transmit(&huart2, &c, 1, -1);
	} else
		return;
 8000346:	46c0      	nop			; (mov r8, r8)
}
 8000348:	46bd      	mov	sp, r7
 800034a:	b002      	add	sp, #8
 800034c:	bd80      	pop	{r7, pc}
 800034e:	46c0      	nop			; (mov r8, r8)
 8000350:	40012c00 	.word	0x40012c00
 8000354:	0000bb80 	.word	0x0000bb80
 8000358:	000003e9 	.word	0x000003e9
 800035c:	00002ee0 	.word	0x00002ee0

08000360 <output>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void output(char* string) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b084      	sub	sp, #16
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	char* buf = string;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, buf, strlen(buf), 100);
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	0018      	movs	r0, r3
 8000370:	f7ff feca 	bl	8000108 <strlen>
 8000374:	0003      	movs	r3, r0
 8000376:	b29a      	uxth	r2, r3
 8000378:	68f9      	ldr	r1, [r7, #12]
 800037a:	4804      	ldr	r0, [pc, #16]	; (800038c <output+0x2c>)
 800037c:	2364      	movs	r3, #100	; 0x64
 800037e:	f002 fa79 	bl	8002874 <HAL_UART_Transmit>
}
 8000382:	46c0      	nop			; (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b004      	add	sp, #16
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	200000b8 	.word	0x200000b8

08000390 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	4c45      	ldr	r4, [pc, #276]	; (80004a8 <main+0x118>)
 8000394:	44a5      	add	sp, r4
 8000396:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000398:	f000 fb78 	bl	8000a8c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800039c:	f000 f8a2 	bl	80004e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003a0:	f000 fa16 	bl	80007d0 <MX_GPIO_Init>
	MX_TIM1_Init();
 80003a4:	f000 f8da 	bl	800055c <MX_TIM1_Init>
	MX_TIM2_Init();
 80003a8:	f000 f98e 	bl	80006c8 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 80003ac:	f000 f9e0 	bl	8000770 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	// channel state 0V
	TIM1->ARR = COUNTER;
 80003b0:	4b3e      	ldr	r3, [pc, #248]	; (80004ac <main+0x11c>)
 80003b2:	22fa      	movs	r2, #250	; 0xfa
 80003b4:	0092      	lsls	r2, r2, #2
 80003b6:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR2 = 0;
 80003b8:	4b3c      	ldr	r3, [pc, #240]	; (80004ac <main+0x11c>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003be:	4b3c      	ldr	r3, [pc, #240]	; (80004b0 <main+0x120>)
 80003c0:	2104      	movs	r1, #4
 80003c2:	0018      	movs	r0, r3
 80003c4:	f001 fbf2 	bl	8001bac <HAL_TIM_PWM_Start>

	HAL_TIM_Base_Start(&htim2);
 80003c8:	4b3a      	ldr	r3, [pc, #232]	; (80004b4 <main+0x124>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f001 fb52 	bl	8001a74 <HAL_TIM_Base_Start>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	char buf[] = "Hello world!\rBetter late than never\r"
 80003d0:	4b39      	ldr	r3, [pc, #228]	; (80004b8 <main+0x128>)
 80003d2:	228a      	movs	r2, #138	; 0x8a
 80003d4:	0112      	lsls	r2, r2, #4
 80003d6:	18ba      	adds	r2, r7, r2
 80003d8:	18d2      	adds	r2, r2, r3
 80003da:	4b38      	ldr	r3, [pc, #224]	; (80004bc <main+0x12c>)
 80003dc:	0010      	movs	r0, r2
 80003de:	0019      	movs	r1, r3
 80003e0:	4b37      	ldr	r3, [pc, #220]	; (80004c0 <main+0x130>)
 80003e2:	001a      	movs	r2, r3
 80003e4:	f002 fe14 	bl	8003010 <memcpy>
			"Let the children lose it\r"
			"Let the children use it\r"
			"Let all the children boogie\r";

	//  Hang in there\rMake a long story short\r
	char out[] = "still work!!\r\n";
 80003e8:	4b36      	ldr	r3, [pc, #216]	; (80004c4 <main+0x134>)
 80003ea:	228a      	movs	r2, #138	; 0x8a
 80003ec:	0112      	lsls	r2, r2, #4
 80003ee:	4694      	mov	ip, r2
 80003f0:	44bc      	add	ip, r7
 80003f2:	4463      	add	r3, ip
 80003f4:	4a34      	ldr	r2, [pc, #208]	; (80004c8 <main+0x138>)
 80003f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80003f8:	c313      	stmia	r3!, {r0, r1, r4}
 80003fa:	8811      	ldrh	r1, [r2, #0]
 80003fc:	8019      	strh	r1, [r3, #0]
 80003fe:	7892      	ldrb	r2, [r2, #2]
 8000400:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart2, out, strlen(out), -1);
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	0018      	movs	r0, r3
 8000406:	f7ff fe7f 	bl	8000108 <strlen>
 800040a:	0003      	movs	r3, r0
 800040c:	b29a      	uxth	r2, r3
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	1d39      	adds	r1, r7, #4
 8000414:	482d      	ldr	r0, [pc, #180]	; (80004cc <main+0x13c>)
 8000416:	f002 fa2d 	bl	8002874 <HAL_UART_Transmit>
	output("Hello world!\rBetter late than never\r\n"
 800041a:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <main+0x140>)
 800041c:	0018      	movs	r0, r3
 800041e:	f7ff ff9f 	bl	8000360 <output>
			"\r\nThe machines rose from the ashes of the nuclear fire.\r\n"
			"Their war to exterminate mankind has raged for decades,\r\n"
			"but the final battle would not be fought in the future.\n"
			"It would be fought here, in our present. Tonight.\n"
			"\rWhen you walk through a storm\r\n");
	char c = 'l';
 8000422:	4b2c      	ldr	r3, [pc, #176]	; (80004d4 <main+0x144>)
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	226c      	movs	r2, #108	; 0x6c
 8000428:	701a      	strb	r2, [r3, #0]
	while (1) {

		// turning on channel
		delay(10 * T);
 800042a:	4b2b      	ldr	r3, [pc, #172]	; (80004d8 <main+0x148>)
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ff35 	bl	800029c <delay>
		// channel state 0V -> 3.3V
		TIM1->CCR2 = COUNTER + 1;
 8000432:	4b1e      	ldr	r3, [pc, #120]	; (80004ac <main+0x11c>)
 8000434:	4a29      	ldr	r2, [pc, #164]	; (80004dc <main+0x14c>)
 8000436:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CNT = COUNTER;
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <main+0x11c>)
 800043a:	22fa      	movs	r2, #250	; 0xfa
 800043c:	0092      	lsls	r2, r2, #2
 800043e:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_Delay(2000);
 8000440:	23fa      	movs	r3, #250	; 0xfa
 8000442:	00db      	lsls	r3, r3, #3
 8000444:	0018      	movs	r0, r3
 8000446:	f000 fb85 	bl	8000b54 <HAL_Delay>

//		HAL_UART_Transmit(&huart2, &buf, strlen(buf), -1);
		// information transmission
		for (int i = 0; i < strlen(buf); i++) {
 800044a:	2300      	movs	r3, #0
 800044c:	4a24      	ldr	r2, [pc, #144]	; (80004e0 <main+0x150>)
 800044e:	18ba      	adds	r2, r7, r2
 8000450:	6013      	str	r3, [r2, #0]
 8000452:	e011      	b.n	8000478 <main+0xe8>
			dec_to_bin(buf[i]);
 8000454:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <main+0x128>)
 8000456:	228a      	movs	r2, #138	; 0x8a
 8000458:	0112      	lsls	r2, r2, #4
 800045a:	18ba      	adds	r2, r7, r2
 800045c:	18d2      	adds	r2, r2, r3
 800045e:	4c20      	ldr	r4, [pc, #128]	; (80004e0 <main+0x150>)
 8000460:	193b      	adds	r3, r7, r4
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	18d3      	adds	r3, r2, r3
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff fee1 	bl	8000230 <dec_to_bin>
		for (int i = 0; i < strlen(buf); i++) {
 800046e:	193b      	adds	r3, r7, r4
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	3301      	adds	r3, #1
 8000474:	193a      	adds	r2, r7, r4
 8000476:	6013      	str	r3, [r2, #0]
 8000478:	2314      	movs	r3, #20
 800047a:	18fb      	adds	r3, r7, r3
 800047c:	0018      	movs	r0, r3
 800047e:	f7ff fe43 	bl	8000108 <strlen>
 8000482:	0002      	movs	r2, r0
 8000484:	4b16      	ldr	r3, [pc, #88]	; (80004e0 <main+0x150>)
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	429a      	cmp	r2, r3
 800048c:	d8e2      	bhi.n	8000454 <main+0xc4>
		}
//		dec_to_bin(c);
		// end of data transmission channel state still 3.3V
		HAL_Delay(2000);
 800048e:	23fa      	movs	r3, #250	; 0xfa
 8000490:	00db      	lsls	r3, r3, #3
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fb5e 	bl	8000b54 <HAL_Delay>

		// turning off channel 3.3V -> 0V
		TIM1->CCR2 = 0;
 8000498:	4b04      	ldr	r3, [pc, #16]	; (80004ac <main+0x11c>)
 800049a:	2200      	movs	r2, #0
 800049c:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CNT = COUNTER;
 800049e:	4b03      	ldr	r3, [pc, #12]	; (80004ac <main+0x11c>)
 80004a0:	22fa      	movs	r2, #250	; 0xfa
 80004a2:	0092      	lsls	r2, r2, #2
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
		delay(10 * T);
 80004a6:	e7c0      	b.n	800042a <main+0x9a>
 80004a8:	fffff75c 	.word	0xfffff75c
 80004ac:	40012c00 	.word	0x40012c00
 80004b0:	20000028 	.word	0x20000028
 80004b4:	20000070 	.word	0x20000070
 80004b8:	fffff774 	.word	0xfffff774
 80004bc:	080031bc 	.word	0x080031bc
 80004c0:	00000885 	.word	0x00000885
 80004c4:	fffff764 	.word	0xfffff764
 80004c8:	08003a44 	.word	0x08003a44
 80004cc:	200000b8 	.word	0x200000b8
 80004d0:	0800304c 	.word	0x0800304c
 80004d4:	0000089b 	.word	0x0000089b
 80004d8:	000927c0 	.word	0x000927c0
 80004dc:	000003e9 	.word	0x000003e9
 80004e0:	0000089c 	.word	0x0000089c

080004e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80004e4:	b590      	push	{r4, r7, lr}
 80004e6:	b093      	sub	sp, #76	; 0x4c
 80004e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80004ea:	2414      	movs	r4, #20
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	0018      	movs	r0, r3
 80004f0:	2334      	movs	r3, #52	; 0x34
 80004f2:	001a      	movs	r2, r3
 80004f4:	2100      	movs	r1, #0
 80004f6:	f002 fd94 	bl	8003022 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2310      	movs	r3, #16
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f002 fd8d 	bl	8003022 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2220      	movs	r2, #32
 800050c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2201      	movs	r2, #1
 8000512:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800051a:	193b      	adds	r3, r7, r4
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fd59 	bl	8000fd4 <HAL_RCC_OscConfig>
 8000522:	1e03      	subs	r3, r0, #0
 8000524:	d001      	beq.n	800052a <SystemClock_Config+0x46>
		Error_Handler();
 8000526:	f000 f96b 	bl	8000800 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	2207      	movs	r2, #7
 800052e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2203      	movs	r2, #3
 8000534:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000536:	1d3b      	adds	r3, r7, #4
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000542:	1d3b      	adds	r3, r7, #4
 8000544:	2101      	movs	r1, #1
 8000546:	0018      	movs	r0, r3
 8000548:	f001 f8ca 	bl	80016e0 <HAL_RCC_ClockConfig>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d001      	beq.n	8000554 <SystemClock_Config+0x70>
		Error_Handler();
 8000550:	f000 f956 	bl	8000800 <Error_Handler>
	}
}
 8000554:	46c0      	nop			; (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b013      	add	sp, #76	; 0x4c
 800055a:	bd90      	pop	{r4, r7, pc}

0800055c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	; 0x58
 8000560:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000562:	2348      	movs	r3, #72	; 0x48
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	0018      	movs	r0, r3
 8000568:	2310      	movs	r3, #16
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 fd58 	bl	8003022 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000572:	2340      	movs	r3, #64	; 0x40
 8000574:	18fb      	adds	r3, r7, r3
 8000576:	0018      	movs	r0, r3
 8000578:	2308      	movs	r3, #8
 800057a:	001a      	movs	r2, r3
 800057c:	2100      	movs	r1, #0
 800057e:	f002 fd50 	bl	8003022 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000582:	2324      	movs	r3, #36	; 0x24
 8000584:	18fb      	adds	r3, r7, r3
 8000586:	0018      	movs	r0, r3
 8000588:	231c      	movs	r3, #28
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f002 fd48 	bl	8003022 <memset>
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	0018      	movs	r0, r3
 8000596:	2320      	movs	r3, #32
 8000598:	001a      	movs	r2, r3
 800059a:	2100      	movs	r1, #0
 800059c:	f002 fd41 	bl	8003022 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80005a0:	4b46      	ldr	r3, [pc, #280]	; (80006bc <MX_TIM1_Init+0x160>)
 80005a2:	4a47      	ldr	r2, [pc, #284]	; (80006c0 <MX_TIM1_Init+0x164>)
 80005a4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 1 - 1;
 80005a6:	4b45      	ldr	r3, [pc, #276]	; (80006bc <MX_TIM1_Init+0x160>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ac:	4b43      	ldr	r3, [pc, #268]	; (80006bc <MX_TIM1_Init+0x160>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80005b2:	4b42      	ldr	r3, [pc, #264]	; (80006bc <MX_TIM1_Init+0x160>)
 80005b4:	4a43      	ldr	r2, [pc, #268]	; (80006c4 <MX_TIM1_Init+0x168>)
 80005b6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005b8:	4b40      	ldr	r3, [pc, #256]	; (80006bc <MX_TIM1_Init+0x160>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80005be:	4b3f      	ldr	r3, [pc, #252]	; (80006bc <MX_TIM1_Init+0x160>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c4:	4b3d      	ldr	r3, [pc, #244]	; (80006bc <MX_TIM1_Init+0x160>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80005ca:	4b3c      	ldr	r3, [pc, #240]	; (80006bc <MX_TIM1_Init+0x160>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f001 fa01 	bl	80019d4 <HAL_TIM_Base_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <MX_TIM1_Init+0x7e>
		Error_Handler();
 80005d6:	f000 f913 	bl	8000800 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005da:	2148      	movs	r1, #72	; 0x48
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	0152      	lsls	r2, r2, #5
 80005e2:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80005e4:	187a      	adds	r2, r7, r1
 80005e6:	4b35      	ldr	r3, [pc, #212]	; (80006bc <MX_TIM1_Init+0x160>)
 80005e8:	0011      	movs	r1, r2
 80005ea:	0018      	movs	r0, r3
 80005ec:	f001 fc50 	bl	8001e90 <HAL_TIM_ConfigClockSource>
 80005f0:	1e03      	subs	r3, r0, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM1_Init+0x9c>
		Error_Handler();
 80005f4:	f000 f904 	bl	8000800 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80005f8:	4b30      	ldr	r3, [pc, #192]	; (80006bc <MX_TIM1_Init+0x160>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 fa7e 	bl	8001afc <HAL_TIM_PWM_Init>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM1_Init+0xac>
		Error_Handler();
 8000604:	f000 f8fc 	bl	8000800 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000608:	2140      	movs	r1, #64	; 0x40
 800060a:	187b      	adds	r3, r7, r1
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000610:	187b      	adds	r3, r7, r1
 8000612:	2200      	movs	r2, #0
 8000614:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000616:	187a      	adds	r2, r7, r1
 8000618:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_TIM1_Init+0x160>)
 800061a:	0011      	movs	r1, r2
 800061c:	0018      	movs	r0, r3
 800061e:	f002 f81f 	bl	8002660 <HAL_TIMEx_MasterConfigSynchronization>
 8000622:	1e03      	subs	r3, r0, #0
 8000624:	d001      	beq.n	800062a <MX_TIM1_Init+0xce>
			!= HAL_OK) {
		Error_Handler();
 8000626:	f000 f8eb 	bl	8000800 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800062a:	2124      	movs	r1, #36	; 0x24
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2260      	movs	r2, #96	; 0x60
 8000630:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800064a:	187b      	adds	r3, r7, r1
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000650:	187b      	adds	r3, r7, r1
 8000652:	2200      	movs	r2, #0
 8000654:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 8000656:	1879      	adds	r1, r7, r1
 8000658:	4b18      	ldr	r3, [pc, #96]	; (80006bc <MX_TIM1_Init+0x160>)
 800065a:	2204      	movs	r2, #4
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fb51 	bl	8001d04 <HAL_TIM_PWM_ConfigChannel>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_TIM1_Init+0x10e>
			!= HAL_OK) {
		Error_Handler();
 8000666:	f000 f8cb 	bl	8000800 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	sBreakDeadTimeConfig.DeadTime = 0;
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0192      	lsls	r2, r2, #6
 800068e:	615a      	str	r2, [r3, #20]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000696:	1d3a      	adds	r2, r7, #4
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <MX_TIM1_Init+0x160>)
 800069a:	0011      	movs	r1, r2
 800069c:	0018      	movs	r0, r3
 800069e:	f002 f837 	bl	8002710 <HAL_TIMEx_ConfigBreakDeadTime>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM1_Init+0x14e>
			!= HAL_OK) {
		Error_Handler();
 80006a6:	f000 f8ab 	bl	8000800 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80006aa:	4b04      	ldr	r3, [pc, #16]	; (80006bc <MX_TIM1_Init+0x160>)
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 f903 	bl	80008b8 <HAL_TIM_MspPostInit>

}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b016      	add	sp, #88	; 0x58
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	46c0      	nop			; (mov r8, r8)
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40012c00 	.word	0x40012c00
 80006c4:	0000ffff 	.word	0x0000ffff

080006c8 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b086      	sub	sp, #24
 80006cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80006ce:	2308      	movs	r3, #8
 80006d0:	18fb      	adds	r3, r7, r3
 80006d2:	0018      	movs	r0, r3
 80006d4:	2310      	movs	r3, #16
 80006d6:	001a      	movs	r2, r3
 80006d8:	2100      	movs	r1, #0
 80006da:	f002 fca2 	bl	8003022 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80006de:	003b      	movs	r3, r7
 80006e0:	0018      	movs	r0, r3
 80006e2:	2308      	movs	r3, #8
 80006e4:	001a      	movs	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	f002 fc9b 	bl	8003022 <memset>

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <MX_TIM2_Init+0xa4>)
 80006ee:	2280      	movs	r2, #128	; 0x80
 80006f0:	05d2      	lsls	r2, r2, #23
 80006f2:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1 - 1;
 80006f4:	4b1d      	ldr	r3, [pc, #116]	; (800076c <MX_TIM2_Init+0xa4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fa:	4b1c      	ldr	r3, [pc, #112]	; (800076c <MX_TIM2_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8000700:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_TIM2_Init+0xa4>)
 8000702:	2201      	movs	r2, #1
 8000704:	4252      	negs	r2, r2
 8000706:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_TIM2_Init+0xa4>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_TIM2_Init+0xa4>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_TIM2_Init+0xa4>)
 8000716:	0018      	movs	r0, r3
 8000718:	f001 f95c 	bl	80019d4 <HAL_TIM_Base_Init>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_TIM2_Init+0x5c>
		Error_Handler();
 8000720:	f000 f86e 	bl	8000800 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000724:	2108      	movs	r1, #8
 8000726:	187b      	adds	r3, r7, r1
 8000728:	2280      	movs	r2, #128	; 0x80
 800072a:	0152      	lsls	r2, r2, #5
 800072c:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800072e:	187a      	adds	r2, r7, r1
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <MX_TIM2_Init+0xa4>)
 8000732:	0011      	movs	r1, r2
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fbab 	bl	8001e90 <HAL_TIM_ConfigClockSource>
 800073a:	1e03      	subs	r3, r0, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM2_Init+0x7a>
		Error_Handler();
 800073e:	f000 f85f 	bl	8000800 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	003b      	movs	r3, r7
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	003b      	movs	r3, r7
 800074a:	2200      	movs	r2, #0
 800074c:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800074e:	003a      	movs	r2, r7
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_TIM2_Init+0xa4>)
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f001 ff83 	bl	8002660 <HAL_TIMEx_MasterConfigSynchronization>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d001      	beq.n	8000762 <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800075e:	f000 f84f 	bl	8000800 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	46bd      	mov	sp, r7
 8000766:	b006      	add	sp, #24
 8000768:	bd80      	pop	{r7, pc}
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	20000070 	.word	0x20000070

08000770 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000774:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000776:	4a15      	ldr	r2, [pc, #84]	; (80007cc <MX_USART2_UART_Init+0x5c>)
 8000778:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800077c:	22e1      	movs	r2, #225	; 0xe1
 800077e:	0252      	lsls	r2, r2, #9
 8000780:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0f      	ldr	r3, [pc, #60]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <MX_USART2_UART_Init+0x58>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f002 f809 	bl	80027cc <HAL_UART_Init>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007be:	f000 f81f 	bl	8000800 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	200000b8 	.word	0x200000b8
 80007cc:	40004400 	.word	0x40004400

080007d0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_GPIO_Init+0x2c>)
 80007d8:	695a      	ldr	r2, [r3, #20]
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_GPIO_Init+0x2c>)
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	0289      	lsls	r1, r1, #10
 80007e0:	430a      	orrs	r2, r1
 80007e2:	615a      	str	r2, [r3, #20]
 80007e4:	4b05      	ldr	r3, [pc, #20]	; (80007fc <MX_GPIO_Init+0x2c>)
 80007e6:	695a      	ldr	r2, [r3, #20]
 80007e8:	2380      	movs	r3, #128	; 0x80
 80007ea:	029b      	lsls	r3, r3, #10
 80007ec:	4013      	ands	r3, r2
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	46bd      	mov	sp, r7
 80007f6:	b002      	add	sp, #8
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	40021000 	.word	0x40021000

08000800 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>
	...

0800080c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x44>)
 8000814:	699a      	ldr	r2, [r3, #24]
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <HAL_MspInit+0x44>)
 8000818:	2101      	movs	r1, #1
 800081a:	430a      	orrs	r2, r1
 800081c:	619a      	str	r2, [r3, #24]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x44>)
 8000820:	699b      	ldr	r3, [r3, #24]
 8000822:	2201      	movs	r2, #1
 8000824:	4013      	ands	r3, r2
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <HAL_MspInit+0x44>)
 800082c:	69da      	ldr	r2, [r3, #28]
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x44>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0549      	lsls	r1, r1, #21
 8000834:	430a      	orrs	r2, r1
 8000836:	61da      	str	r2, [r3, #28]
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_MspInit+0x44>)
 800083a:	69da      	ldr	r2, [r3, #28]
 800083c:	2380      	movs	r3, #128	; 0x80
 800083e:	055b      	lsls	r3, r3, #21
 8000840:	4013      	ands	r3, r2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	46bd      	mov	sp, r7
 800084a:	b002      	add	sp, #8
 800084c:	bd80      	pop	{r7, pc}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	40021000 	.word	0x40021000

08000854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <HAL_TIM_Base_MspInit+0x5c>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d10e      	bne.n	8000884 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_TIM_Base_MspInit+0x60>)
 8000868:	699a      	ldr	r2, [r3, #24]
 800086a:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <HAL_TIM_Base_MspInit+0x60>)
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	0109      	lsls	r1, r1, #4
 8000870:	430a      	orrs	r2, r1
 8000872:	619a      	str	r2, [r3, #24]
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <HAL_TIM_Base_MspInit+0x60>)
 8000876:	699a      	ldr	r2, [r3, #24]
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	011b      	lsls	r3, r3, #4
 800087c:	4013      	ands	r3, r2
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000882:	e011      	b.n	80008a8 <HAL_TIM_Base_MspInit+0x54>
  else if(htim_base->Instance==TIM2)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	05db      	lsls	r3, r3, #23
 800088c:	429a      	cmp	r2, r3
 800088e:	d10b      	bne.n	80008a8 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_TIM_Base_MspInit+0x60>)
 8000892:	69da      	ldr	r2, [r3, #28]
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_TIM_Base_MspInit+0x60>)
 8000896:	2101      	movs	r1, #1
 8000898:	430a      	orrs	r2, r1
 800089a:	61da      	str	r2, [r3, #28]
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <HAL_TIM_Base_MspInit+0x60>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4013      	ands	r3, r2
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b004      	add	sp, #16
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	40012c00 	.word	0x40012c00
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b089      	sub	sp, #36	; 0x24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	240c      	movs	r4, #12
 80008c2:	193b      	adds	r3, r7, r4
 80008c4:	0018      	movs	r0, r3
 80008c6:	2314      	movs	r3, #20
 80008c8:	001a      	movs	r2, r3
 80008ca:	2100      	movs	r1, #0
 80008cc:	f002 fba9 	bl	8003022 <memset>
  if(htim->Instance==TIM1)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a16      	ldr	r2, [pc, #88]	; (8000930 <HAL_TIM_MspPostInit+0x78>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d125      	bne.n	8000926 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <HAL_TIM_MspPostInit+0x7c>)
 80008dc:	695a      	ldr	r2, [r3, #20]
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_TIM_MspPostInit+0x7c>)
 80008e0:	2180      	movs	r1, #128	; 0x80
 80008e2:	0289      	lsls	r1, r1, #10
 80008e4:	430a      	orrs	r2, r1
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_TIM_MspPostInit+0x7c>)
 80008ea:	695a      	ldr	r2, [r3, #20]
 80008ec:	2380      	movs	r3, #128	; 0x80
 80008ee:	029b      	lsls	r3, r3, #10
 80008f0:	4013      	ands	r3, r2
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	2280      	movs	r2, #128	; 0x80
 80008fa:	0092      	lsls	r2, r2, #2
 80008fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2202      	movs	r2, #2
 8000904:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2202      	movs	r2, #2
 8000916:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	187a      	adds	r2, r7, r1
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f000 f9ef 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b009      	add	sp, #36	; 0x24
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	40012c00 	.word	0x40012c00
 8000934:	40021000 	.word	0x40021000

08000938 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b08b      	sub	sp, #44	; 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	2414      	movs	r4, #20
 8000942:	193b      	adds	r3, r7, r4
 8000944:	0018      	movs	r0, r3
 8000946:	2314      	movs	r3, #20
 8000948:	001a      	movs	r2, r3
 800094a:	2100      	movs	r1, #0
 800094c:	f002 fb69 	bl	8003022 <memset>
  if(huart->Instance==USART2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a1c      	ldr	r2, [pc, #112]	; (80009c8 <HAL_UART_MspInit+0x90>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d132      	bne.n	80009c0 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_UART_MspInit+0x94>)
 800095c:	69da      	ldr	r2, [r3, #28]
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_UART_MspInit+0x94>)
 8000960:	2180      	movs	r1, #128	; 0x80
 8000962:	0289      	lsls	r1, r1, #10
 8000964:	430a      	orrs	r2, r1
 8000966:	61da      	str	r2, [r3, #28]
 8000968:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_UART_MspInit+0x94>)
 800096a:	69da      	ldr	r2, [r3, #28]
 800096c:	2380      	movs	r3, #128	; 0x80
 800096e:	029b      	lsls	r3, r3, #10
 8000970:	4013      	ands	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_UART_MspInit+0x94>)
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_UART_MspInit+0x94>)
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0289      	lsls	r1, r1, #10
 8000980:	430a      	orrs	r2, r1
 8000982:	615a      	str	r2, [r3, #20]
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <HAL_UART_MspInit+0x94>)
 8000986:	695a      	ldr	r2, [r3, #20]
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	029b      	lsls	r3, r3, #10
 800098c:	4013      	ands	r3, r2
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000992:	0021      	movs	r1, r4
 8000994:	187b      	adds	r3, r7, r1
 8000996:	220c      	movs	r2, #12
 8000998:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2202      	movs	r2, #2
 800099e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2203      	movs	r2, #3
 80009aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2201      	movs	r2, #1
 80009b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	187a      	adds	r2, r7, r1
 80009b4:	2390      	movs	r3, #144	; 0x90
 80009b6:	05db      	lsls	r3, r3, #23
 80009b8:	0011      	movs	r1, r2
 80009ba:	0018      	movs	r0, r3
 80009bc:	f000 f9a2 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009c0:	46c0      	nop			; (mov r8, r8)
 80009c2:	46bd      	mov	sp, r7
 80009c4:	b00b      	add	sp, #44	; 0x2c
 80009c6:	bd90      	pop	{r4, r7, pc}
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f892 	bl	8000b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	4813      	ldr	r0, [pc, #76]	; (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <LoopForever+0x6>)
    LDR R1, [R0]
 8000a0e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000a10:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000a12:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <LoopForever+0xa>)
    CMP R1, R2
 8000a14:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000a16:	d105      	bne.n	8000a24 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000a18:	4812      	ldr	r0, [pc, #72]	; (8000a64 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000a1a:	4913      	ldr	r1, [pc, #76]	; (8000a68 <LoopForever+0x12>)
    STR R1, [R0]
 8000a1c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000a1e:	4813      	ldr	r0, [pc, #76]	; (8000a6c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000a20:	4913      	ldr	r1, [pc, #76]	; (8000a70 <LoopForever+0x1a>)
    STR R1, [R0]
 8000a22:	6001      	str	r1, [r0, #0]

08000a24 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000a26:	4914      	ldr	r1, [pc, #80]	; (8000a78 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <LoopForever+0x26>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000a3c:	4c11      	ldr	r4, [pc, #68]	; (8000a84 <LoopForever+0x2e>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a4a:	f7ff ffd8 	bl	80009fe <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a4e:	f002 fabb 	bl	8002fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff fc9d 	bl	8000390 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000a5c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000a60:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000a64:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000a68:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000a6c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000a70:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a7c:	08003a94 	.word	0x08003a94
  ldr r2, =_sbss
 8000a80:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a84:	20000140 	.word	0x20000140

08000a88 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_IRQHandler>
	...

08000a8c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <HAL_Init+0x24>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_Init+0x24>)
 8000a96:	2110      	movs	r1, #16
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f809 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa2:	f7ff feb3 	bl	800080c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	40022000 	.word	0x40022000

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_InitTick+0x5c>)
 8000abe:	681c      	ldr	r4, [r3, #0]
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_InitTick+0x60>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	23fa      	movs	r3, #250	; 0xfa
 8000ac8:	0098      	lsls	r0, r3, #2
 8000aca:	f7ff fb25 	bl	8000118 <__udivsi3>
 8000ace:	0003      	movs	r3, r0
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0020      	movs	r0, r4
 8000ad4:	f7ff fb20 	bl	8000118 <__udivsi3>
 8000ad8:	0003      	movs	r3, r0
 8000ada:	0018      	movs	r0, r3
 8000adc:	f000 f905 	bl	8000cea <HAL_SYSTICK_Config>
 8000ae0:	1e03      	subs	r3, r0, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	e00f      	b.n	8000b08 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	2b03      	cmp	r3, #3
 8000aec:	d80b      	bhi.n	8000b06 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aee:	6879      	ldr	r1, [r7, #4]
 8000af0:	2301      	movs	r3, #1
 8000af2:	425b      	negs	r3, r3
 8000af4:	2200      	movs	r2, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f8e2 	bl	8000cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000afc:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_InitTick+0x64>)
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000b02:	2300      	movs	r3, #0
 8000b04:	e000      	b.n	8000b08 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	0018      	movs	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b003      	add	sp, #12
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	20000000 	.word	0x20000000
 8000b14:	20000008 	.word	0x20000008
 8000b18:	20000004 	.word	0x20000004

08000b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b20:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <HAL_IncTick+0x1c>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	001a      	movs	r2, r3
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x20>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	18d2      	adds	r2, r2, r3
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_IncTick+0x20>)
 8000b2e:	601a      	str	r2, [r3, #0]
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	2000013c 	.word	0x2000013c

08000b40 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  return uwTick;
 8000b44:	4b02      	ldr	r3, [pc, #8]	; (8000b50 <HAL_GetTick+0x10>)
 8000b46:	681b      	ldr	r3, [r3, #0]
}
 8000b48:	0018      	movs	r0, r3
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	2000013c 	.word	0x2000013c

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff0 	bl	8000b40 <HAL_GetTick>
 8000b60:	0003      	movs	r3, r0
 8000b62:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	001a      	movs	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	189b      	adds	r3, r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	f7ff ffe0 	bl	8000b40 <HAL_GetTick>
 8000b80:	0002      	movs	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	b004      	add	sp, #16
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	20000008 	.word	0x20000008

08000b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	0002      	movs	r2, r0
 8000ba4:	6039      	str	r1, [r7, #0]
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	1dfb      	adds	r3, r7, #7
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb0:	d828      	bhi.n	8000c04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bb2:	4a2f      	ldr	r2, [pc, #188]	; (8000c70 <__NVIC_SetPriority+0xd4>)
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	33c0      	adds	r3, #192	; 0xc0
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	589b      	ldr	r3, [r3, r2]
 8000bc2:	1dfa      	adds	r2, r7, #7
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	0011      	movs	r1, r2
 8000bc8:	2203      	movs	r2, #3
 8000bca:	400a      	ands	r2, r1
 8000bcc:	00d2      	lsls	r2, r2, #3
 8000bce:	21ff      	movs	r1, #255	; 0xff
 8000bd0:	4091      	lsls	r1, r2
 8000bd2:	000a      	movs	r2, r1
 8000bd4:	43d2      	mvns	r2, r2
 8000bd6:	401a      	ands	r2, r3
 8000bd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	019b      	lsls	r3, r3, #6
 8000bde:	22ff      	movs	r2, #255	; 0xff
 8000be0:	401a      	ands	r2, r3
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	0018      	movs	r0, r3
 8000be8:	2303      	movs	r3, #3
 8000bea:	4003      	ands	r3, r0
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf0:	481f      	ldr	r0, [pc, #124]	; (8000c70 <__NVIC_SetPriority+0xd4>)
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b25b      	sxtb	r3, r3
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	33c0      	adds	r3, #192	; 0xc0
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c02:	e031      	b.n	8000c68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <__NVIC_SetPriority+0xd8>)
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	400b      	ands	r3, r1
 8000c10:	3b08      	subs	r3, #8
 8000c12:	089b      	lsrs	r3, r3, #2
 8000c14:	3306      	adds	r3, #6
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	1dfa      	adds	r2, r7, #7
 8000c20:	7812      	ldrb	r2, [r2, #0]
 8000c22:	0011      	movs	r1, r2
 8000c24:	2203      	movs	r2, #3
 8000c26:	400a      	ands	r2, r1
 8000c28:	00d2      	lsls	r2, r2, #3
 8000c2a:	21ff      	movs	r1, #255	; 0xff
 8000c2c:	4091      	lsls	r1, r2
 8000c2e:	000a      	movs	r2, r1
 8000c30:	43d2      	mvns	r2, r2
 8000c32:	401a      	ands	r2, r3
 8000c34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	019b      	lsls	r3, r3, #6
 8000c3a:	22ff      	movs	r2, #255	; 0xff
 8000c3c:	401a      	ands	r2, r3
 8000c3e:	1dfb      	adds	r3, r7, #7
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	0018      	movs	r0, r3
 8000c44:	2303      	movs	r3, #3
 8000c46:	4003      	ands	r3, r0
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c4c:	4809      	ldr	r0, [pc, #36]	; (8000c74 <__NVIC_SetPriority+0xd8>)
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	001c      	movs	r4, r3
 8000c54:	230f      	movs	r3, #15
 8000c56:	4023      	ands	r3, r4
 8000c58:	3b08      	subs	r3, #8
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	3306      	adds	r3, #6
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	18c3      	adds	r3, r0, r3
 8000c64:	3304      	adds	r3, #4
 8000c66:	601a      	str	r2, [r3, #0]
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	b003      	add	sp, #12
 8000c6e:	bd90      	pop	{r4, r7, pc}
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	1e5a      	subs	r2, r3, #1
 8000c84:	2380      	movs	r3, #128	; 0x80
 8000c86:	045b      	lsls	r3, r3, #17
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d301      	bcc.n	8000c90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e010      	b.n	8000cb2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c90:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <SysTick_Config+0x44>)
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	3a01      	subs	r2, #1
 8000c96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c98:	2301      	movs	r3, #1
 8000c9a:	425b      	negs	r3, r3
 8000c9c:	2103      	movs	r1, #3
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f7ff ff7c 	bl	8000b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <SysTick_Config+0x44>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SysTick_Config+0x44>)
 8000cac:	2207      	movs	r2, #7
 8000cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cb0:	2300      	movs	r3, #0
}
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b002      	add	sp, #8
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	e000e010 	.word	0xe000e010

08000cc0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	210f      	movs	r1, #15
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	1c02      	adds	r2, r0, #0
 8000cd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	b25b      	sxtb	r3, r3
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff5d 	bl	8000b9c <__NVIC_SetPriority>
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	b004      	add	sp, #16
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ffbf 	bl	8000c78 <SysTick_Config>
 8000cfa:	0003      	movs	r3, r0
}
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e149      	b.n	8000fa8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	697a      	ldr	r2, [r7, #20]
 8000d1c:	4091      	lsls	r1, r2
 8000d1e:	000a      	movs	r2, r1
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d100      	bne.n	8000d2c <HAL_GPIO_Init+0x28>
 8000d2a:	e13a      	b.n	8000fa2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2203      	movs	r2, #3
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d005      	beq.n	8000d44 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2203      	movs	r2, #3
 8000d3e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d130      	bne.n	8000da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	409a      	lsls	r2, r3
 8000d52:	0013      	movs	r3, r2
 8000d54:	43da      	mvns	r2, r3
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	409a      	lsls	r2, r3
 8000d80:	0013      	movs	r3, r2
 8000d82:	43da      	mvns	r2, r3
 8000d84:	693b      	ldr	r3, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	2201      	movs	r2, #1
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
 8000d98:	0013      	movs	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2203      	movs	r2, #3
 8000dac:	4013      	ands	r3, r2
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d017      	beq.n	8000de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	409a      	lsls	r2, r3
 8000dc0:	0013      	movs	r3, r2
 8000dc2:	43da      	mvns	r2, r3
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	0013      	movs	r3, r2
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2203      	movs	r2, #3
 8000de8:	4013      	ands	r3, r2
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d123      	bne.n	8000e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	0092      	lsls	r2, r2, #2
 8000df8:	58d3      	ldr	r3, [r2, r3]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	2207      	movs	r2, #7
 8000e00:	4013      	ands	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	2107      	movs	r1, #7
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	409a      	lsls	r2, r3
 8000e20:	0013      	movs	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	0092      	lsls	r2, r2, #2
 8000e32:	6939      	ldr	r1, [r7, #16]
 8000e34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	43da      	mvns	r2, r3
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2203      	movs	r2, #3
 8000e54:	401a      	ands	r2, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	409a      	lsls	r2, r3
 8000e5c:	0013      	movs	r3, r2
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	23c0      	movs	r3, #192	; 0xc0
 8000e70:	029b      	lsls	r3, r3, #10
 8000e72:	4013      	ands	r3, r2
 8000e74:	d100      	bne.n	8000e78 <HAL_GPIO_Init+0x174>
 8000e76:	e094      	b.n	8000fa2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	4b51      	ldr	r3, [pc, #324]	; (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000e7e:	2101      	movs	r1, #1
 8000e80:	430a      	orrs	r2, r1
 8000e82:	619a      	str	r2, [r3, #24]
 8000e84:	4b4e      	ldr	r3, [pc, #312]	; (8000fc0 <HAL_GPIO_Init+0x2bc>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	2201      	movs	r2, #1
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e90:	4a4c      	ldr	r2, [pc, #304]	; (8000fc4 <HAL_GPIO_Init+0x2c0>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	589b      	ldr	r3, [r3, r2]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	0013      	movs	r3, r2
 8000eac:	43da      	mvns	r2, r3
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb4:	687a      	ldr	r2, [r7, #4]
 8000eb6:	2390      	movs	r3, #144	; 0x90
 8000eb8:	05db      	lsls	r3, r3, #23
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d00d      	beq.n	8000eda <HAL_GPIO_Init+0x1d6>
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4a41      	ldr	r2, [pc, #260]	; (8000fc8 <HAL_GPIO_Init+0x2c4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d007      	beq.n	8000ed6 <HAL_GPIO_Init+0x1d2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a40      	ldr	r2, [pc, #256]	; (8000fcc <HAL_GPIO_Init+0x2c8>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d101      	bne.n	8000ed2 <HAL_GPIO_Init+0x1ce>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x1d8>
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x1d8>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x1d8>
 8000eda:	2300      	movs	r3, #0
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	2103      	movs	r1, #3
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	0092      	lsls	r2, r2, #2
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000eec:	4935      	ldr	r1, [pc, #212]	; (8000fc4 <HAL_GPIO_Init+0x2c0>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3302      	adds	r3, #2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efa:	4b35      	ldr	r3, [pc, #212]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	43da      	mvns	r2, r3
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685a      	ldr	r2, [r3, #4]
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	025b      	lsls	r3, r3, #9
 8000f12:	4013      	ands	r3, r2
 8000f14:	d003      	beq.n	8000f1e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8000f16:	693a      	ldr	r2, [r7, #16]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000f24:	4b2a      	ldr	r3, [pc, #168]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	029b      	lsls	r3, r3, #10
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	d003      	beq.n	8000f48 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f48:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4e:	4b20      	ldr	r3, [pc, #128]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	43da      	mvns	r2, r3
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685a      	ldr	r2, [r3, #4]
 8000f62:	2380      	movs	r3, #128	; 0x80
 8000f64:	035b      	lsls	r3, r3, #13
 8000f66:	4013      	ands	r3, r2
 8000f68:	d003      	beq.n	8000f72 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000f7a:	68db      	ldr	r3, [r3, #12]
 8000f7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43da      	mvns	r2, r3
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	039b      	lsls	r3, r3, #14
 8000f90:	4013      	ands	r3, r2
 8000f92:	d003      	beq.n	8000f9c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_GPIO_Init+0x2cc>)
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	40da      	lsrs	r2, r3
 8000fb0:	1e13      	subs	r3, r2, #0
 8000fb2:	d000      	beq.n	8000fb6 <HAL_GPIO_Init+0x2b2>
 8000fb4:	e6ae      	b.n	8000d14 <HAL_GPIO_Init+0x10>
  } 
}
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b006      	add	sp, #24
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	40010000 	.word	0x40010000
 8000fc8:	48000400 	.word	0x48000400
 8000fcc:	48000800 	.word	0x48000800
 8000fd0:	40010400 	.word	0x40010400

08000fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d102      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	f000 fb76 	bl	80016d4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2201      	movs	r2, #1
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d100      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x20>
 8000ff2:	e08e      	b.n	8001112 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ff4:	4bc5      	ldr	r3, [pc, #788]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	2b04      	cmp	r3, #4
 8000ffe:	d00e      	beq.n	800101e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001000:	4bc2      	ldr	r3, [pc, #776]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	220c      	movs	r2, #12
 8001006:	4013      	ands	r3, r2
 8001008:	2b08      	cmp	r3, #8
 800100a:	d117      	bne.n	800103c <HAL_RCC_OscConfig+0x68>
 800100c:	4bbf      	ldr	r3, [pc, #764]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	23c0      	movs	r3, #192	; 0xc0
 8001012:	025b      	lsls	r3, r3, #9
 8001014:	401a      	ands	r2, r3
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	429a      	cmp	r2, r3
 800101c:	d10e      	bne.n	800103c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800101e:	4bbb      	ldr	r3, [pc, #748]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	; 0x80
 8001024:	029b      	lsls	r3, r3, #10
 8001026:	4013      	ands	r3, r2
 8001028:	d100      	bne.n	800102c <HAL_RCC_OscConfig+0x58>
 800102a:	e071      	b.n	8001110 <HAL_RCC_OscConfig+0x13c>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d000      	beq.n	8001036 <HAL_RCC_OscConfig+0x62>
 8001034:	e06c      	b.n	8001110 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	f000 fb4c 	bl	80016d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d107      	bne.n	8001054 <HAL_RCC_OscConfig+0x80>
 8001044:	4bb1      	ldr	r3, [pc, #708]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	4bb0      	ldr	r3, [pc, #704]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	0249      	lsls	r1, r1, #9
 800104e:	430a      	orrs	r2, r1
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	e02f      	b.n	80010b4 <HAL_RCC_OscConfig+0xe0>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d10c      	bne.n	8001076 <HAL_RCC_OscConfig+0xa2>
 800105c:	4bab      	ldr	r3, [pc, #684]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4baa      	ldr	r3, [pc, #680]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001062:	49ab      	ldr	r1, [pc, #684]	; (8001310 <HAL_RCC_OscConfig+0x33c>)
 8001064:	400a      	ands	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	4ba8      	ldr	r3, [pc, #672]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4ba7      	ldr	r3, [pc, #668]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800106e:	49a9      	ldr	r1, [pc, #676]	; (8001314 <HAL_RCC_OscConfig+0x340>)
 8001070:	400a      	ands	r2, r1
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	e01e      	b.n	80010b4 <HAL_RCC_OscConfig+0xe0>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b05      	cmp	r3, #5
 800107c:	d10e      	bne.n	800109c <HAL_RCC_OscConfig+0xc8>
 800107e:	4ba3      	ldr	r3, [pc, #652]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	4ba2      	ldr	r3, [pc, #648]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001084:	2180      	movs	r1, #128	; 0x80
 8001086:	02c9      	lsls	r1, r1, #11
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	4b9f      	ldr	r3, [pc, #636]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b9e      	ldr	r3, [pc, #632]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001092:	2180      	movs	r1, #128	; 0x80
 8001094:	0249      	lsls	r1, r1, #9
 8001096:	430a      	orrs	r2, r1
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	e00b      	b.n	80010b4 <HAL_RCC_OscConfig+0xe0>
 800109c:	4b9b      	ldr	r3, [pc, #620]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b9a      	ldr	r3, [pc, #616]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80010a2:	499b      	ldr	r1, [pc, #620]	; (8001310 <HAL_RCC_OscConfig+0x33c>)
 80010a4:	400a      	ands	r2, r1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	4b98      	ldr	r3, [pc, #608]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	4b97      	ldr	r3, [pc, #604]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80010ae:	4999      	ldr	r1, [pc, #612]	; (8001314 <HAL_RCC_OscConfig+0x340>)
 80010b0:	400a      	ands	r2, r1
 80010b2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d014      	beq.n	80010e6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fd40 	bl	8000b40 <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010c4:	e008      	b.n	80010d8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010c6:	f7ff fd3b 	bl	8000b40 <HAL_GetTick>
 80010ca:	0002      	movs	r2, r0
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	2b64      	cmp	r3, #100	; 0x64
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e2fd      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d8:	4b8c      	ldr	r3, [pc, #560]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	029b      	lsls	r3, r3, #10
 80010e0:	4013      	ands	r3, r2
 80010e2:	d0f0      	beq.n	80010c6 <HAL_RCC_OscConfig+0xf2>
 80010e4:	e015      	b.n	8001112 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fd2b 	bl	8000b40 <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010f0:	f7ff fd26 	bl	8000b40 <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b64      	cmp	r3, #100	; 0x64
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e2e8      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001102:	4b82      	ldr	r3, [pc, #520]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	029b      	lsls	r3, r3, #10
 800110a:	4013      	ands	r3, r2
 800110c:	d1f0      	bne.n	80010f0 <HAL_RCC_OscConfig+0x11c>
 800110e:	e000      	b.n	8001112 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001110:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2202      	movs	r2, #2
 8001118:	4013      	ands	r3, r2
 800111a:	d100      	bne.n	800111e <HAL_RCC_OscConfig+0x14a>
 800111c:	e06c      	b.n	80011f8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800111e:	4b7b      	ldr	r3, [pc, #492]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	220c      	movs	r2, #12
 8001124:	4013      	ands	r3, r2
 8001126:	d00e      	beq.n	8001146 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001128:	4b78      	ldr	r3, [pc, #480]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	220c      	movs	r2, #12
 800112e:	4013      	ands	r3, r2
 8001130:	2b08      	cmp	r3, #8
 8001132:	d11f      	bne.n	8001174 <HAL_RCC_OscConfig+0x1a0>
 8001134:	4b75      	ldr	r3, [pc, #468]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	025b      	lsls	r3, r3, #9
 800113c:	401a      	ands	r2, r3
 800113e:	2380      	movs	r3, #128	; 0x80
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	429a      	cmp	r2, r3
 8001144:	d116      	bne.n	8001174 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001146:	4b71      	ldr	r3, [pc, #452]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	d005      	beq.n	800115c <HAL_RCC_OscConfig+0x188>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d001      	beq.n	800115c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e2bb      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800115c:	4b6b      	ldr	r3, [pc, #428]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	22f8      	movs	r2, #248	; 0xf8
 8001162:	4393      	bics	r3, r2
 8001164:	0019      	movs	r1, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	00da      	lsls	r2, r3, #3
 800116c:	4b67      	ldr	r3, [pc, #412]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001172:	e041      	b.n	80011f8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d024      	beq.n	80011c6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800117c:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b62      	ldr	r3, [pc, #392]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001182:	2101      	movs	r1, #1
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fcda 	bl	8000b40 <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fcd5 	bl	8000b40 <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e297      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	4b59      	ldr	r3, [pc, #356]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2202      	movs	r2, #2
 80011aa:	4013      	ands	r3, r2
 80011ac:	d0f1      	beq.n	8001192 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b57      	ldr	r3, [pc, #348]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	22f8      	movs	r2, #248	; 0xf8
 80011b4:	4393      	bics	r3, r2
 80011b6:	0019      	movs	r1, r3
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	00da      	lsls	r2, r3, #3
 80011be:	4b53      	ldr	r3, [pc, #332]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80011c0:	430a      	orrs	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	e018      	b.n	80011f8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c6:	4b51      	ldr	r3, [pc, #324]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	438a      	bics	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d2:	f7ff fcb5 	bl	8000b40 <HAL_GetTick>
 80011d6:	0003      	movs	r3, r0
 80011d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011dc:	f7ff fcb0 	bl	8000b40 <HAL_GetTick>
 80011e0:	0002      	movs	r2, r0
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e272      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ee:	4b47      	ldr	r3, [pc, #284]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2202      	movs	r2, #2
 80011f4:	4013      	ands	r3, r2
 80011f6:	d1f1      	bne.n	80011dc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2208      	movs	r2, #8
 80011fe:	4013      	ands	r3, r2
 8001200:	d036      	beq.n	8001270 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d019      	beq.n	800123e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4b40      	ldr	r3, [pc, #256]	; (800130c <HAL_RCC_OscConfig+0x338>)
 800120c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001210:	2101      	movs	r1, #1
 8001212:	430a      	orrs	r2, r1
 8001214:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001216:	f7ff fc93 	bl	8000b40 <HAL_GetTick>
 800121a:	0003      	movs	r3, r0
 800121c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fc8e 	bl	8000b40 <HAL_GetTick>
 8001224:	0002      	movs	r2, r0
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e250      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001232:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	2202      	movs	r2, #2
 8001238:	4013      	ands	r3, r2
 800123a:	d0f1      	beq.n	8001220 <HAL_RCC_OscConfig+0x24c>
 800123c:	e018      	b.n	8001270 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123e:	4b33      	ldr	r3, [pc, #204]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001240:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001242:	4b32      	ldr	r3, [pc, #200]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001244:	2101      	movs	r1, #1
 8001246:	438a      	bics	r2, r1
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fc79 	bl	8000b40 <HAL_GetTick>
 800124e:	0003      	movs	r3, r0
 8001250:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001254:	f7ff fc74 	bl	8000b40 <HAL_GetTick>
 8001258:	0002      	movs	r2, r0
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b02      	cmp	r3, #2
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e236      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001266:	4b29      	ldr	r3, [pc, #164]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d1f1      	bne.n	8001254 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2204      	movs	r2, #4
 8001276:	4013      	ands	r3, r2
 8001278:	d100      	bne.n	800127c <HAL_RCC_OscConfig+0x2a8>
 800127a:	e0b5      	b.n	80013e8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800127c:	201f      	movs	r0, #31
 800127e:	183b      	adds	r3, r7, r0
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001284:	4b21      	ldr	r3, [pc, #132]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001286:	69da      	ldr	r2, [r3, #28]
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	055b      	lsls	r3, r3, #21
 800128c:	4013      	ands	r3, r2
 800128e:	d110      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	4b1e      	ldr	r3, [pc, #120]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001292:	69da      	ldr	r2, [r3, #28]
 8001294:	4b1d      	ldr	r3, [pc, #116]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001296:	2180      	movs	r1, #128	; 0x80
 8001298:	0549      	lsls	r1, r1, #21
 800129a:	430a      	orrs	r2, r1
 800129c:	61da      	str	r2, [r3, #28]
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80012a0:	69da      	ldr	r2, [r3, #28]
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	055b      	lsls	r3, r3, #21
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012ac:	183b      	adds	r3, r7, r0
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_RCC_OscConfig+0x344>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4013      	ands	r3, r2
 80012bc:	d11a      	bne.n	80012f4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_RCC_OscConfig+0x344>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4b15      	ldr	r3, [pc, #84]	; (8001318 <HAL_RCC_OscConfig+0x344>)
 80012c4:	2180      	movs	r1, #128	; 0x80
 80012c6:	0049      	lsls	r1, r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012cc:	f7ff fc38 	bl	8000b40 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d6:	f7ff fc33 	bl	8000b40 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b64      	cmp	r3, #100	; 0x64
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e1f5      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <HAL_RCC_OscConfig+0x344>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	2380      	movs	r3, #128	; 0x80
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d0f0      	beq.n	80012d6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d10f      	bne.n	800131c <HAL_RCC_OscConfig+0x348>
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_RCC_OscConfig+0x338>)
 80012fe:	6a1a      	ldr	r2, [r3, #32]
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <HAL_RCC_OscConfig+0x338>)
 8001302:	2101      	movs	r1, #1
 8001304:	430a      	orrs	r2, r1
 8001306:	621a      	str	r2, [r3, #32]
 8001308:	e036      	b.n	8001378 <HAL_RCC_OscConfig+0x3a4>
 800130a:	46c0      	nop			; (mov r8, r8)
 800130c:	40021000 	.word	0x40021000
 8001310:	fffeffff 	.word	0xfffeffff
 8001314:	fffbffff 	.word	0xfffbffff
 8001318:	40007000 	.word	0x40007000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d10c      	bne.n	800133e <HAL_RCC_OscConfig+0x36a>
 8001324:	4bca      	ldr	r3, [pc, #808]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	4bc9      	ldr	r3, [pc, #804]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800132a:	2101      	movs	r1, #1
 800132c:	438a      	bics	r2, r1
 800132e:	621a      	str	r2, [r3, #32]
 8001330:	4bc7      	ldr	r3, [pc, #796]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001332:	6a1a      	ldr	r2, [r3, #32]
 8001334:	4bc6      	ldr	r3, [pc, #792]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001336:	2104      	movs	r1, #4
 8001338:	438a      	bics	r2, r1
 800133a:	621a      	str	r2, [r3, #32]
 800133c:	e01c      	b.n	8001378 <HAL_RCC_OscConfig+0x3a4>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d10c      	bne.n	8001360 <HAL_RCC_OscConfig+0x38c>
 8001346:	4bc2      	ldr	r3, [pc, #776]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	4bc1      	ldr	r3, [pc, #772]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800134c:	2104      	movs	r1, #4
 800134e:	430a      	orrs	r2, r1
 8001350:	621a      	str	r2, [r3, #32]
 8001352:	4bbf      	ldr	r3, [pc, #764]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001354:	6a1a      	ldr	r2, [r3, #32]
 8001356:	4bbe      	ldr	r3, [pc, #760]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001358:	2101      	movs	r1, #1
 800135a:	430a      	orrs	r2, r1
 800135c:	621a      	str	r2, [r3, #32]
 800135e:	e00b      	b.n	8001378 <HAL_RCC_OscConfig+0x3a4>
 8001360:	4bbb      	ldr	r3, [pc, #748]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001362:	6a1a      	ldr	r2, [r3, #32]
 8001364:	4bba      	ldr	r3, [pc, #744]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001366:	2101      	movs	r1, #1
 8001368:	438a      	bics	r2, r1
 800136a:	621a      	str	r2, [r3, #32]
 800136c:	4bb8      	ldr	r3, [pc, #736]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800136e:	6a1a      	ldr	r2, [r3, #32]
 8001370:	4bb7      	ldr	r3, [pc, #732]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001372:	2104      	movs	r1, #4
 8001374:	438a      	bics	r2, r1
 8001376:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d014      	beq.n	80013aa <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001380:	f7ff fbde 	bl	8000b40 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001388:	e009      	b.n	800139e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800138a:	f7ff fbd9 	bl	8000b40 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	4aaf      	ldr	r2, [pc, #700]	; (8001654 <HAL_RCC_OscConfig+0x680>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e19a      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	4bac      	ldr	r3, [pc, #688]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	2202      	movs	r2, #2
 80013a4:	4013      	ands	r3, r2
 80013a6:	d0f0      	beq.n	800138a <HAL_RCC_OscConfig+0x3b6>
 80013a8:	e013      	b.n	80013d2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013aa:	f7ff fbc9 	bl	8000b40 <HAL_GetTick>
 80013ae:	0003      	movs	r3, r0
 80013b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b2:	e009      	b.n	80013c8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b4:	f7ff fbc4 	bl	8000b40 <HAL_GetTick>
 80013b8:	0002      	movs	r2, r0
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	4aa5      	ldr	r2, [pc, #660]	; (8001654 <HAL_RCC_OscConfig+0x680>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e185      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c8:	4ba1      	ldr	r3, [pc, #644]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	6a1b      	ldr	r3, [r3, #32]
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d1f0      	bne.n	80013b4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013d2:	231f      	movs	r3, #31
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	4b9c      	ldr	r3, [pc, #624]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	4b9b      	ldr	r3, [pc, #620]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80013e2:	499d      	ldr	r1, [pc, #628]	; (8001658 <HAL_RCC_OscConfig+0x684>)
 80013e4:	400a      	ands	r2, r1
 80013e6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2210      	movs	r2, #16
 80013ee:	4013      	ands	r3, r2
 80013f0:	d063      	beq.n	80014ba <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d12a      	bne.n	8001450 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80013fa:	4b95      	ldr	r3, [pc, #596]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013fe:	4b94      	ldr	r3, [pc, #592]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001400:	2104      	movs	r1, #4
 8001402:	430a      	orrs	r2, r1
 8001404:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001406:	4b92      	ldr	r3, [pc, #584]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001408:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800140c:	2101      	movs	r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fb95 	bl	8000b40 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800141c:	f7ff fb90 	bl	8000b40 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e152      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800142e:	4b88      	ldr	r3, [pc, #544]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d0f1      	beq.n	800141c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001438:	4b85      	ldr	r3, [pc, #532]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800143c:	22f8      	movs	r2, #248	; 0xf8
 800143e:	4393      	bics	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	00da      	lsls	r2, r3, #3
 8001448:	4b81      	ldr	r3, [pc, #516]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800144a:	430a      	orrs	r2, r1
 800144c:	635a      	str	r2, [r3, #52]	; 0x34
 800144e:	e034      	b.n	80014ba <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	3305      	adds	r3, #5
 8001456:	d111      	bne.n	800147c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001458:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800145a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800145c:	4b7c      	ldr	r3, [pc, #496]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800145e:	2104      	movs	r1, #4
 8001460:	438a      	bics	r2, r1
 8001462:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001464:	4b7a      	ldr	r3, [pc, #488]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001468:	22f8      	movs	r2, #248	; 0xf8
 800146a:	4393      	bics	r3, r2
 800146c:	0019      	movs	r1, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	00da      	lsls	r2, r3, #3
 8001474:	4b76      	ldr	r3, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001476:	430a      	orrs	r2, r1
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
 800147a:	e01e      	b.n	80014ba <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800147c:	4b74      	ldr	r3, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800147e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001480:	4b73      	ldr	r3, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001482:	2104      	movs	r1, #4
 8001484:	430a      	orrs	r2, r1
 8001486:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001488:	4b71      	ldr	r3, [pc, #452]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800148a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148c:	4b70      	ldr	r3, [pc, #448]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800148e:	2101      	movs	r1, #1
 8001490:	438a      	bics	r2, r1
 8001492:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001494:	f7ff fb54 	bl	8000b40 <HAL_GetTick>
 8001498:	0003      	movs	r3, r0
 800149a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800149c:	e008      	b.n	80014b0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800149e:	f7ff fb4f 	bl	8000b40 <HAL_GetTick>
 80014a2:	0002      	movs	r2, r0
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e111      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80014b0:	4b67      	ldr	r3, [pc, #412]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b4:	2202      	movs	r2, #2
 80014b6:	4013      	ands	r3, r2
 80014b8:	d1f1      	bne.n	800149e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2220      	movs	r2, #32
 80014c0:	4013      	ands	r3, r2
 80014c2:	d05c      	beq.n	800157e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014c4:	4b62      	ldr	r3, [pc, #392]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	220c      	movs	r2, #12
 80014ca:	4013      	ands	r3, r2
 80014cc:	2b0c      	cmp	r3, #12
 80014ce:	d00e      	beq.n	80014ee <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014d0:	4b5f      	ldr	r3, [pc, #380]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	220c      	movs	r2, #12
 80014d6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d114      	bne.n	8001506 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80014dc:	4b5c      	ldr	r3, [pc, #368]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	23c0      	movs	r3, #192	; 0xc0
 80014e2:	025b      	lsls	r3, r3, #9
 80014e4:	401a      	ands	r2, r3
 80014e6:	23c0      	movs	r3, #192	; 0xc0
 80014e8:	025b      	lsls	r3, r3, #9
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d10b      	bne.n	8001506 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80014ee:	4b58      	ldr	r3, [pc, #352]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80014f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	025b      	lsls	r3, r3, #9
 80014f6:	4013      	ands	r3, r2
 80014f8:	d040      	beq.n	800157c <HAL_RCC_OscConfig+0x5a8>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a1b      	ldr	r3, [r3, #32]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d03c      	beq.n	800157c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e0e6      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d01b      	beq.n	8001546 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800150e:	4b50      	ldr	r3, [pc, #320]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001512:	4b4f      	ldr	r3, [pc, #316]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	0249      	lsls	r1, r1, #9
 8001518:	430a      	orrs	r2, r1
 800151a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151c:	f7ff fb10 	bl	8000b40 <HAL_GetTick>
 8001520:	0003      	movs	r3, r0
 8001522:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001524:	e008      	b.n	8001538 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001526:	f7ff fb0b 	bl	8000b40 <HAL_GetTick>
 800152a:	0002      	movs	r2, r0
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0cd      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001538:	4b45      	ldr	r3, [pc, #276]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800153a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	025b      	lsls	r3, r3, #9
 8001540:	4013      	ands	r3, r2
 8001542:	d0f0      	beq.n	8001526 <HAL_RCC_OscConfig+0x552>
 8001544:	e01b      	b.n	800157e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154a:	4b41      	ldr	r3, [pc, #260]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800154c:	4943      	ldr	r1, [pc, #268]	; (800165c <HAL_RCC_OscConfig+0x688>)
 800154e:	400a      	ands	r2, r1
 8001550:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001552:	f7ff faf5 	bl	8000b40 <HAL_GetTick>
 8001556:	0003      	movs	r3, r0
 8001558:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800155c:	f7ff faf0 	bl	8000b40 <HAL_GetTick>
 8001560:	0002      	movs	r2, r0
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e0b2      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800156e:	4b38      	ldr	r3, [pc, #224]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	025b      	lsls	r3, r3, #9
 8001576:	4013      	ands	r3, r2
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x588>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800157c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001582:	2b00      	cmp	r3, #0
 8001584:	d100      	bne.n	8001588 <HAL_RCC_OscConfig+0x5b4>
 8001586:	e0a4      	b.n	80016d2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	220c      	movs	r2, #12
 800158e:	4013      	ands	r3, r2
 8001590:	2b08      	cmp	r3, #8
 8001592:	d100      	bne.n	8001596 <HAL_RCC_OscConfig+0x5c2>
 8001594:	e078      	b.n	8001688 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	2b02      	cmp	r3, #2
 800159c:	d14c      	bne.n	8001638 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b2b      	ldr	r3, [pc, #172]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80015a4:	492e      	ldr	r1, [pc, #184]	; (8001660 <HAL_RCC_OscConfig+0x68c>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fac9 	bl	8000b40 <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff fac4 	bl	8000b40 <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e086      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015c6:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	049b      	lsls	r3, r3, #18
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015d2:	4b1f      	ldr	r3, [pc, #124]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80015d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d6:	220f      	movs	r2, #15
 80015d8:	4393      	bics	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e0:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80015e2:	430a      	orrs	r2, r1
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
 80015e6:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a1e      	ldr	r2, [pc, #120]	; (8001664 <HAL_RCC_OscConfig+0x690>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	431a      	orrs	r2, r3
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	0449      	lsls	r1, r1, #17
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff fa97 	bl	8000b40 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff fa92 	bl	8000b40 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e054      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	4013      	ands	r3, r2
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x644>
 8001636:	e04c      	b.n	80016d2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_RCC_OscConfig+0x67c>)
 800163e:	4908      	ldr	r1, [pc, #32]	; (8001660 <HAL_RCC_OscConfig+0x68c>)
 8001640:	400a      	ands	r2, r1
 8001642:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fa7c 	bl	8000b40 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x6a6>
 800164e:	46c0      	nop			; (mov r8, r8)
 8001650:	40021000 	.word	0x40021000
 8001654:	00001388 	.word	0x00001388
 8001658:	efffffff 	.word	0xefffffff
 800165c:	fffeffff 	.word	0xfffeffff
 8001660:	feffffff 	.word	0xfeffffff
 8001664:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001668:	f7ff fa6a 	bl	8000b40 <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e02c      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_RCC_OscConfig+0x708>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	049b      	lsls	r3, r3, #18
 8001682:	4013      	ands	r3, r2
 8001684:	d1f0      	bne.n	8001668 <HAL_RCC_OscConfig+0x694>
 8001686:	e024      	b.n	80016d2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e01f      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <HAL_RCC_OscConfig+0x708>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_RCC_OscConfig+0x708>)
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	23c0      	movs	r3, #192	; 0xc0
 80016a4:	025b      	lsls	r3, r3, #9
 80016a6:	401a      	ands	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d10e      	bne.n	80016ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	220f      	movs	r2, #15
 80016b4:	401a      	ands	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	23f0      	movs	r3, #240	; 0xf0
 80016c2:	039b      	lsls	r3, r3, #14
 80016c4:	401a      	ands	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d001      	beq.n	80016d2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e000      	b.n	80016d4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	0018      	movs	r0, r3
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b008      	add	sp, #32
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000

080016e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0bf      	b.n	8001874 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b61      	ldr	r3, [pc, #388]	; (800187c <HAL_RCC_ClockConfig+0x19c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2201      	movs	r2, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d911      	bls.n	8001726 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b5e      	ldr	r3, [pc, #376]	; (800187c <HAL_RCC_ClockConfig+0x19c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2201      	movs	r2, #1
 8001708:	4393      	bics	r3, r2
 800170a:	0019      	movs	r1, r3
 800170c:	4b5b      	ldr	r3, [pc, #364]	; (800187c <HAL_RCC_ClockConfig+0x19c>)
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001714:	4b59      	ldr	r3, [pc, #356]	; (800187c <HAL_RCC_ClockConfig+0x19c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2201      	movs	r2, #1
 800171a:	4013      	ands	r3, r2
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d001      	beq.n	8001726 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e0a6      	b.n	8001874 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2202      	movs	r2, #2
 800172c:	4013      	ands	r3, r2
 800172e:	d015      	beq.n	800175c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2204      	movs	r2, #4
 8001736:	4013      	ands	r3, r2
 8001738:	d006      	beq.n	8001748 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800173a:	4b51      	ldr	r3, [pc, #324]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 8001740:	21e0      	movs	r1, #224	; 0xe0
 8001742:	00c9      	lsls	r1, r1, #3
 8001744:	430a      	orrs	r2, r1
 8001746:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001748:	4b4d      	ldr	r3, [pc, #308]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	22f0      	movs	r2, #240	; 0xf0
 800174e:	4393      	bics	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 8001758:	430a      	orrs	r2, r1
 800175a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	d04c      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176e:	4b44      	ldr	r3, [pc, #272]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	029b      	lsls	r3, r3, #10
 8001776:	4013      	ands	r3, r2
 8001778:	d120      	bne.n	80017bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e07a      	b.n	8001874 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001786:	4b3e      	ldr	r3, [pc, #248]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	2380      	movs	r3, #128	; 0x80
 800178c:	049b      	lsls	r3, r3, #18
 800178e:	4013      	ands	r3, r2
 8001790:	d114      	bne.n	80017bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e06e      	b.n	8001874 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800179e:	4b38      	ldr	r3, [pc, #224]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 80017a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a2:	2380      	movs	r3, #128	; 0x80
 80017a4:	025b      	lsls	r3, r3, #9
 80017a6:	4013      	ands	r3, r2
 80017a8:	d108      	bne.n	80017bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e062      	b.n	8001874 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2202      	movs	r2, #2
 80017b4:	4013      	ands	r3, r2
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e05b      	b.n	8001874 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017bc:	4b30      	ldr	r3, [pc, #192]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2203      	movs	r2, #3
 80017c2:	4393      	bics	r3, r2
 80017c4:	0019      	movs	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 80017cc:	430a      	orrs	r2, r1
 80017ce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff f9b6 	bl	8000b40 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d8:	e009      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017da:	f7ff f9b1 	bl	8000b40 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4a27      	ldr	r2, [pc, #156]	; (8001884 <HAL_RCC_ClockConfig+0x1a4>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e042      	b.n	8001874 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	220c      	movs	r2, #12
 80017f4:	401a      	ands	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1ec      	bne.n	80017da <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_ClockConfig+0x19c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d211      	bcs.n	8001832 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b1b      	ldr	r3, [pc, #108]	; (800187c <HAL_RCC_ClockConfig+0x19c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2201      	movs	r2, #1
 8001814:	4393      	bics	r3, r2
 8001816:	0019      	movs	r1, r3
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <HAL_RCC_ClockConfig+0x19c>)
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <HAL_RCC_ClockConfig+0x19c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2201      	movs	r2, #1
 8001826:	4013      	ands	r3, r2
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	429a      	cmp	r2, r3
 800182c:	d001      	beq.n	8001832 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e020      	b.n	8001874 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2204      	movs	r2, #4
 8001838:	4013      	ands	r3, r2
 800183a:	d009      	beq.n	8001850 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <HAL_RCC_ClockConfig+0x1a8>)
 8001842:	4013      	ands	r3, r2
 8001844:	0019      	movs	r1, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	4b0d      	ldr	r3, [pc, #52]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001850:	f000 f820 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8001854:	0001      	movs	r1, r0
 8001856:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <HAL_RCC_ClockConfig+0x1a0>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	091b      	lsrs	r3, r3, #4
 800185c:	220f      	movs	r2, #15
 800185e:	4013      	ands	r3, r2
 8001860:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1ac>)
 8001862:	5cd3      	ldrb	r3, [r2, r3]
 8001864:	000a      	movs	r2, r1
 8001866:	40da      	lsrs	r2, r3
 8001868:	4b09      	ldr	r3, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1b0>)
 800186a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800186c:	2003      	movs	r0, #3
 800186e:	f7ff f921 	bl	8000ab4 <HAL_InitTick>
  
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	0018      	movs	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	b004      	add	sp, #16
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40022000 	.word	0x40022000
 8001880:	40021000 	.word	0x40021000
 8001884:	00001388 	.word	0x00001388
 8001888:	fffff8ff 	.word	0xfffff8ff
 800188c:	08003a74 	.word	0x08003a74
 8001890:	20000000 	.word	0x20000000

08001894 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001894:	b590      	push	{r4, r7, lr}
 8001896:	b08f      	sub	sp, #60	; 0x3c
 8001898:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800189a:	2314      	movs	r3, #20
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	4a38      	ldr	r2, [pc, #224]	; (8001980 <HAL_RCC_GetSysClockFreq+0xec>)
 80018a0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018a2:	c313      	stmia	r3!, {r0, r1, r4}
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	4a36      	ldr	r2, [pc, #216]	; (8001984 <HAL_RCC_GetSysClockFreq+0xf0>)
 80018ac:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018ae:	c313      	stmia	r3!, {r0, r1, r4}
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80018bc:	2300      	movs	r3, #0
 80018be:	637b      	str	r3, [r7, #52]	; 0x34
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80018c8:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d0:	220c      	movs	r2, #12
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b0c      	cmp	r3, #12
 80018d6:	d047      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0xd4>
 80018d8:	d849      	bhi.n	800196e <HAL_RCC_GetSysClockFreq+0xda>
 80018da:	2b04      	cmp	r3, #4
 80018dc:	d002      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x50>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_GetSysClockFreq+0x56>
 80018e2:	e044      	b.n	800196e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e4:	4b29      	ldr	r3, [pc, #164]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 80018e6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018e8:	e044      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80018ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ec:	0c9b      	lsrs	r3, r3, #18
 80018ee:	220f      	movs	r2, #15
 80018f0:	4013      	ands	r3, r2
 80018f2:	2214      	movs	r2, #20
 80018f4:	18ba      	adds	r2, r7, r2
 80018f6:	5cd3      	ldrb	r3, [r2, r3]
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80018fa:	4b23      	ldr	r3, [pc, #140]	; (8001988 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	220f      	movs	r2, #15
 8001900:	4013      	ands	r3, r2
 8001902:	1d3a      	adds	r2, r7, #4
 8001904:	5cd3      	ldrb	r3, [r2, r3]
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190a:	23c0      	movs	r3, #192	; 0xc0
 800190c:	025b      	lsls	r3, r3, #9
 800190e:	401a      	ands	r2, r3
 8001910:	2380      	movs	r3, #128	; 0x80
 8001912:	025b      	lsls	r3, r3, #9
 8001914:	429a      	cmp	r2, r3
 8001916:	d109      	bne.n	800192c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800191a:	481c      	ldr	r0, [pc, #112]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 800191c:	f7fe fbfc 	bl	8000118 <__udivsi3>
 8001920:	0003      	movs	r3, r0
 8001922:	001a      	movs	r2, r3
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	4353      	muls	r3, r2
 8001928:	637b      	str	r3, [r7, #52]	; 0x34
 800192a:	e01a      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800192c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800192e:	23c0      	movs	r3, #192	; 0xc0
 8001930:	025b      	lsls	r3, r3, #9
 8001932:	401a      	ands	r2, r3
 8001934:	23c0      	movs	r3, #192	; 0xc0
 8001936:	025b      	lsls	r3, r3, #9
 8001938:	429a      	cmp	r2, r3
 800193a:	d109      	bne.n	8001950 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800193c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800193e:	4814      	ldr	r0, [pc, #80]	; (8001990 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001940:	f7fe fbea 	bl	8000118 <__udivsi3>
 8001944:	0003      	movs	r3, r0
 8001946:	001a      	movs	r2, r3
 8001948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194a:	4353      	muls	r3, r2
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
 800194e:	e008      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001952:	480e      	ldr	r0, [pc, #56]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001954:	f7fe fbe0 	bl	8000118 <__udivsi3>
 8001958:	0003      	movs	r3, r0
 800195a:	001a      	movs	r2, r3
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	4353      	muls	r3, r2
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001966:	e005      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_GetSysClockFreq+0xfc>)
 800196a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800196c:	e002      	b.n	8001974 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001970:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001972:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001976:	0018      	movs	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	b00f      	add	sp, #60	; 0x3c
 800197c:	bd90      	pop	{r4, r7, pc}
 800197e:	46c0      	nop			; (mov r8, r8)
 8001980:	08003a54 	.word	0x08003a54
 8001984:	08003a64 	.word	0x08003a64
 8001988:	40021000 	.word	0x40021000
 800198c:	007a1200 	.word	0x007a1200
 8001990:	02dc6c00 	.word	0x02dc6c00

08001994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001998:	4b02      	ldr	r3, [pc, #8]	; (80019a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	20000000 	.word	0x20000000

080019a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80019ac:	f7ff fff2 	bl	8001994 <HAL_RCC_GetHCLKFreq>
 80019b0:	0001      	movs	r1, r0
 80019b2:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	0a1b      	lsrs	r3, r3, #8
 80019b8:	2207      	movs	r2, #7
 80019ba:	4013      	ands	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019be:	5cd3      	ldrb	r3, [r2, r3]
 80019c0:	40d9      	lsrs	r1, r3
 80019c2:	000b      	movs	r3, r1
}    
 80019c4:	0018      	movs	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	40021000 	.word	0x40021000
 80019d0:	08003a84 	.word	0x08003a84

080019d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e042      	b.n	8001a6c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	223d      	movs	r2, #61	; 0x3d
 80019ea:	5c9b      	ldrb	r3, [r3, r2]
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d107      	bne.n	8001a02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	223c      	movs	r2, #60	; 0x3c
 80019f6:	2100      	movs	r1, #0
 80019f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7fe ff29 	bl	8000854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	223d      	movs	r2, #61	; 0x3d
 8001a06:	2102      	movs	r1, #2
 8001a08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	3304      	adds	r3, #4
 8001a12:	0019      	movs	r1, r3
 8001a14:	0010      	movs	r0, r2
 8001a16:	f000 fb0f 	bl	8002038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2246      	movs	r2, #70	; 0x46
 8001a1e:	2101      	movs	r1, #1
 8001a20:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	223e      	movs	r2, #62	; 0x3e
 8001a26:	2101      	movs	r1, #1
 8001a28:	5499      	strb	r1, [r3, r2]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	223f      	movs	r2, #63	; 0x3f
 8001a2e:	2101      	movs	r1, #1
 8001a30:	5499      	strb	r1, [r3, r2]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	2101      	movs	r1, #1
 8001a38:	5499      	strb	r1, [r3, r2]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2241      	movs	r2, #65	; 0x41
 8001a3e:	2101      	movs	r1, #1
 8001a40:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2242      	movs	r2, #66	; 0x42
 8001a46:	2101      	movs	r1, #1
 8001a48:	5499      	strb	r1, [r3, r2]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2243      	movs	r2, #67	; 0x43
 8001a4e:	2101      	movs	r1, #1
 8001a50:	5499      	strb	r1, [r3, r2]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2244      	movs	r2, #68	; 0x44
 8001a56:	2101      	movs	r1, #1
 8001a58:	5499      	strb	r1, [r3, r2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2245      	movs	r2, #69	; 0x45
 8001a5e:	2101      	movs	r1, #1
 8001a60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	223d      	movs	r2, #61	; 0x3d
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	b002      	add	sp, #8
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	223d      	movs	r2, #61	; 0x3d
 8001a80:	5c9b      	ldrb	r3, [r3, r2]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d001      	beq.n	8001a8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e02e      	b.n	8001aea <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	223d      	movs	r2, #61	; 0x3d
 8001a90:	2102      	movs	r1, #2
 8001a92:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <HAL_TIM_Base_Start+0x80>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_TIM_Base_Start+0x40>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	05db      	lsls	r3, r3, #23
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d004      	beq.n	8001ab4 <HAL_TIM_Base_Start+0x40>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <HAL_TIM_Base_Start+0x84>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d111      	bne.n	8001ad8 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4013      	ands	r3, r2
 8001abe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d010      	beq.n	8001ae8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ad6:	e007      	b.n	8001ae8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	0018      	movs	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	b004      	add	sp, #16
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	40012c00 	.word	0x40012c00
 8001af8:	40000400 	.word	0x40000400

08001afc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e042      	b.n	8001b94 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	223d      	movs	r2, #61	; 0x3d
 8001b12:	5c9b      	ldrb	r3, [r3, r2]
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d107      	bne.n	8001b2a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	223c      	movs	r2, #60	; 0x3c
 8001b1e:	2100      	movs	r1, #0
 8001b20:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	0018      	movs	r0, r3
 8001b26:	f000 f839 	bl	8001b9c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	223d      	movs	r2, #61	; 0x3d
 8001b2e:	2102      	movs	r1, #2
 8001b30:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	0019      	movs	r1, r3
 8001b3c:	0010      	movs	r0, r2
 8001b3e:	f000 fa7b 	bl	8002038 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2246      	movs	r2, #70	; 0x46
 8001b46:	2101      	movs	r1, #1
 8001b48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	223e      	movs	r2, #62	; 0x3e
 8001b4e:	2101      	movs	r1, #1
 8001b50:	5499      	strb	r1, [r3, r2]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	223f      	movs	r2, #63	; 0x3f
 8001b56:	2101      	movs	r1, #1
 8001b58:	5499      	strb	r1, [r3, r2]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2240      	movs	r2, #64	; 0x40
 8001b5e:	2101      	movs	r1, #1
 8001b60:	5499      	strb	r1, [r3, r2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2241      	movs	r2, #65	; 0x41
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2242      	movs	r2, #66	; 0x42
 8001b6e:	2101      	movs	r1, #1
 8001b70:	5499      	strb	r1, [r3, r2]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2243      	movs	r2, #67	; 0x43
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2244      	movs	r2, #68	; 0x44
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2245      	movs	r2, #69	; 0x45
 8001b86:	2101      	movs	r1, #1
 8001b88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223d      	movs	r2, #61	; 0x3d
 8001b8e:	2101      	movs	r1, #1
 8001b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d108      	bne.n	8001bce <HAL_TIM_PWM_Start+0x22>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	223e      	movs	r2, #62	; 0x3e
 8001bc0:	5c9b      	ldrb	r3, [r3, r2]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	1e5a      	subs	r2, r3, #1
 8001bc8:	4193      	sbcs	r3, r2
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	e01f      	b.n	8001c0e <HAL_TIM_PWM_Start+0x62>
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	2b04      	cmp	r3, #4
 8001bd2:	d108      	bne.n	8001be6 <HAL_TIM_PWM_Start+0x3a>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	223f      	movs	r2, #63	; 0x3f
 8001bd8:	5c9b      	ldrb	r3, [r3, r2]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	1e5a      	subs	r2, r3, #1
 8001be0:	4193      	sbcs	r3, r2
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	e013      	b.n	8001c0e <HAL_TIM_PWM_Start+0x62>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d108      	bne.n	8001bfe <HAL_TIM_PWM_Start+0x52>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2240      	movs	r2, #64	; 0x40
 8001bf0:	5c9b      	ldrb	r3, [r3, r2]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	1e5a      	subs	r2, r3, #1
 8001bf8:	4193      	sbcs	r3, r2
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	e007      	b.n	8001c0e <HAL_TIM_PWM_Start+0x62>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2241      	movs	r2, #65	; 0x41
 8001c02:	5c9b      	ldrb	r3, [r3, r2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	3b01      	subs	r3, #1
 8001c08:	1e5a      	subs	r2, r3, #1
 8001c0a:	4193      	sbcs	r3, r2
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e06a      	b.n	8001cec <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d104      	bne.n	8001c26 <HAL_TIM_PWM_Start+0x7a>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	223e      	movs	r2, #62	; 0x3e
 8001c20:	2102      	movs	r1, #2
 8001c22:	5499      	strb	r1, [r3, r2]
 8001c24:	e013      	b.n	8001c4e <HAL_TIM_PWM_Start+0xa2>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d104      	bne.n	8001c36 <HAL_TIM_PWM_Start+0x8a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	223f      	movs	r2, #63	; 0x3f
 8001c30:	2102      	movs	r1, #2
 8001c32:	5499      	strb	r1, [r3, r2]
 8001c34:	e00b      	b.n	8001c4e <HAL_TIM_PWM_Start+0xa2>
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d104      	bne.n	8001c46 <HAL_TIM_PWM_Start+0x9a>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2240      	movs	r2, #64	; 0x40
 8001c40:	2102      	movs	r1, #2
 8001c42:	5499      	strb	r1, [r3, r2]
 8001c44:	e003      	b.n	8001c4e <HAL_TIM_PWM_Start+0xa2>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2241      	movs	r2, #65	; 0x41
 8001c4a:	2102      	movs	r1, #2
 8001c4c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6839      	ldr	r1, [r7, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	0018      	movs	r0, r3
 8001c58:	f000 fcde 	bl	8002618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a24      	ldr	r2, [pc, #144]	; (8001cf4 <HAL_TIM_PWM_Start+0x148>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d009      	beq.n	8001c7a <HAL_TIM_PWM_Start+0xce>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a23      	ldr	r2, [pc, #140]	; (8001cf8 <HAL_TIM_PWM_Start+0x14c>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d004      	beq.n	8001c7a <HAL_TIM_PWM_Start+0xce>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <HAL_TIM_PWM_Start+0x150>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_TIM_PWM_Start+0xd2>
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e000      	b.n	8001c80 <HAL_TIM_PWM_Start+0xd4>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d008      	beq.n	8001c96 <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	0209      	lsls	r1, r1, #8
 8001c92:	430a      	orrs	r2, r1
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a16      	ldr	r2, [pc, #88]	; (8001cf4 <HAL_TIM_PWM_Start+0x148>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d00a      	beq.n	8001cb6 <HAL_TIM_PWM_Start+0x10a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	05db      	lsls	r3, r3, #23
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d004      	beq.n	8001cb6 <HAL_TIM_PWM_Start+0x10a>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <HAL_TIM_PWM_Start+0x154>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d111      	bne.n	8001cda <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2207      	movs	r2, #7
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b06      	cmp	r3, #6
 8001cc6:	d010      	beq.n	8001cea <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	430a      	orrs	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	e007      	b.n	8001cea <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	0018      	movs	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b004      	add	sp, #16
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40012c00 	.word	0x40012c00
 8001cf8:	40014400 	.word	0x40014400
 8001cfc:	40014800 	.word	0x40014800
 8001d00:	40000400 	.word	0x40000400

08001d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d10:	2317      	movs	r3, #23
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	223c      	movs	r2, #60	; 0x3c
 8001d1c:	5c9b      	ldrb	r3, [r3, r2]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_PWM_ConfigChannel+0x22>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e0ad      	b.n	8001e82 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	223c      	movs	r2, #60	; 0x3c
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	d100      	bne.n	8001d36 <HAL_TIM_PWM_ConfigChannel+0x32>
 8001d34:	e076      	b.n	8001e24 <HAL_TIM_PWM_ConfigChannel+0x120>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2b0c      	cmp	r3, #12
 8001d3a:	d900      	bls.n	8001d3e <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001d3c:	e095      	b.n	8001e6a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d04e      	beq.n	8001de2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d900      	bls.n	8001d4c <HAL_TIM_PWM_ConfigChannel+0x48>
 8001d4a:	e08e      	b.n	8001e6a <HAL_TIM_PWM_ConfigChannel+0x166>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d003      	beq.n	8001d5a <HAL_TIM_PWM_ConfigChannel+0x56>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d021      	beq.n	8001d9c <HAL_TIM_PWM_ConfigChannel+0x98>
 8001d58:	e087      	b.n	8001e6a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	0011      	movs	r1, r2
 8001d62:	0018      	movs	r0, r3
 8001d64:	f000 f9de 	bl	8002124 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699a      	ldr	r2, [r3, #24]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2108      	movs	r1, #8
 8001d74:	430a      	orrs	r2, r1
 8001d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699a      	ldr	r2, [r3, #24]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	2104      	movs	r1, #4
 8001d84:	438a      	bics	r2, r1
 8001d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6999      	ldr	r1, [r3, #24]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	619a      	str	r2, [r3, #24]
      break;
 8001d9a:	e06b      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68ba      	ldr	r2, [r7, #8]
 8001da2:	0011      	movs	r1, r2
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 fa3b 	bl	8002220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699a      	ldr	r2, [r3, #24]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2180      	movs	r1, #128	; 0x80
 8001db6:	0109      	lsls	r1, r1, #4
 8001db8:	430a      	orrs	r2, r1
 8001dba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	699a      	ldr	r2, [r3, #24]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4931      	ldr	r1, [pc, #196]	; (8001e8c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6999      	ldr	r1, [r3, #24]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	021a      	lsls	r2, r3, #8
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	619a      	str	r2, [r3, #24]
      break;
 8001de0:	e048      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68ba      	ldr	r2, [r7, #8]
 8001de8:	0011      	movs	r1, r2
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 fa96 	bl	800231c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	69da      	ldr	r2, [r3, #28]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2108      	movs	r1, #8
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	69da      	ldr	r2, [r3, #28]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2104      	movs	r1, #4
 8001e0c:	438a      	bics	r2, r1
 8001e0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69d9      	ldr	r1, [r3, #28]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	691a      	ldr	r2, [r3, #16]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	61da      	str	r2, [r3, #28]
      break;
 8001e22:	e027      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68ba      	ldr	r2, [r7, #8]
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 faf5 	bl	800241c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	69da      	ldr	r2, [r3, #28]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2180      	movs	r1, #128	; 0x80
 8001e3e:	0109      	lsls	r1, r1, #4
 8001e40:	430a      	orrs	r2, r1
 8001e42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	490f      	ldr	r1, [pc, #60]	; (8001e8c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8001e50:	400a      	ands	r2, r1
 8001e52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69d9      	ldr	r1, [r3, #28]
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	021a      	lsls	r2, r3, #8
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	61da      	str	r2, [r3, #28]
      break;
 8001e68:	e004      	b.n	8001e74 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8001e6a:	2317      	movs	r3, #23
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
      break;
 8001e72:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	223c      	movs	r2, #60	; 0x3c
 8001e78:	2100      	movs	r1, #0
 8001e7a:	5499      	strb	r1, [r3, r2]

  return status;
 8001e7c:	2317      	movs	r3, #23
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	781b      	ldrb	r3, [r3, #0]
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b006      	add	sp, #24
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	fffffbff 	.word	0xfffffbff

08001e90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	18fb      	adds	r3, r7, r3
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	223c      	movs	r2, #60	; 0x3c
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_TIM_ConfigClockSource+0x20>
 8001eac:	2302      	movs	r3, #2
 8001eae:	e0bc      	b.n	800202a <HAL_TIM_ConfigClockSource+0x19a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	223c      	movs	r2, #60	; 0x3c
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	223d      	movs	r2, #61	; 0x3d
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2277      	movs	r2, #119	; 0x77
 8001ecc:	4393      	bics	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4a58      	ldr	r2, [pc, #352]	; (8002034 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	0192      	lsls	r2, r2, #6
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d040      	beq.n	8001f6e <HAL_TIM_ConfigClockSource+0xde>
 8001eec:	2280      	movs	r2, #128	; 0x80
 8001eee:	0192      	lsls	r2, r2, #6
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d900      	bls.n	8001ef6 <HAL_TIM_ConfigClockSource+0x66>
 8001ef4:	e088      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
 8001ef6:	2280      	movs	r2, #128	; 0x80
 8001ef8:	0152      	lsls	r2, r2, #5
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d100      	bne.n	8001f00 <HAL_TIM_ConfigClockSource+0x70>
 8001efe:	e088      	b.n	8002012 <HAL_TIM_ConfigClockSource+0x182>
 8001f00:	2280      	movs	r2, #128	; 0x80
 8001f02:	0152      	lsls	r2, r2, #5
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d900      	bls.n	8001f0a <HAL_TIM_ConfigClockSource+0x7a>
 8001f08:	e07e      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
 8001f0a:	2b70      	cmp	r3, #112	; 0x70
 8001f0c:	d018      	beq.n	8001f40 <HAL_TIM_ConfigClockSource+0xb0>
 8001f0e:	d900      	bls.n	8001f12 <HAL_TIM_ConfigClockSource+0x82>
 8001f10:	e07a      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
 8001f12:	2b60      	cmp	r3, #96	; 0x60
 8001f14:	d04f      	beq.n	8001fb6 <HAL_TIM_ConfigClockSource+0x126>
 8001f16:	d900      	bls.n	8001f1a <HAL_TIM_ConfigClockSource+0x8a>
 8001f18:	e076      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
 8001f1a:	2b50      	cmp	r3, #80	; 0x50
 8001f1c:	d03b      	beq.n	8001f96 <HAL_TIM_ConfigClockSource+0x106>
 8001f1e:	d900      	bls.n	8001f22 <HAL_TIM_ConfigClockSource+0x92>
 8001f20:	e072      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
 8001f22:	2b40      	cmp	r3, #64	; 0x40
 8001f24:	d057      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0x146>
 8001f26:	d900      	bls.n	8001f2a <HAL_TIM_ConfigClockSource+0x9a>
 8001f28:	e06e      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
 8001f2a:	2b30      	cmp	r3, #48	; 0x30
 8001f2c:	d063      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x166>
 8001f2e:	d86b      	bhi.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
 8001f30:	2b20      	cmp	r3, #32
 8001f32:	d060      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x166>
 8001f34:	d868      	bhi.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d05d      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x166>
 8001f3a:	2b10      	cmp	r3, #16
 8001f3c:	d05b      	beq.n	8001ff6 <HAL_TIM_ConfigClockSource+0x166>
 8001f3e:	e063      	b.n	8002008 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6899      	ldr	r1, [r3, #8]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f000 fb42 	bl	80025d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2277      	movs	r2, #119	; 0x77
 8001f60:	4313      	orrs	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	609a      	str	r2, [r3, #8]
      break;
 8001f6c:	e052      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6899      	ldr	r1, [r3, #8]
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685a      	ldr	r2, [r3, #4]
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f000 fb2b 	bl	80025d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	01c9      	lsls	r1, r1, #7
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]
      break;
 8001f94:	e03e      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6818      	ldr	r0, [r3, #0]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	6859      	ldr	r1, [r3, #4]
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	001a      	movs	r2, r3
 8001fa4:	f000 fa9e 	bl	80024e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2150      	movs	r1, #80	; 0x50
 8001fae:	0018      	movs	r0, r3
 8001fb0:	f000 faf8 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 8001fb4:	e02e      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6818      	ldr	r0, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	6859      	ldr	r1, [r3, #4]
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	f000 fabc 	bl	8002540 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2160      	movs	r1, #96	; 0x60
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f000 fae8 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 8001fd4:	e01e      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6859      	ldr	r1, [r3, #4]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	001a      	movs	r2, r3
 8001fe4:	f000 fa7e 	bl	80024e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2140      	movs	r1, #64	; 0x40
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 fad8 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 8001ff4:	e00e      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0019      	movs	r1, r3
 8002000:	0010      	movs	r0, r2
 8002002:	f000 facf 	bl	80025a4 <TIM_ITRx_SetConfig>
      break;
 8002006:	e005      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002008:	230f      	movs	r3, #15
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
      break;
 8002010:	e000      	b.n	8002014 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002012:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	223d      	movs	r2, #61	; 0x3d
 8002018:	2101      	movs	r1, #1
 800201a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	223c      	movs	r2, #60	; 0x3c
 8002020:	2100      	movs	r1, #0
 8002022:	5499      	strb	r1, [r3, r2]

  return status;
 8002024:	230f      	movs	r3, #15
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	781b      	ldrb	r3, [r3, #0]
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	ffff00ff 	.word	0xffff00ff

08002038 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a30      	ldr	r2, [pc, #192]	; (800210c <TIM_Base_SetConfig+0xd4>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d008      	beq.n	8002062 <TIM_Base_SetConfig+0x2a>
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	05db      	lsls	r3, r3, #23
 8002056:	429a      	cmp	r2, r3
 8002058:	d003      	beq.n	8002062 <TIM_Base_SetConfig+0x2a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a2c      	ldr	r2, [pc, #176]	; (8002110 <TIM_Base_SetConfig+0xd8>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d108      	bne.n	8002074 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2270      	movs	r2, #112	; 0x70
 8002066:	4393      	bics	r3, r2
 8002068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	4313      	orrs	r3, r2
 8002072:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a25      	ldr	r2, [pc, #148]	; (800210c <TIM_Base_SetConfig+0xd4>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d014      	beq.n	80020a6 <TIM_Base_SetConfig+0x6e>
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	05db      	lsls	r3, r3, #23
 8002082:	429a      	cmp	r2, r3
 8002084:	d00f      	beq.n	80020a6 <TIM_Base_SetConfig+0x6e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a21      	ldr	r2, [pc, #132]	; (8002110 <TIM_Base_SetConfig+0xd8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00b      	beq.n	80020a6 <TIM_Base_SetConfig+0x6e>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a20      	ldr	r2, [pc, #128]	; (8002114 <TIM_Base_SetConfig+0xdc>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d007      	beq.n	80020a6 <TIM_Base_SetConfig+0x6e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1f      	ldr	r2, [pc, #124]	; (8002118 <TIM_Base_SetConfig+0xe0>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d003      	beq.n	80020a6 <TIM_Base_SetConfig+0x6e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a1e      	ldr	r2, [pc, #120]	; (800211c <TIM_Base_SetConfig+0xe4>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d108      	bne.n	80020b8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	4a1d      	ldr	r2, [pc, #116]	; (8002120 <TIM_Base_SetConfig+0xe8>)
 80020aa:	4013      	ands	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2280      	movs	r2, #128	; 0x80
 80020bc:	4393      	bics	r3, r2
 80020be:	001a      	movs	r2, r3
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	695b      	ldr	r3, [r3, #20]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68fa      	ldr	r2, [r7, #12]
 80020cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a0a      	ldr	r2, [pc, #40]	; (800210c <TIM_Base_SetConfig+0xd4>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d007      	beq.n	80020f6 <TIM_Base_SetConfig+0xbe>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <TIM_Base_SetConfig+0xe0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d003      	beq.n	80020f6 <TIM_Base_SetConfig+0xbe>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a0a      	ldr	r2, [pc, #40]	; (800211c <TIM_Base_SetConfig+0xe4>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d103      	bne.n	80020fe <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	691a      	ldr	r2, [r3, #16]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	615a      	str	r2, [r3, #20]
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b004      	add	sp, #16
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40012c00 	.word	0x40012c00
 8002110:	40000400 	.word	0x40000400
 8002114:	40002000 	.word	0x40002000
 8002118:	40014400 	.word	0x40014400
 800211c:	40014800 	.word	0x40014800
 8002120:	fffffcff 	.word	0xfffffcff

08002124 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	2201      	movs	r2, #1
 8002134:	4393      	bics	r3, r2
 8002136:	001a      	movs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2270      	movs	r2, #112	; 0x70
 8002152:	4393      	bics	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2203      	movs	r2, #3
 800215a:	4393      	bics	r3, r2
 800215c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4313      	orrs	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2202      	movs	r2, #2
 800216c:	4393      	bics	r3, r2
 800216e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	4313      	orrs	r3, r2
 8002178:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a23      	ldr	r2, [pc, #140]	; (800220c <TIM_OC1_SetConfig+0xe8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <TIM_OC1_SetConfig+0x6e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a22      	ldr	r2, [pc, #136]	; (8002210 <TIM_OC1_SetConfig+0xec>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <TIM_OC1_SetConfig+0x6e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a21      	ldr	r2, [pc, #132]	; (8002214 <TIM_OC1_SetConfig+0xf0>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10c      	bne.n	80021ac <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	2208      	movs	r2, #8
 8002196:	4393      	bics	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2204      	movs	r2, #4
 80021a8:	4393      	bics	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a17      	ldr	r2, [pc, #92]	; (800220c <TIM_OC1_SetConfig+0xe8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d007      	beq.n	80021c4 <TIM_OC1_SetConfig+0xa0>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a16      	ldr	r2, [pc, #88]	; (8002210 <TIM_OC1_SetConfig+0xec>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d003      	beq.n	80021c4 <TIM_OC1_SetConfig+0xa0>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a15      	ldr	r2, [pc, #84]	; (8002214 <TIM_OC1_SetConfig+0xf0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d111      	bne.n	80021e8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4a14      	ldr	r2, [pc, #80]	; (8002218 <TIM_OC1_SetConfig+0xf4>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	4a13      	ldr	r2, [pc, #76]	; (800221c <TIM_OC1_SetConfig+0xf8>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	695b      	ldr	r3, [r3, #20]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	621a      	str	r2, [r3, #32]
}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	46bd      	mov	sp, r7
 8002206:	b006      	add	sp, #24
 8002208:	bd80      	pop	{r7, pc}
 800220a:	46c0      	nop			; (mov r8, r8)
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40014400 	.word	0x40014400
 8002214:	40014800 	.word	0x40014800
 8002218:	fffffeff 	.word	0xfffffeff
 800221c:	fffffdff 	.word	0xfffffdff

08002220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	2210      	movs	r2, #16
 8002230:	4393      	bics	r3, r2
 8002232:	001a      	movs	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	4a2c      	ldr	r2, [pc, #176]	; (8002300 <TIM_OC2_SetConfig+0xe0>)
 800224e:	4013      	ands	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a2b      	ldr	r2, [pc, #172]	; (8002304 <TIM_OC2_SetConfig+0xe4>)
 8002256:	4013      	ands	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	4313      	orrs	r3, r2
 8002264:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2220      	movs	r2, #32
 800226a:	4393      	bics	r3, r2
 800226c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a22      	ldr	r2, [pc, #136]	; (8002308 <TIM_OC2_SetConfig+0xe8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10d      	bne.n	800229e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	4393      	bics	r3, r2
 8002288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2240      	movs	r2, #64	; 0x40
 800229a:	4393      	bics	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a19      	ldr	r2, [pc, #100]	; (8002308 <TIM_OC2_SetConfig+0xe8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <TIM_OC2_SetConfig+0x96>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a18      	ldr	r2, [pc, #96]	; (800230c <TIM_OC2_SetConfig+0xec>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d003      	beq.n	80022b6 <TIM_OC2_SetConfig+0x96>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a17      	ldr	r2, [pc, #92]	; (8002310 <TIM_OC2_SetConfig+0xf0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d113      	bne.n	80022de <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	4a16      	ldr	r2, [pc, #88]	; (8002314 <TIM_OC2_SetConfig+0xf4>)
 80022ba:	4013      	ands	r3, r2
 80022bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4a15      	ldr	r2, [pc, #84]	; (8002318 <TIM_OC2_SetConfig+0xf8>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	621a      	str	r2, [r3, #32]
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b006      	add	sp, #24
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	ffff8fff 	.word	0xffff8fff
 8002304:	fffffcff 	.word	0xfffffcff
 8002308:	40012c00 	.word	0x40012c00
 800230c:	40014400 	.word	0x40014400
 8002310:	40014800 	.word	0x40014800
 8002314:	fffffbff 	.word	0xfffffbff
 8002318:	fffff7ff 	.word	0xfffff7ff

0800231c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a1b      	ldr	r3, [r3, #32]
 800232a:	4a33      	ldr	r2, [pc, #204]	; (80023f8 <TIM_OC3_SetConfig+0xdc>)
 800232c:	401a      	ands	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2270      	movs	r2, #112	; 0x70
 8002348:	4393      	bics	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2203      	movs	r2, #3
 8002350:	4393      	bics	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	4a26      	ldr	r2, [pc, #152]	; (80023fc <TIM_OC3_SetConfig+0xe0>)
 8002362:	4013      	ands	r3, r2
 8002364:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	697a      	ldr	r2, [r7, #20]
 800236e:	4313      	orrs	r3, r2
 8002370:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <TIM_OC3_SetConfig+0xe4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10d      	bne.n	8002396 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	4a21      	ldr	r2, [pc, #132]	; (8002404 <TIM_OC3_SetConfig+0xe8>)
 800237e:	4013      	ands	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	4a1d      	ldr	r2, [pc, #116]	; (8002408 <TIM_OC3_SetConfig+0xec>)
 8002392:	4013      	ands	r3, r2
 8002394:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <TIM_OC3_SetConfig+0xe4>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d007      	beq.n	80023ae <TIM_OC3_SetConfig+0x92>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a1a      	ldr	r2, [pc, #104]	; (800240c <TIM_OC3_SetConfig+0xf0>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d003      	beq.n	80023ae <TIM_OC3_SetConfig+0x92>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a19      	ldr	r2, [pc, #100]	; (8002410 <TIM_OC3_SetConfig+0xf4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d113      	bne.n	80023d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4a18      	ldr	r2, [pc, #96]	; (8002414 <TIM_OC3_SetConfig+0xf8>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4a17      	ldr	r2, [pc, #92]	; (8002418 <TIM_OC3_SetConfig+0xfc>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	621a      	str	r2, [r3, #32]
}
 80023f0:	46c0      	nop			; (mov r8, r8)
 80023f2:	46bd      	mov	sp, r7
 80023f4:	b006      	add	sp, #24
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	fffffeff 	.word	0xfffffeff
 80023fc:	fffffdff 	.word	0xfffffdff
 8002400:	40012c00 	.word	0x40012c00
 8002404:	fffff7ff 	.word	0xfffff7ff
 8002408:	fffffbff 	.word	0xfffffbff
 800240c:	40014400 	.word	0x40014400
 8002410:	40014800 	.word	0x40014800
 8002414:	ffffefff 	.word	0xffffefff
 8002418:	ffffdfff 	.word	0xffffdfff

0800241c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	4a26      	ldr	r2, [pc, #152]	; (80024c4 <TIM_OC4_SetConfig+0xa8>)
 800242c:	401a      	ands	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4a20      	ldr	r2, [pc, #128]	; (80024c8 <TIM_OC4_SetConfig+0xac>)
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4a1f      	ldr	r2, [pc, #124]	; (80024cc <TIM_OC4_SetConfig+0xb0>)
 8002450:	4013      	ands	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4313      	orrs	r3, r2
 800245e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <TIM_OC4_SetConfig+0xb4>)
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	031b      	lsls	r3, r3, #12
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a17      	ldr	r2, [pc, #92]	; (80024d4 <TIM_OC4_SetConfig+0xb8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d007      	beq.n	800248c <TIM_OC4_SetConfig+0x70>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <TIM_OC4_SetConfig+0xbc>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d003      	beq.n	800248c <TIM_OC4_SetConfig+0x70>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a15      	ldr	r2, [pc, #84]	; (80024dc <TIM_OC4_SetConfig+0xc0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d109      	bne.n	80024a0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <TIM_OC4_SetConfig+0xc4>)
 8002490:	4013      	ands	r3, r2
 8002492:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	019b      	lsls	r3, r3, #6
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	697a      	ldr	r2, [r7, #20]
 80024a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	621a      	str	r2, [r3, #32]
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b006      	add	sp, #24
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	46c0      	nop			; (mov r8, r8)
 80024c4:	ffffefff 	.word	0xffffefff
 80024c8:	ffff8fff 	.word	0xffff8fff
 80024cc:	fffffcff 	.word	0xfffffcff
 80024d0:	ffffdfff 	.word	0xffffdfff
 80024d4:	40012c00 	.word	0x40012c00
 80024d8:	40014400 	.word	0x40014400
 80024dc:	40014800 	.word	0x40014800
 80024e0:	ffffbfff 	.word	0xffffbfff

080024e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	2201      	movs	r2, #1
 80024fc:	4393      	bics	r3, r2
 80024fe:	001a      	movs	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	22f0      	movs	r2, #240	; 0xf0
 800250e:	4393      	bics	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	693a      	ldr	r2, [r7, #16]
 8002518:	4313      	orrs	r3, r2
 800251a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	220a      	movs	r2, #10
 8002520:	4393      	bics	r3, r2
 8002522:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	697a      	ldr	r2, [r7, #20]
 8002536:	621a      	str	r2, [r3, #32]
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b006      	add	sp, #24
 800253e:	bd80      	pop	{r7, pc}

08002540 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	2210      	movs	r2, #16
 8002552:	4393      	bics	r3, r2
 8002554:	001a      	movs	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	4a0d      	ldr	r2, [pc, #52]	; (80025a0 <TIM_TI2_ConfigInputStage+0x60>)
 800256a:	4013      	ands	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	031b      	lsls	r3, r3, #12
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	4313      	orrs	r3, r2
 8002576:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	22a0      	movs	r2, #160	; 0xa0
 800257c:	4393      	bics	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	011b      	lsls	r3, r3, #4
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	621a      	str	r2, [r3, #32]
}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	46bd      	mov	sp, r7
 800259a:	b006      	add	sp, #24
 800259c:	bd80      	pop	{r7, pc}
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	ffff0fff 	.word	0xffff0fff

080025a4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2270      	movs	r2, #112	; 0x70
 80025b8:	4393      	bics	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	2207      	movs	r2, #7
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	609a      	str	r2, [r3, #8]
}
 80025ce:	46c0      	nop			; (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b004      	add	sp, #16
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	4a09      	ldr	r2, [pc, #36]	; (8002614 <TIM_ETR_SetConfig+0x3c>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	021a      	lsls	r2, r3, #8
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	4313      	orrs	r3, r2
 8002600:	697a      	ldr	r2, [r7, #20]
 8002602:	4313      	orrs	r3, r2
 8002604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	697a      	ldr	r2, [r7, #20]
 800260a:	609a      	str	r2, [r3, #8]
}
 800260c:	46c0      	nop			; (mov r8, r8)
 800260e:	46bd      	mov	sp, r7
 8002610:	b006      	add	sp, #24
 8002612:	bd80      	pop	{r7, pc}
 8002614:	ffff00ff 	.word	0xffff00ff

08002618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	221f      	movs	r2, #31
 8002628:	4013      	ands	r3, r2
 800262a:	2201      	movs	r2, #1
 800262c:	409a      	lsls	r2, r3
 800262e:	0013      	movs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	43d2      	mvns	r2, r2
 800263a:	401a      	ands	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a1a      	ldr	r2, [r3, #32]
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	211f      	movs	r1, #31
 8002648:	400b      	ands	r3, r1
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4099      	lsls	r1, r3
 800264e:	000b      	movs	r3, r1
 8002650:	431a      	orrs	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	621a      	str	r2, [r3, #32]
}
 8002656:	46c0      	nop			; (mov r8, r8)
 8002658:	46bd      	mov	sp, r7
 800265a:	b006      	add	sp, #24
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	223c      	movs	r2, #60	; 0x3c
 800266e:	5c9b      	ldrb	r3, [r3, r2]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002674:	2302      	movs	r3, #2
 8002676:	e042      	b.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	223c      	movs	r2, #60	; 0x3c
 800267c:	2101      	movs	r1, #1
 800267e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	223d      	movs	r2, #61	; 0x3d
 8002684:	2102      	movs	r1, #2
 8002686:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2270      	movs	r2, #112	; 0x70
 800269c:	4393      	bics	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d00a      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	05db      	lsls	r3, r3, #23
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d004      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	4393      	bics	r3, r2
 80026d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	223d      	movs	r2, #61	; 0x3d
 80026f0:	2101      	movs	r1, #1
 80026f2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	223c      	movs	r2, #60	; 0x3c
 80026f8:	2100      	movs	r1, #0
 80026fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400

08002710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	223c      	movs	r2, #60	; 0x3c
 8002722:	5c9b      	ldrb	r3, [r3, r2]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002728:	2302      	movs	r3, #2
 800272a:	e03e      	b.n	80027aa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	223c      	movs	r2, #60	; 0x3c
 8002730:	2101      	movs	r1, #1
 8002732:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	22ff      	movs	r2, #255	; 0xff
 8002738:	4393      	bics	r3, r2
 800273a:	001a      	movs	r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	4313      	orrs	r3, r2
 8002742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002748:	401a      	ands	r2, r3
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4a18      	ldr	r2, [pc, #96]	; (80027b8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002756:	401a      	ands	r2, r3
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4313      	orrs	r3, r2
 800275e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002764:	401a      	ands	r2, r3
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	4a13      	ldr	r2, [pc, #76]	; (80027c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002772:	401a      	ands	r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a11      	ldr	r2, [pc, #68]	; (80027c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002780:	401a      	ands	r2, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800278e:	401a      	ands	r2, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	223c      	movs	r2, #60	; 0x3c
 80027a4:	2100      	movs	r1, #0
 80027a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	0018      	movs	r0, r3
 80027ac:	46bd      	mov	sp, r7
 80027ae:	b004      	add	sp, #16
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	46c0      	nop			; (mov r8, r8)
 80027b4:	fffffcff 	.word	0xfffffcff
 80027b8:	fffffbff 	.word	0xfffffbff
 80027bc:	fffff7ff 	.word	0xfffff7ff
 80027c0:	ffffefff 	.word	0xffffefff
 80027c4:	ffffdfff 	.word	0xffffdfff
 80027c8:	ffffbfff 	.word	0xffffbfff

080027cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e044      	b.n	8002868 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2274      	movs	r2, #116	; 0x74
 80027ea:	2100      	movs	r1, #0
 80027ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0018      	movs	r0, r3
 80027f2:	f7fe f8a1 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2224      	movs	r2, #36	; 0x24
 80027fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2101      	movs	r1, #1
 8002808:	438a      	bics	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f8da 	bl	80029c8 <UART_SetConfig>
 8002814:	0003      	movs	r3, r0
 8002816:	2b01      	cmp	r3, #1
 8002818:	d101      	bne.n	800281e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e024      	b.n	8002868 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fa0d 	bl	8002c48 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	490d      	ldr	r1, [pc, #52]	; (8002870 <HAL_UART_Init+0xa4>)
 800283a:	400a      	ands	r2, r1
 800283c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	212a      	movs	r1, #42	; 0x2a
 800284a:	438a      	bics	r2, r1
 800284c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2101      	movs	r1, #1
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	0018      	movs	r0, r3
 8002862:	f000 faa5 	bl	8002db0 <UART_CheckIdleState>
 8002866:	0003      	movs	r3, r0
}
 8002868:	0018      	movs	r0, r3
 800286a:	46bd      	mov	sp, r7
 800286c:	b002      	add	sp, #8
 800286e:	bd80      	pop	{r7, pc}
 8002870:	ffffb7ff 	.word	0xffffb7ff

08002874 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	603b      	str	r3, [r7, #0]
 8002880:	1dbb      	adds	r3, r7, #6
 8002882:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002888:	2b20      	cmp	r3, #32
 800288a:	d000      	beq.n	800288e <HAL_UART_Transmit+0x1a>
 800288c:	e096      	b.n	80029bc <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_UART_Transmit+0x28>
 8002894:	1dbb      	adds	r3, r7, #6
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e08e      	b.n	80029be <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	015b      	lsls	r3, r3, #5
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d109      	bne.n	80028c0 <HAL_UART_Transmit+0x4c>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	2201      	movs	r2, #1
 80028b8:	4013      	ands	r3, r2
 80028ba:	d001      	beq.n	80028c0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e07e      	b.n	80029be <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2274      	movs	r2, #116	; 0x74
 80028c4:	5c9b      	ldrb	r3, [r3, r2]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Transmit+0x5a>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e077      	b.n	80029be <HAL_UART_Transmit+0x14a>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2274      	movs	r2, #116	; 0x74
 80028d2:	2101      	movs	r1, #1
 80028d4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2280      	movs	r2, #128	; 0x80
 80028da:	2100      	movs	r1, #0
 80028dc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2221      	movs	r2, #33	; 0x21
 80028e2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028e4:	f7fe f92c 	bl	8000b40 <HAL_GetTick>
 80028e8:	0003      	movs	r3, r0
 80028ea:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1dba      	adds	r2, r7, #6
 80028f0:	2150      	movs	r1, #80	; 0x50
 80028f2:	8812      	ldrh	r2, [r2, #0]
 80028f4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1dba      	adds	r2, r7, #6
 80028fa:	2152      	movs	r1, #82	; 0x52
 80028fc:	8812      	ldrh	r2, [r2, #0]
 80028fe:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	015b      	lsls	r3, r3, #5
 8002908:	429a      	cmp	r2, r3
 800290a:	d108      	bne.n	800291e <HAL_UART_Transmit+0xaa>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	691b      	ldr	r3, [r3, #16]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d104      	bne.n	800291e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	e003      	b.n	8002926 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2274      	movs	r2, #116	; 0x74
 800292a:	2100      	movs	r1, #0
 800292c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800292e:	e02d      	b.n	800298c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	0013      	movs	r3, r2
 800293a:	2200      	movs	r2, #0
 800293c:	2180      	movs	r1, #128	; 0x80
 800293e:	f000 fa7f 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002942:	1e03      	subs	r3, r0, #0
 8002944:	d001      	beq.n	800294a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e039      	b.n	80029be <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10b      	bne.n	8002968 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	881a      	ldrh	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	05d2      	lsls	r2, r2, #23
 800295a:	0dd2      	lsrs	r2, r2, #23
 800295c:	b292      	uxth	r2, r2
 800295e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	3302      	adds	r3, #2
 8002964:	61bb      	str	r3, [r7, #24]
 8002966:	e008      	b.n	800297a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	781a      	ldrb	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b292      	uxth	r2, r2
 8002972:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	3301      	adds	r3, #1
 8002978:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2252      	movs	r2, #82	; 0x52
 800297e:	5a9b      	ldrh	r3, [r3, r2]
 8002980:	b29b      	uxth	r3, r3
 8002982:	3b01      	subs	r3, #1
 8002984:	b299      	uxth	r1, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2252      	movs	r2, #82	; 0x52
 800298a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2252      	movs	r2, #82	; 0x52
 8002990:	5a9b      	ldrh	r3, [r3, r2]
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1cb      	bne.n	8002930 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	0013      	movs	r3, r2
 80029a2:	2200      	movs	r2, #0
 80029a4:	2140      	movs	r1, #64	; 0x40
 80029a6:	f000 fa4b 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 80029aa:	1e03      	subs	r3, r0, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e005      	b.n	80029be <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2220      	movs	r2, #32
 80029b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	e000      	b.n	80029be <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029bc:	2302      	movs	r3, #2
  }
}
 80029be:	0018      	movs	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b008      	add	sp, #32
 80029c4:	bd80      	pop	{r7, pc}
	...

080029c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029d0:	231e      	movs	r3, #30
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	2200      	movs	r2, #0
 80029d6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
 80029e0:	431a      	orrs	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	69db      	ldr	r3, [r3, #28]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a8d      	ldr	r2, [pc, #564]	; (8002c2c <UART_SetConfig+0x264>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	4a88      	ldr	r2, [pc, #544]	; (8002c30 <UART_SetConfig+0x268>)
 8002a0e:	4013      	ands	r3, r2
 8002a10:	0019      	movs	r1, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	4a7f      	ldr	r2, [pc, #508]	; (8002c34 <UART_SetConfig+0x26c>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	0019      	movs	r1, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	430a      	orrs	r2, r1
 8002a42:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7b      	ldr	r2, [pc, #492]	; (8002c38 <UART_SetConfig+0x270>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d127      	bne.n	8002a9e <UART_SetConfig+0xd6>
 8002a4e:	4b7b      	ldr	r3, [pc, #492]	; (8002c3c <UART_SetConfig+0x274>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	2203      	movs	r2, #3
 8002a54:	4013      	ands	r3, r2
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d00d      	beq.n	8002a76 <UART_SetConfig+0xae>
 8002a5a:	d81b      	bhi.n	8002a94 <UART_SetConfig+0xcc>
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d014      	beq.n	8002a8a <UART_SetConfig+0xc2>
 8002a60:	d818      	bhi.n	8002a94 <UART_SetConfig+0xcc>
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <UART_SetConfig+0xa4>
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d00a      	beq.n	8002a80 <UART_SetConfig+0xb8>
 8002a6a:	e013      	b.n	8002a94 <UART_SetConfig+0xcc>
 8002a6c:	231f      	movs	r3, #31
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2200      	movs	r2, #0
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e021      	b.n	8002aba <UART_SetConfig+0xf2>
 8002a76:	231f      	movs	r3, #31
 8002a78:	18fb      	adds	r3, r7, r3
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	701a      	strb	r2, [r3, #0]
 8002a7e:	e01c      	b.n	8002aba <UART_SetConfig+0xf2>
 8002a80:	231f      	movs	r3, #31
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2204      	movs	r2, #4
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e017      	b.n	8002aba <UART_SetConfig+0xf2>
 8002a8a:	231f      	movs	r3, #31
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2208      	movs	r2, #8
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e012      	b.n	8002aba <UART_SetConfig+0xf2>
 8002a94:	231f      	movs	r3, #31
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2210      	movs	r2, #16
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e00d      	b.n	8002aba <UART_SetConfig+0xf2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a67      	ldr	r2, [pc, #412]	; (8002c40 <UART_SetConfig+0x278>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d104      	bne.n	8002ab2 <UART_SetConfig+0xea>
 8002aa8:	231f      	movs	r3, #31
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2200      	movs	r2, #0
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e003      	b.n	8002aba <UART_SetConfig+0xf2>
 8002ab2:	231f      	movs	r3, #31
 8002ab4:	18fb      	adds	r3, r7, r3
 8002ab6:	2210      	movs	r2, #16
 8002ab8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69da      	ldr	r2, [r3, #28]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	021b      	lsls	r3, r3, #8
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d15d      	bne.n	8002b82 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8002ac6:	231f      	movs	r3, #31
 8002ac8:	18fb      	adds	r3, r7, r3
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d015      	beq.n	8002afc <UART_SetConfig+0x134>
 8002ad0:	dc18      	bgt.n	8002b04 <UART_SetConfig+0x13c>
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d00d      	beq.n	8002af2 <UART_SetConfig+0x12a>
 8002ad6:	dc15      	bgt.n	8002b04 <UART_SetConfig+0x13c>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d002      	beq.n	8002ae2 <UART_SetConfig+0x11a>
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d005      	beq.n	8002aec <UART_SetConfig+0x124>
 8002ae0:	e010      	b.n	8002b04 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ae2:	f7fe ff61 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 8002ae6:	0003      	movs	r3, r0
 8002ae8:	61bb      	str	r3, [r7, #24]
        break;
 8002aea:	e012      	b.n	8002b12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aec:	4b55      	ldr	r3, [pc, #340]	; (8002c44 <UART_SetConfig+0x27c>)
 8002aee:	61bb      	str	r3, [r7, #24]
        break;
 8002af0:	e00f      	b.n	8002b12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002af2:	f7fe fecf 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002af6:	0003      	movs	r3, r0
 8002af8:	61bb      	str	r3, [r7, #24]
        break;
 8002afa:	e00a      	b.n	8002b12 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	61bb      	str	r3, [r7, #24]
        break;
 8002b02:	e006      	b.n	8002b12 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b08:	231e      	movs	r3, #30
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
        break;
 8002b10:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d100      	bne.n	8002b1a <UART_SetConfig+0x152>
 8002b18:	e07b      	b.n	8002c12 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	005a      	lsls	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	18d2      	adds	r2, r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	f7fd faf3 	bl	8000118 <__udivsi3>
 8002b32:	0003      	movs	r3, r0
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	2b0f      	cmp	r3, #15
 8002b3c:	d91c      	bls.n	8002b78 <UART_SetConfig+0x1b0>
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	025b      	lsls	r3, r3, #9
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d217      	bcs.n	8002b78 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	200e      	movs	r0, #14
 8002b4e:	183b      	adds	r3, r7, r0
 8002b50:	210f      	movs	r1, #15
 8002b52:	438a      	bics	r2, r1
 8002b54:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	2207      	movs	r2, #7
 8002b5e:	4013      	ands	r3, r2
 8002b60:	b299      	uxth	r1, r3
 8002b62:	183b      	adds	r3, r7, r0
 8002b64:	183a      	adds	r2, r7, r0
 8002b66:	8812      	ldrh	r2, [r2, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	183a      	adds	r2, r7, r0
 8002b72:	8812      	ldrh	r2, [r2, #0]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	e04c      	b.n	8002c12 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002b78:	231e      	movs	r3, #30
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	e047      	b.n	8002c12 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b82:	231f      	movs	r3, #31
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d015      	beq.n	8002bb8 <UART_SetConfig+0x1f0>
 8002b8c:	dc18      	bgt.n	8002bc0 <UART_SetConfig+0x1f8>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d00d      	beq.n	8002bae <UART_SetConfig+0x1e6>
 8002b92:	dc15      	bgt.n	8002bc0 <UART_SetConfig+0x1f8>
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <UART_SetConfig+0x1d6>
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d005      	beq.n	8002ba8 <UART_SetConfig+0x1e0>
 8002b9c:	e010      	b.n	8002bc0 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9e:	f7fe ff03 	bl	80019a8 <HAL_RCC_GetPCLK1Freq>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	61bb      	str	r3, [r7, #24]
        break;
 8002ba6:	e012      	b.n	8002bce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ba8:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <UART_SetConfig+0x27c>)
 8002baa:	61bb      	str	r3, [r7, #24]
        break;
 8002bac:	e00f      	b.n	8002bce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bae:	f7fe fe71 	bl	8001894 <HAL_RCC_GetSysClockFreq>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	61bb      	str	r3, [r7, #24]
        break;
 8002bb6:	e00a      	b.n	8002bce <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	021b      	lsls	r3, r3, #8
 8002bbc:	61bb      	str	r3, [r7, #24]
        break;
 8002bbe:	e006      	b.n	8002bce <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bc4:	231e      	movs	r3, #30
 8002bc6:	18fb      	adds	r3, r7, r3
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
        break;
 8002bcc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01e      	beq.n	8002c12 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	085a      	lsrs	r2, r3, #1
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	18d2      	adds	r2, r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	0019      	movs	r1, r3
 8002be4:	0010      	movs	r0, r2
 8002be6:	f7fd fa97 	bl	8000118 <__udivsi3>
 8002bea:	0003      	movs	r3, r0
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	2b0f      	cmp	r3, #15
 8002bf4:	d909      	bls.n	8002c0a <UART_SetConfig+0x242>
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	025b      	lsls	r3, r3, #9
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d204      	bcs.n	8002c0a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	60da      	str	r2, [r3, #12]
 8002c08:	e003      	b.n	8002c12 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8002c0a:	231e      	movs	r3, #30
 8002c0c:	18fb      	adds	r3, r7, r3
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c1e:	231e      	movs	r3, #30
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	781b      	ldrb	r3, [r3, #0]
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b008      	add	sp, #32
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	efff69f3 	.word	0xefff69f3
 8002c30:	ffffcfff 	.word	0xffffcfff
 8002c34:	fffff4ff 	.word	0xfffff4ff
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40004400 	.word	0x40004400
 8002c44:	007a1200 	.word	0x007a1200

08002c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	2201      	movs	r2, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a4a      	ldr	r2, [pc, #296]	; (8002d8c <UART_AdvFeatureConfig+0x144>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	0019      	movs	r1, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2202      	movs	r2, #2
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d00b      	beq.n	8002c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a43      	ldr	r2, [pc, #268]	; (8002d90 <UART_AdvFeatureConfig+0x148>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	430a      	orrs	r2, r1
 8002c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	2204      	movs	r2, #4
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a3b      	ldr	r2, [pc, #236]	; (8002d94 <UART_AdvFeatureConfig+0x14c>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	2208      	movs	r2, #8
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	4a34      	ldr	r2, [pc, #208]	; (8002d98 <UART_AdvFeatureConfig+0x150>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	0019      	movs	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	2210      	movs	r2, #16
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d00b      	beq.n	8002cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a2c      	ldr	r2, [pc, #176]	; (8002d9c <UART_AdvFeatureConfig+0x154>)
 8002cea:	4013      	ands	r3, r2
 8002cec:	0019      	movs	r1, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2220      	movs	r2, #32
 8002d00:	4013      	ands	r3, r2
 8002d02:	d00b      	beq.n	8002d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	4a25      	ldr	r2, [pc, #148]	; (8002da0 <UART_AdvFeatureConfig+0x158>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	0019      	movs	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	2240      	movs	r2, #64	; 0x40
 8002d22:	4013      	ands	r3, r2
 8002d24:	d01d      	beq.n	8002d62 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <UART_AdvFeatureConfig+0x15c>)
 8002d2e:	4013      	ands	r3, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	035b      	lsls	r3, r3, #13
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d10b      	bne.n	8002d62 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <UART_AdvFeatureConfig+0x160>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	0019      	movs	r1, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2280      	movs	r2, #128	; 0x80
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d00b      	beq.n	8002d84 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <UART_AdvFeatureConfig+0x164>)
 8002d74:	4013      	ands	r3, r2
 8002d76:	0019      	movs	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]
  }
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	fffdffff 	.word	0xfffdffff
 8002d90:	fffeffff 	.word	0xfffeffff
 8002d94:	fffbffff 	.word	0xfffbffff
 8002d98:	ffff7fff 	.word	0xffff7fff
 8002d9c:	ffffefff 	.word	0xffffefff
 8002da0:	ffffdfff 	.word	0xffffdfff
 8002da4:	ffefffff 	.word	0xffefffff
 8002da8:	ff9fffff 	.word	0xff9fffff
 8002dac:	fff7ffff 	.word	0xfff7ffff

08002db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2280      	movs	r2, #128	; 0x80
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dc0:	f7fd febe 	bl	8000b40 <HAL_GetTick>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2208      	movs	r2, #8
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d10c      	bne.n	8002df0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	0391      	lsls	r1, r2, #14
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <UART_CheckIdleState+0x8c>)
 8002de0:	9200      	str	r2, [sp, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f000 f82c 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002de8:	1e03      	subs	r3, r0, #0
 8002dea:	d001      	beq.n	8002df0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e021      	b.n	8002e34 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2204      	movs	r2, #4
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d10c      	bne.n	8002e18 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	03d1      	lsls	r1, r2, #15
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	4a0d      	ldr	r2, [pc, #52]	; (8002e3c <UART_CheckIdleState+0x8c>)
 8002e08:	9200      	str	r2, [sp, #0]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f000 f818 	bl	8002e40 <UART_WaitOnFlagUntilTimeout>
 8002e10:	1e03      	subs	r3, r0, #0
 8002e12:	d001      	beq.n	8002e18 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e00d      	b.n	8002e34 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2220      	movs	r2, #32
 8002e1c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2220      	movs	r2, #32
 8002e22:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2274      	movs	r2, #116	; 0x74
 8002e2e:	2100      	movs	r1, #0
 8002e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	0018      	movs	r0, r3
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b004      	add	sp, #16
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	01ffffff 	.word	0x01ffffff

08002e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b094      	sub	sp, #80	; 0x50
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	1dfb      	adds	r3, r7, #7
 8002e4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e50:	e0a3      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e54:	3301      	adds	r3, #1
 8002e56:	d100      	bne.n	8002e5a <UART_WaitOnFlagUntilTimeout+0x1a>
 8002e58:	e09f      	b.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5a:	f7fd fe71 	bl	8000b40 <HAL_GetTick>
 8002e5e:	0002      	movs	r2, r0
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d302      	bcc.n	8002e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d13d      	bne.n	8002eec <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e70:	f3ef 8310 	mrs	r3, PRIMASK
 8002e74:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			; (mov r8, r8)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	494c      	ldr	r1, [pc, #304]	; (8002fc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002e92:	400a      	ands	r2, r1
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e98:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eaa:	643b      	str	r3, [r7, #64]	; 0x40
 8002eac:	2301      	movs	r3, #1
 8002eae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb2:	f383 8810 	msr	PRIMASK, r3
}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	438a      	bics	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eca:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ece:	f383 8810 	msr	PRIMASK, r3
}
 8002ed2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2220      	movs	r2, #32
 8002ede:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2274      	movs	r2, #116	; 0x74
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e067      	b.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2204      	movs	r2, #4
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	d050      	beq.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	401a      	ands	r2, r3
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	d146      	bne.n	8002f9a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2280      	movs	r2, #128	; 0x80
 8002f12:	0112      	lsls	r2, r2, #4
 8002f14:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f16:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1a:	613b      	str	r3, [r7, #16]
  return(result);
 8002f1c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f20:	2301      	movs	r3, #1
 8002f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f383 8810 	msr	PRIMASK, r3
}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4923      	ldr	r1, [pc, #140]	; (8002fc4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002f38:	400a      	ands	r2, r1
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f383 8810 	msr	PRIMASK, r3
}
 8002f46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f48:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4c:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f4e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f50:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f52:	2301      	movs	r3, #1
 8002f54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2101      	movs	r1, #1
 8002f6a:	438a      	bics	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	f383 8810 	msr	PRIMASK, r3
}
 8002f78:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2220      	movs	r2, #32
 8002f84:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2280      	movs	r2, #128	; 0x80
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2274      	movs	r2, #116	; 0x74
 8002f92:	2100      	movs	r1, #0
 8002f94:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e010      	b.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	68ba      	ldr	r2, [r7, #8]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	425a      	negs	r2, r3
 8002faa:	4153      	adcs	r3, r2
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	001a      	movs	r2, r3
 8002fb0:	1dfb      	adds	r3, r7, #7
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d100      	bne.n	8002fba <UART_WaitOnFlagUntilTimeout+0x17a>
 8002fb8:	e74b      	b.n	8002e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	0018      	movs	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b014      	add	sp, #80	; 0x50
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	fffffe5f 	.word	0xfffffe5f

08002fc8 <__libc_init_array>:
 8002fc8:	b570      	push	{r4, r5, r6, lr}
 8002fca:	2600      	movs	r6, #0
 8002fcc:	4d0c      	ldr	r5, [pc, #48]	; (8003000 <__libc_init_array+0x38>)
 8002fce:	4c0d      	ldr	r4, [pc, #52]	; (8003004 <__libc_init_array+0x3c>)
 8002fd0:	1b64      	subs	r4, r4, r5
 8002fd2:	10a4      	asrs	r4, r4, #2
 8002fd4:	42a6      	cmp	r6, r4
 8002fd6:	d109      	bne.n	8002fec <__libc_init_array+0x24>
 8002fd8:	2600      	movs	r6, #0
 8002fda:	f000 f82b 	bl	8003034 <_init>
 8002fde:	4d0a      	ldr	r5, [pc, #40]	; (8003008 <__libc_init_array+0x40>)
 8002fe0:	4c0a      	ldr	r4, [pc, #40]	; (800300c <__libc_init_array+0x44>)
 8002fe2:	1b64      	subs	r4, r4, r5
 8002fe4:	10a4      	asrs	r4, r4, #2
 8002fe6:	42a6      	cmp	r6, r4
 8002fe8:	d105      	bne.n	8002ff6 <__libc_init_array+0x2e>
 8002fea:	bd70      	pop	{r4, r5, r6, pc}
 8002fec:	00b3      	lsls	r3, r6, #2
 8002fee:	58eb      	ldr	r3, [r5, r3]
 8002ff0:	4798      	blx	r3
 8002ff2:	3601      	adds	r6, #1
 8002ff4:	e7ee      	b.n	8002fd4 <__libc_init_array+0xc>
 8002ff6:	00b3      	lsls	r3, r6, #2
 8002ff8:	58eb      	ldr	r3, [r5, r3]
 8002ffa:	4798      	blx	r3
 8002ffc:	3601      	adds	r6, #1
 8002ffe:	e7f2      	b.n	8002fe6 <__libc_init_array+0x1e>
 8003000:	08003a8c 	.word	0x08003a8c
 8003004:	08003a8c 	.word	0x08003a8c
 8003008:	08003a8c 	.word	0x08003a8c
 800300c:	08003a90 	.word	0x08003a90

08003010 <memcpy>:
 8003010:	2300      	movs	r3, #0
 8003012:	b510      	push	{r4, lr}
 8003014:	429a      	cmp	r2, r3
 8003016:	d100      	bne.n	800301a <memcpy+0xa>
 8003018:	bd10      	pop	{r4, pc}
 800301a:	5ccc      	ldrb	r4, [r1, r3]
 800301c:	54c4      	strb	r4, [r0, r3]
 800301e:	3301      	adds	r3, #1
 8003020:	e7f8      	b.n	8003014 <memcpy+0x4>

08003022 <memset>:
 8003022:	0003      	movs	r3, r0
 8003024:	1882      	adds	r2, r0, r2
 8003026:	4293      	cmp	r3, r2
 8003028:	d100      	bne.n	800302c <memset+0xa>
 800302a:	4770      	bx	lr
 800302c:	7019      	strb	r1, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	e7f9      	b.n	8003026 <memset+0x4>
	...

08003034 <_init>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr

08003040 <_fini>:
 8003040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003046:	bc08      	pop	{r3}
 8003048:	469e      	mov	lr, r3
 800304a:	4770      	bx	lr
